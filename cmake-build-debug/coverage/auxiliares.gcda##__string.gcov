        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/__string
        -:    0:Graph:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/auxiliares.gcno
        -:    0:Data:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- __string ----------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___STRING
        -:   11:#define _LIBCPP___STRING
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__algorithm/copy.h>
        -:   15:#include <__algorithm/copy_backward.h>
        -:   16:#include <__algorithm/copy_n.h>
        -:   17:#include <__algorithm/fill_n.h>
        -:   18:#include <__algorithm/find_first_of.h>
        -:   19:#include <__algorithm/find_end.h>
        -:   20:#include <__algorithm/min.h>
        -:   21:#include <__functional/hash.h>     // for __murmur2_or_cityhash
        -:   22:#include <__iterator/iterator_traits.h>
        -:   23:#include <cstdio>      // for EOF
        -:   24:#include <cstdint>     // for uint_least16_t
        -:   25:#include <cstring>     // for memcpy
        -:   26:#include <type_traits> // for __libcpp_is_constant_evaluated
        -:   27:#include <iosfwd>      // for streampos & friends
        -:   28:
        -:   29:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:   30:#   include <cwchar> // for wmemcpy
        -:   31:#endif
        -:   32:
        -:   33:#include <__debug>
        -:   34:
        -:   35:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   36:#pragma GCC system_header
        -:   37:#endif
        -:   38:
        -:   39:_LIBCPP_PUSH_MACROS
        -:   40:#include <__undef_macros>
        -:   41:
        -:   42:
        -:   43:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   44:
        -:   45:// The the extern template ABI lists are kept outside of <string> to improve the
        -:   46:// readability of that header.
        -:   47:
        -:   48:// The extern template ABI lists are kept outside of <string> to improve the
        -:   49:// readability of that header. We maintain 2 ABI lists:
        -:   50:// - _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST
        -:   51:// - _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST
        -:   52:// As the name implies, the ABI lists define the V1 (Stable) and unstable ABI.
        -:   53://
        -:   54:// For unstable, we may explicitly remove function that are external in V1,
        -:   55:// and add (new) external functions to better control inlining and compiler
        -:   56:// optimization opportunities.
        -:   57://
        -:   58:// For stable, the ABI list should rarely change, except for adding new
        -:   59:// functions supporting new c++ version / API changes. Typically entries
        -:   60:// must never be removed from the stable list.
        -:   61:#define _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_Func, _CharType) \
        -:   62:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*, size_type)) \
        -:   63:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type const*, size_type, size_type) const) \
        -:   64:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type, size_type)) \
        -:   65:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&)) \
        -:   66:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*)) \
        -:   67:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, allocator<_CharType> const&)) \
        -:   68:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_not_of(value_type const*, size_type, size_type) const) \
        -:   69:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::~basic_string()) \
        -:   70:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_not_of(value_type const*, size_type, size_type) const) \
        -:   71:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, size_type, value_type)) \
        -:   72:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(value_type)) \
        -:   73:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type)) \
        -:   74:  _Func(_LIBCPP_FUNC_VIS const _CharType& basic_string<_CharType>::at(size_type) const) \
        -:   75:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*, size_type)) \
        -:   76:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_of(value_type const*, size_type, size_type) const) \
        -:   77:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, size_type, value_type)) \
        -:   78:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(value_type const*, size_type)) \
        -:   79:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::reserve(size_type)) \
        -:   80:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*, size_type)) \
        -:   81:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(basic_string const&, size_type, size_type)) \
        -:   82:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::copy(value_type*, size_type, size_type) const) \
        -:   83:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, size_type, size_type, allocator<_CharType> const&)) \
        -:   84:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type, size_type) const) \
        -:   85:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(size_type, value_type)) \
        -:   86:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*)) \
        -:   87:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_of(value_type const*, size_type, size_type) const) \
        -:   88:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type)) \
        -:   89:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*)) \
        -:   90:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::push_back(value_type)) \
        -:   91:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(size_type, value_type)) \
        -:   92:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type, size_type) const) \
        -:   93:  _Func(_LIBCPP_FUNC_VIS const basic_string<_CharType>::size_type basic_string<_CharType>::npos) \
        -:   94:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(size_type, value_type)) \
        -:   95:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::erase(size_type, size_type)) \
        -:   96:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(basic_string const&, size_type, size_type)) \
        -:   97:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(value_type const*) const) \
        -:   98:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*) const) \
        -:   99:  _Func(_LIBCPP_FUNC_VIS _CharType& basic_string<_CharType>::at(size_type)) \
        -:  100:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(value_type const*)) \
        -:  101:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type const*, size_type, size_type) const) \
        -:  102:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, basic_string const&, size_type, size_type) const) \
        -:  103:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*, size_type) const) \
        -:  104:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(basic_string const&)) \
        -:  105:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*)) \
        -:  106:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, basic_string const&, size_type, size_type)) \
        -:  107:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::iterator basic_string<_CharType>::insert(basic_string::const_iterator, value_type)) \
        -:  108:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::resize(size_type, value_type)) \
        -:  109:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, basic_string const&, size_type, size_type))
        -:  110:
        -:  111:#define _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_Func, _CharType) \
        -:  112:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*, size_type)) \
        -:  113:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type const*, size_type, size_type) const) \
        -:  114:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type, size_type)) \
        -:  115:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*)) \
        -:  116:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_not_of(value_type const*, size_type, size_type) const) \
        -:  117:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::~basic_string()) \
        -:  118:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_not_of(value_type const*, size_type, size_type) const) \
        -:  119:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, size_type, value_type)) \
        -:  120:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(value_type)) \
        -:  121:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type)) \
        -:  122:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init_copy_ctor_external(value_type const*, size_type)) \
        -:  123:  _Func(_LIBCPP_FUNC_VIS const _CharType& basic_string<_CharType>::at(size_type) const) \
        -:  124:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*, size_type)) \
        -:  125:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_of(value_type const*, size_type, size_type) const) \
        -:  126:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, size_type, value_type)) \
        -:  127:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_external(value_type const*, size_type)) \
        -:  128:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_external(value_type const*)) \
        -:  129:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::reserve(size_type)) \
        -:  130:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*, size_type)) \
        -:  131:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(basic_string const&, size_type, size_type)) \
        -:  132:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::copy(value_type*, size_type, size_type) const) \
        -:  133:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, size_type, size_type, allocator<_CharType> const&)) \
        -:  134:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type, size_type) const) \
        -:  135:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(size_type, value_type)) \
        -:  136:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*)) \
        -:  137:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_of(value_type const*, size_type, size_type) const) \
        -:  138:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type)) \
        -:  139:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*)) \
        -:  140:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_no_alias<false>(value_type const*, size_type)) \
        -:  141:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_no_alias<true>(value_type const*, size_type)) \
        -:  142:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::push_back(value_type)) \
        -:  143:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(size_type, value_type)) \
        -:  144:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type, size_type) const) \
        -:  145:  _Func(_LIBCPP_FUNC_VIS const basic_string<_CharType>::size_type basic_string<_CharType>::npos) \
        -:  146:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(size_type, value_type)) \
        -:  147:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__erase_external_with_move(size_type, size_type)) \
        -:  148:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(basic_string const&, size_type, size_type)) \
        -:  149:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(value_type const*) const) \
        -:  150:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*) const) \
        -:  151:  _Func(_LIBCPP_FUNC_VIS _CharType& basic_string<_CharType>::at(size_type)) \
        -:  152:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type const*, size_type, size_type) const) \
        -:  153:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, basic_string const&, size_type, size_type) const) \
        -:  154:  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*, size_type) const) \
        -:  155:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*)) \
        -:  156:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, basic_string const&, size_type, size_type)) \
        -:  157:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::iterator basic_string<_CharType>::insert(basic_string::const_iterator, value_type)) \
        -:  158:  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::resize(size_type, value_type)) \
        -:  159:  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, basic_string const&, size_type, size_type))
        -:  160:
        -:  161:
        -:  162:// char_traits
        -:  163:
        -:  164:template <class _CharT>
        -:  165:struct _LIBCPP_TEMPLATE_VIS char_traits
        -:  166:{
        -:  167:    typedef _CharT    char_type;
        -:  168:    typedef int       int_type;
        -:  169:    typedef streamoff off_type;
        -:  170:    typedef streampos pos_type;
        -:  171:    typedef mbstate_t state_type;
        -:  172:
        -:  173:    static inline void _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  174:        assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}
        -:  175:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  176:        {return __c1 == __c2;}
        -:  177:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  178:        {return __c1 < __c2;}
        -:  179:
        -:  180:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  181:    int compare(const char_type* __s1, const char_type* __s2, size_t __n);
        -:  182:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  183:    size_t length(const char_type* __s);
        -:  184:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  185:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a);
        -:  186:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  187:    char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);
        -:  188:    _LIBCPP_INLINE_VISIBILITY
        -:  189:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  190:    char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);
        -:  191:    _LIBCPP_INLINE_VISIBILITY
        -:  192:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  193:    char_type*       assign(char_type* __s, size_t __n, char_type __a);
        -:  194:
        -:  195:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  196:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  197:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  198:        {return char_type(__c);}
        -:  199:    static inline _LIBCPP_CONSTEXPR int_type  to_int_type(char_type __c) _NOEXCEPT
        -:  200:        {return int_type(__c);}
        -:  201:    static inline _LIBCPP_CONSTEXPR bool      eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  202:        {return __c1 == __c2;}
        -:  203:    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT
        -:  204:        {return int_type(EOF);}
        -:  205:};
        -:  206:
        -:  207:template <class _CharT>
        -:  208:_LIBCPP_CONSTEXPR_AFTER_CXX14 int
        -:  209:char_traits<_CharT>::compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  210:{
        -:  211:    for (; __n; --__n, ++__s1, ++__s2)
        -:  212:    {
        -:  213:        if (lt(*__s1, *__s2))
        -:  214:            return -1;
        -:  215:        if (lt(*__s2, *__s1))
        -:  216:            return 1;
        -:  217:    }
        -:  218:    return 0;
        -:  219:}
        -:  220:
        -:  221:template <class _CharT>
        -:  222:inline
        -:  223:_LIBCPP_CONSTEXPR_AFTER_CXX14 size_t
        -:  224:char_traits<_CharT>::length(const char_type* __s)
        -:  225:{
        -:  226:    size_t __len = 0;
        -:  227:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  228:        ++__len;
        -:  229:    return __len;
        -:  230:}
        -:  231:
        -:  232:template <class _CharT>
        -:  233:inline
        -:  234:_LIBCPP_CONSTEXPR_AFTER_CXX14 const _CharT*
        -:  235:char_traits<_CharT>::find(const char_type* __s, size_t __n, const char_type& __a)
        -:  236:{
        -:  237:    for (; __n; --__n)
        -:  238:    {
        -:  239:        if (eq(*__s, __a))
        -:  240:            return __s;
        -:  241:        ++__s;
        -:  242:    }
        -:  243:    return nullptr;
        -:  244:}
        -:  245:
        -:  246:template <class _CharT>
        -:  247:_LIBCPP_CONSTEXPR_AFTER_CXX17 _CharT*
        -:  248:char_traits<_CharT>::move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  249:{
        -:  250:    if (__n == 0) return __s1;
        -:  251:    char_type* __r = __s1;
        -:  252:    if (__s1 < __s2)
        -:  253:    {
        -:  254:        for (; __n; --__n, ++__s1, ++__s2)
        -:  255:            assign(*__s1, *__s2);
        -:  256:    }
        -:  257:    else if (__s2 < __s1)
        -:  258:    {
        -:  259:        __s1 += __n;
        -:  260:        __s2 += __n;
        -:  261:        for (; __n; --__n)
        -:  262:            assign(*--__s1, *--__s2);
        -:  263:    }
        -:  264:    return __r;
        -:  265:}
        -:  266:
        -:  267:template <class _CharT>
        -:  268:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  269:_CharT*
        -:  270:char_traits<_CharT>::copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  271:{
        -:  272:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  273:    char_type* __r = __s1;
        -:  274:    for (; __n; --__n, ++__s1, ++__s2)
        -:  275:        assign(*__s1, *__s2);
        -:  276:    return __r;
        -:  277:}
        -:  278:
        -:  279:template <class _CharT>
        -:  280:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  281:_CharT*
        -:  282:char_traits<_CharT>::assign(char_type* __s, size_t __n, char_type __a)
        -:  283:{
        -:  284:    char_type* __r = __s;
        -:  285:    for (; __n; --__n, ++__s)
        -:  286:        assign(*__s, __a);
        -:  287:    return __r;
        -:  288:}
        -:  289:
        -:  290:// constexpr versions of move/copy/assign.
        -:  291:
        -:  292:template <class _CharT>
        -:  293:static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  294:_CharT* __move_constexpr(_CharT* __s1, const _CharT* __s2, size_t __n) _NOEXCEPT
        -:  295:{
        -:  296:    if (__n == 0) return __s1;
        -:  297:    if (__s1 < __s2) {
        -:  298:      _VSTD::copy(__s2, __s2 + __n, __s1);
        -:  299:    } else if (__s2 < __s1) {
        -:  300:      _VSTD::copy_backward(__s2, __s2 + __n, __s1 + __n);
        -:  301:    }
        -:  302:    return __s1;
        -:  303:}
        -:  304:
        -:  305:template <class _CharT>
        -:  306:static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  307:_CharT* __copy_constexpr(_CharT* __s1, const _CharT* __s2, size_t __n) _NOEXCEPT
        -:  308:{
        -:  309:    _VSTD::copy_n(__s2, __n, __s1);
        -:  310:    return __s1;
        -:  311:}
        -:  312:
        -:  313:template <class _CharT>
        -:  314:static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  315:_CharT* __assign_constexpr(_CharT* __s, size_t __n, _CharT __a) _NOEXCEPT
        -:  316:{
        -:  317:     _VSTD::fill_n(__s, __n, __a);
        -:  318:     return __s;
        -:  319:}
        -:  320:
        -:  321:// char_traits<char>
        -:  322:
        -:  323:template <>
        -:  324:struct _LIBCPP_TEMPLATE_VIS char_traits<char>
        -:  325:{
        -:  326:    typedef char      char_type;
        -:  327:    typedef int       int_type;
        -:  328:    typedef streamoff off_type;
        -:  329:    typedef streampos pos_type;
        -:  330:    typedef mbstate_t state_type;
        -:  331:
        -:  332:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  333:    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}
        -:  334:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  335:            {return __c1 == __c2;}
        -:  336:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  337:        {return (unsigned char)__c1 < (unsigned char)__c2;}
        -:  338:
        -:  339:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  340:    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  341:    static inline size_t _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__111char_traitsIcE6lengthEPKc called 0 returned 0% blocks executed 0%
    #####:  342:    length(const char_type* __s)  _NOEXCEPT {return __builtin_strlen(__s);}
    $$$$$:  342-block  0
        -:  343:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  344:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;
        -:  345:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  346:    char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  347:        {
        -:  348:            return __libcpp_is_constant_evaluated()
        -:  349:                       ? _VSTD::__move_constexpr(__s1, __s2, __n)
        -:  350:                       : __n == 0 ? __s1 : (char_type*)_VSTD::memmove(__s1, __s2, __n);
        -:  351:        }
        -:  352:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  353:    char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  354:        {
        -:  355:            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  356:            return __libcpp_is_constant_evaluated()
        -:  357:                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)
        -:  358:                       : __n == 0 ? __s1 : (char_type*)_VSTD::memcpy(__s1, __s2, __n);
        -:  359:        }
        -:  360:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  361:    char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT
        -:  362:        {
        -:  363:            return __libcpp_is_constant_evaluated()
        -:  364:                       ? _VSTD::__assign_constexpr(__s, __n, __a)
        -:  365:                       : __n == 0 ? __s : (char_type*)_VSTD::memset(__s, to_int_type(__a), __n);
        -:  366:        }
        -:  367:
        -:  368:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  369:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  370:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  371:        {return char_type(__c);}
        -:  372:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  373:        {return int_type((unsigned char)__c);}
function _ZNSt3__111char_traitsIcE11eq_int_typeEii called 0 returned 0% blocks executed 0%
    #####:  374:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
    #####:  375:        {return __c1 == __c2;}
    $$$$$:  375-block  0
function _ZNSt3__111char_traitsIcE3eofEv called 0 returned 0% blocks executed 0%
    #####:  376:    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT
    #####:  377:        {return int_type(EOF);}
    $$$$$:  377-block  0
        -:  378:};
        -:  379:
        -:  380:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  381:int
        -:  382:char_traits<char>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  383:{
        -:  384:    if (__n == 0)
        -:  385:        return 0;
        -:  386:#if __has_feature(cxx_constexpr_string_builtins)
        -:  387:    return __builtin_memcmp(__s1, __s2, __n);
        -:  388:#elif _LIBCPP_STD_VER <= 14
        -:  389:    return _VSTD::memcmp(__s1, __s2, __n);
        -:  390:#else
        -:  391:    for (; __n; --__n, ++__s1, ++__s2)
        -:  392:    {
        -:  393:        if (lt(*__s1, *__s2))
        -:  394:            return -1;
        -:  395:        if (lt(*__s2, *__s1))
        -:  396:            return 1;
        -:  397:    }
        -:  398:    return 0;
        -:  399:#endif
        -:  400:}
        -:  401:
        -:  402:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  403:const char*
        -:  404:char_traits<char>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT
        -:  405:{
        -:  406:    if (__n == 0)
        -:  407:        return nullptr;
        -:  408:#if __has_feature(cxx_constexpr_string_builtins)
        -:  409:    return __builtin_char_memchr(__s, to_int_type(__a), __n);
        -:  410:#elif _LIBCPP_STD_VER <= 14
        -:  411:    return (const char_type*) _VSTD::memchr(__s, to_int_type(__a), __n);
        -:  412:#else
        -:  413:    for (; __n; --__n)
        -:  414:    {
        -:  415:        if (eq(*__s, __a))
        -:  416:            return __s;
        -:  417:        ++__s;
        -:  418:    }
        -:  419:    return nullptr;
        -:  420:#endif
        -:  421:}
        -:  422:
        -:  423:
        -:  424:// char_traits<wchar_t>
        -:  425:
        -:  426:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  427:template <>
        -:  428:struct _LIBCPP_TEMPLATE_VIS char_traits<wchar_t>
        -:  429:{
        -:  430:    typedef wchar_t   char_type;
        -:  431:    typedef wint_t    int_type;
        -:  432:    typedef streamoff off_type;
        -:  433:    typedef streampos pos_type;
        -:  434:    typedef mbstate_t state_type;
        -:  435:
        -:  436:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  437:    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}
        -:  438:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  439:        {return __c1 == __c2;}
        -:  440:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  441:        {return __c1 < __c2;}
        -:  442:
        -:  443:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  444:    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  445:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  446:    size_t length(const char_type* __s) _NOEXCEPT;
        -:  447:    static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  448:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;
        -:  449:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  450:    char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  451:        {
        -:  452:            return __libcpp_is_constant_evaluated()
        -:  453:                       ? _VSTD::__move_constexpr(__s1, __s2, __n)
        -:  454:                       : __n == 0 ? __s1 : _VSTD::wmemmove(__s1, __s2, __n);
        -:  455:        }
        -:  456:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  457:    char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  458:        {
        -:  459:            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  460:            return __libcpp_is_constant_evaluated()
        -:  461:                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)
        -:  462:                       : __n == 0 ? __s1 : _VSTD::wmemcpy(__s1, __s2, __n);
        -:  463:        }
        -:  464:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  465:    char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT
        -:  466:        {
        -:  467:            return __libcpp_is_constant_evaluated()
        -:  468:                       ? _VSTD::__assign_constexpr(__s, __n, __a)
        -:  469:                       : __n == 0 ? __s : _VSTD::wmemset(__s, __a, __n);
        -:  470:        }
        -:  471:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  472:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  473:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  474:        {return char_type(__c);}
        -:  475:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  476:        {return int_type(__c);}
        -:  477:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  478:        {return __c1 == __c2;}
        -:  479:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  480:        {return int_type(WEOF);}
        -:  481:};
        -:  482:
        -:  483:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  484:int
        -:  485:char_traits<wchar_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  486:{
        -:  487:    if (__n == 0)
        -:  488:        return 0;
        -:  489:#if __has_feature(cxx_constexpr_string_builtins)
        -:  490:    return __builtin_wmemcmp(__s1, __s2, __n);
        -:  491:#elif _LIBCPP_STD_VER <= 14
        -:  492:    return _VSTD::wmemcmp(__s1, __s2, __n);
        -:  493:#else
        -:  494:    for (; __n; --__n, ++__s1, ++__s2)
        -:  495:    {
        -:  496:        if (lt(*__s1, *__s2))
        -:  497:            return -1;
        -:  498:        if (lt(*__s2, *__s1))
        -:  499:            return 1;
        -:  500:    }
        -:  501:    return 0;
        -:  502:#endif
        -:  503:}
        -:  504:
        -:  505:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  506:size_t
        -:  507:char_traits<wchar_t>::length(const char_type* __s) _NOEXCEPT
        -:  508:{
        -:  509:#if __has_feature(cxx_constexpr_string_builtins)
        -:  510:    return __builtin_wcslen(__s);
        -:  511:#elif _LIBCPP_STD_VER <= 14
        -:  512:    return _VSTD::wcslen(__s);
        -:  513:#else
        -:  514:    size_t __len = 0;
        -:  515:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  516:        ++__len;
        -:  517:    return __len;
        -:  518:#endif
        -:  519:}
        -:  520:
        -:  521:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  522:const wchar_t*
        -:  523:char_traits<wchar_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT
        -:  524:{
        -:  525:    if (__n == 0)
        -:  526:        return nullptr;
        -:  527:#if __has_feature(cxx_constexpr_string_builtins)
        -:  528:    return __builtin_wmemchr(__s, __a, __n);
        -:  529:#elif _LIBCPP_STD_VER <= 14
        -:  530:    return _VSTD::wmemchr(__s, __a, __n);
        -:  531:#else
        -:  532:    for (; __n; --__n)
        -:  533:    {
        -:  534:        if (eq(*__s, __a))
        -:  535:            return __s;
        -:  536:        ++__s;
        -:  537:    }
        -:  538:    return nullptr;
        -:  539:#endif
        -:  540:}
        -:  541:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  542:
        -:  543:template <class _Traits>
        -:  544:_LIBCPP_INLINE_VISIBILITY
        -:  545:_LIBCPP_CONSTEXPR
        -:  546:inline size_t __char_traits_length_checked(const typename _Traits::char_type* __s) _NOEXCEPT {
        -:  547:#if _LIBCPP_DEBUG_LEVEL >= 1
        -:  548:  return __s ? _Traits::length(__s) : (_VSTD::__libcpp_debug_function(_VSTD::__libcpp_debug_info(__FILE__, __LINE__, "p == nullptr", "null pointer pass to non-null argument of char_traits<...>::length")), 0);
        -:  549:#else
        -:  550:  return _Traits::length(__s);
        -:  551:#endif
        -:  552:}
        -:  553:
        -:  554:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -:  555:
        -:  556:template <>
        -:  557:struct _LIBCPP_TEMPLATE_VIS char_traits<char8_t>
        -:  558:{
        -:  559:    typedef char8_t        char_type;
        -:  560:    typedef unsigned int   int_type;
        -:  561:    typedef streamoff      off_type;
        -:  562:    typedef u8streampos    pos_type;
        -:  563:    typedef mbstate_t      state_type;
        -:  564:
        -:  565:    static inline constexpr void assign(char_type& __c1, const char_type& __c2) noexcept
        -:  566:        {__c1 = __c2;}
        -:  567:    static inline constexpr bool eq(char_type __c1, char_type __c2) noexcept
        -:  568:        {return __c1 == __c2;}
        -:  569:    static inline constexpr bool lt(char_type __c1, char_type __c2) noexcept
        -:  570:        {return __c1 < __c2;}
        -:  571:
        -:  572:    static constexpr
        -:  573:    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  574:
        -:  575:    static constexpr
        -:  576:    size_t           length(const char_type* __s) _NOEXCEPT;
        -:  577:
        -:  578:    _LIBCPP_INLINE_VISIBILITY static constexpr
        -:  579:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;
        -:  580:
        -:  581:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  582:    char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  583:        {
        -:  584:            return __libcpp_is_constant_evaluated()
        -:  585:                       ? _VSTD::__move_constexpr(__s1, __s2, __n)
        -:  586:                       : __n == 0 ? __s1 : (char_type*)_VSTD::memmove(__s1, __s2, __n);
        -:  587:        }
        -:  588:
        -:  589:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  590:    char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  591:       {
        -:  592:            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  593:            return __libcpp_is_constant_evaluated()
        -:  594:                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)
        -:  595:                       : __n == 0 ? __s1 : (char_type*)_VSTD::memcpy(__s1, __s2, __n);
        -:  596:        }
        -:  597:
        -:  598:    static _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  599:    char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT
        -:  600:        {
        -:  601:            return __libcpp_is_constant_evaluated()
        -:  602:                       ? _VSTD::__assign_constexpr(__s, __n, __a)
        -:  603:                       : __n == 0 ? __s : (char_type*)_VSTD::memset(__s, to_int_type(__a), __n);
        -:  604:        }
        -:  605:
        -:  606:    static inline constexpr int_type  not_eof(int_type __c) noexcept
        -:  607:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  608:    static inline constexpr char_type to_char_type(int_type __c) noexcept
        -:  609:        {return char_type(__c);}
        -:  610:    static inline constexpr int_type to_int_type(char_type __c) noexcept
        -:  611:        {return int_type(__c);}
        -:  612:    static inline constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept
        -:  613:        {return __c1 == __c2;}
        -:  614:    static inline constexpr int_type eof() noexcept
        -:  615:        {return int_type(EOF);}
        -:  616:};
        -:  617:
        -:  618:// TODO use '__builtin_strlen' if it ever supports char8_t ??
        -:  619:inline constexpr
        -:  620:size_t
        -:  621:char_traits<char8_t>::length(const char_type* __s) _NOEXCEPT
        -:  622:{
        -:  623:    size_t __len = 0;
        -:  624:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  625:        ++__len;
        -:  626:    return __len;
        -:  627:}
        -:  628:
        -:  629:inline constexpr
        -:  630:int
        -:  631:char_traits<char8_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  632:{
        -:  633:#if __has_feature(cxx_constexpr_string_builtins)
        -:  634:    return __builtin_memcmp(__s1, __s2, __n);
        -:  635:#else
        -:  636:    for (; __n; --__n, ++__s1, ++__s2)
        -:  637:    {
        -:  638:        if (lt(*__s1, *__s2))
        -:  639:            return -1;
        -:  640:        if (lt(*__s2, *__s1))
        -:  641:            return 1;
        -:  642:    }
        -:  643:    return 0;
        -:  644:#endif
        -:  645:}
        -:  646:
        -:  647:// TODO use '__builtin_char_memchr' if it ever supports char8_t ??
        -:  648:inline constexpr
        -:  649:const char8_t*
        -:  650:char_traits<char8_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT
        -:  651:{
        -:  652:    for (; __n; --__n)
        -:  653:    {
        -:  654:        if (eq(*__s, __a))
        -:  655:            return __s;
        -:  656:        ++__s;
        -:  657:    }
        -:  658:    return nullptr;
        -:  659:}
        -:  660:
        -:  661:#endif // #_LIBCPP_HAS_NO_CHAR8_T
        -:  662:
        -:  663:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  664:
        -:  665:template <>
        -:  666:struct _LIBCPP_TEMPLATE_VIS char_traits<char16_t>
        -:  667:{
        -:  668:    typedef char16_t       char_type;
        -:  669:    typedef uint_least16_t int_type;
        -:  670:    typedef streamoff      off_type;
        -:  671:    typedef u16streampos   pos_type;
        -:  672:    typedef mbstate_t      state_type;
        -:  673:
        -:  674:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  675:    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}
        -:  676:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  677:        {return __c1 == __c2;}
        -:  678:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  679:        {return __c1 < __c2;}
        -:  680:
        -:  681:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  682:    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  683:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  684:    size_t           length(const char_type* __s) _NOEXCEPT;
        -:  685:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  686:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;
        -:  687:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  688:    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  689:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  690:    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  691:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  692:    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;
        -:  693:
        -:  694:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  695:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  696:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  697:        {return char_type(__c);}
        -:  698:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  699:        {return int_type(__c);}
        -:  700:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  701:        {return __c1 == __c2;}
        -:  702:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  703:        {return int_type(0xFFFF);}
        -:  704:};
        -:  705:
        -:  706:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  707:int
        -:  708:char_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  709:{
        -:  710:    for (; __n; --__n, ++__s1, ++__s2)
        -:  711:    {
        -:  712:        if (lt(*__s1, *__s2))
        -:  713:            return -1;
        -:  714:        if (lt(*__s2, *__s1))
        -:  715:            return 1;
        -:  716:    }
        -:  717:    return 0;
        -:  718:}
        -:  719:
        -:  720:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  721:size_t
        -:  722:char_traits<char16_t>::length(const char_type* __s) _NOEXCEPT
        -:  723:{
        -:  724:    size_t __len = 0;
        -:  725:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  726:        ++__len;
        -:  727:    return __len;
        -:  728:}
        -:  729:
        -:  730:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  731:const char16_t*
        -:  732:char_traits<char16_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT
        -:  733:{
        -:  734:    for (; __n; --__n)
        -:  735:    {
        -:  736:        if (eq(*__s, __a))
        -:  737:            return __s;
        -:  738:        ++__s;
        -:  739:    }
        -:  740:    return nullptr;
        -:  741:}
        -:  742:
        -:  743:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  744:char16_t*
        -:  745:char_traits<char16_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  746:{
        -:  747:    if (__n == 0) return __s1;
        -:  748:    char_type* __r = __s1;
        -:  749:    if (__s1 < __s2)
        -:  750:    {
        -:  751:        for (; __n; --__n, ++__s1, ++__s2)
        -:  752:            assign(*__s1, *__s2);
        -:  753:    }
        -:  754:    else if (__s2 < __s1)
        -:  755:    {
        -:  756:        __s1 += __n;
        -:  757:        __s2 += __n;
        -:  758:        for (; __n; --__n)
        -:  759:            assign(*--__s1, *--__s2);
        -:  760:    }
        -:  761:    return __r;
        -:  762:}
        -:  763:
        -:  764:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  765:char16_t*
        -:  766:char_traits<char16_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  767:{
        -:  768:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  769:    char_type* __r = __s1;
        -:  770:    for (; __n; --__n, ++__s1, ++__s2)
        -:  771:        assign(*__s1, *__s2);
        -:  772:    return __r;
        -:  773:}
        -:  774:
        -:  775:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  776:char16_t*
        -:  777:char_traits<char16_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT
        -:  778:{
        -:  779:    char_type* __r = __s;
        -:  780:    for (; __n; --__n, ++__s)
        -:  781:        assign(*__s, __a);
        -:  782:    return __r;
        -:  783:}
        -:  784:
        -:  785:template <>
        -:  786:struct _LIBCPP_TEMPLATE_VIS char_traits<char32_t>
        -:  787:{
        -:  788:    typedef char32_t       char_type;
        -:  789:    typedef uint_least32_t int_type;
        -:  790:    typedef streamoff      off_type;
        -:  791:    typedef u32streampos   pos_type;
        -:  792:    typedef mbstate_t      state_type;
        -:  793:
        -:  794:    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  795:    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}
        -:  796:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  797:        {return __c1 == __c2;}
        -:  798:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  799:        {return __c1 < __c2;}
        -:  800:
        -:  801:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  802:    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  803:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  804:    size_t           length(const char_type* __s) _NOEXCEPT;
        -:  805:    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  806:    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;
        -:  807:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  808:    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  809:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  810:    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;
        -:  811:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  812:    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;
        -:  813:
        -:  814:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  815:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  816:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  817:        {return char_type(__c);}
        -:  818:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  819:        {return int_type(__c);}
        -:  820:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  821:        {return __c1 == __c2;}
        -:  822:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  823:        {return int_type(0xFFFFFFFF);}
        -:  824:};
        -:  825:
        -:  826:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  827:int
        -:  828:char_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  829:{
        -:  830:    for (; __n; --__n, ++__s1, ++__s2)
        -:  831:    {
        -:  832:        if (lt(*__s1, *__s2))
        -:  833:            return -1;
        -:  834:        if (lt(*__s2, *__s1))
        -:  835:            return 1;
        -:  836:    }
        -:  837:    return 0;
        -:  838:}
        -:  839:
        -:  840:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  841:size_t
        -:  842:char_traits<char32_t>::length(const char_type* __s) _NOEXCEPT
        -:  843:{
        -:  844:    size_t __len = 0;
        -:  845:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  846:        ++__len;
        -:  847:    return __len;
        -:  848:}
        -:  849:
        -:  850:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  851:const char32_t*
        -:  852:char_traits<char32_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT
        -:  853:{
        -:  854:    for (; __n; --__n)
        -:  855:    {
        -:  856:        if (eq(*__s, __a))
        -:  857:            return __s;
        -:  858:        ++__s;
        -:  859:    }
        -:  860:    return nullptr;
        -:  861:}
        -:  862:
        -:  863:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  864:char32_t*
        -:  865:char_traits<char32_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  866:{
        -:  867:    if (__n == 0) return __s1;
        -:  868:    char_type* __r = __s1;
        -:  869:    if (__s1 < __s2)
        -:  870:    {
        -:  871:        for (; __n; --__n, ++__s1, ++__s2)
        -:  872:            assign(*__s1, *__s2);
        -:  873:    }
        -:  874:    else if (__s2 < __s1)
        -:  875:    {
        -:  876:        __s1 += __n;
        -:  877:        __s2 += __n;
        -:  878:        for (; __n; --__n)
        -:  879:            assign(*--__s1, *--__s2);
        -:  880:    }
        -:  881:    return __r;
        -:  882:}
        -:  883:
        -:  884:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  885:char32_t*
        -:  886:char_traits<char32_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT
        -:  887:{
        -:  888:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  889:    char_type* __r = __s1;
        -:  890:    for (; __n; --__n, ++__s1, ++__s2)
        -:  891:        assign(*__s1, *__s2);
        -:  892:    return __r;
        -:  893:}
        -:  894:
        -:  895:inline _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  896:char32_t*
        -:  897:char_traits<char32_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT
        -:  898:{
        -:  899:    char_type* __r = __s;
        -:  900:    for (; __n; --__n, ++__s)
        -:  901:        assign(*__s, __a);
        -:  902:    return __r;
        -:  903:}
        -:  904:
        -:  905:#endif // _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  906:
        -:  907:// helper fns for basic_string and string_view
        -:  908:
        -:  909:// __str_find
        -:  910:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  911:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  912:__str_find(const _CharT *__p, _SizeT __sz,
        -:  913:             _CharT __c, _SizeT __pos) _NOEXCEPT
        -:  914:{
        -:  915:    if (__pos >= __sz)
        -:  916:        return __npos;
        -:  917:    const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);
        -:  918:    if (__r == nullptr)
        -:  919:        return __npos;
        -:  920:    return static_cast<_SizeT>(__r - __p);
        -:  921:}
        -:  922:
        -:  923:template <class _CharT, class _Traits>
        -:  924:inline _LIBCPP_CONSTEXPR_AFTER_CXX11 const _CharT *
        -:  925:__search_substring(const _CharT *__first1, const _CharT *__last1,
        -:  926:                   const _CharT *__first2, const _CharT *__last2) _NOEXCEPT {
        -:  927:  // Take advantage of knowing source and pattern lengths.
        -:  928:  // Stop short when source is smaller than pattern.
        -:  929:  const ptrdiff_t __len2 = __last2 - __first2;
        -:  930:  if (__len2 == 0)
        -:  931:    return __first1;
        -:  932:
        -:  933:  ptrdiff_t __len1 = __last1 - __first1;
        -:  934:  if (__len1 < __len2)
        -:  935:    return __last1;
        -:  936:
        -:  937:  // First element of __first2 is loop invariant.
        -:  938:  _CharT __f2 = *__first2;
        -:  939:  while (true) {
        -:  940:    __len1 = __last1 - __first1;
        -:  941:    // Check whether __first1 still has at least __len2 bytes.
        -:  942:    if (__len1 < __len2)
        -:  943:      return __last1;
        -:  944:
        -:  945:    // Find __f2 the first byte matching in __first1.
        -:  946:    __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2);
        -:  947:    if (__first1 == nullptr)
        -:  948:      return __last1;
        -:  949:
        -:  950:    // It is faster to compare from the first byte of __first1 even if we
        -:  951:    // already know that it matches the first byte of __first2: this is because
        -:  952:    // __first2 is most likely aligned, as it is user's "pattern" string, and
        -:  953:    // __first1 + 1 is most likely not aligned, as the match is in the middle of
        -:  954:    // the string.
        -:  955:    if (_Traits::compare(__first1, __first2, __len2) == 0)
        -:  956:      return __first1;
        -:  957:
        -:  958:    ++__first1;
        -:  959:  }
        -:  960:}
        -:  961:
        -:  962:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  963:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  964:__str_find(const _CharT *__p, _SizeT __sz,
        -:  965:       const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -:  966:{
        -:  967:    if (__pos > __sz)
        -:  968:        return __npos;
        -:  969:
        -:  970:    if (__n == 0) // There is nothing to search, just return __pos.
        -:  971:        return __pos;
        -:  972:
        -:  973:    const _CharT *__r = __search_substring<_CharT, _Traits>(
        -:  974:        __p + __pos, __p + __sz, __s, __s + __n);
        -:  975:
        -:  976:    if (__r == __p + __sz)
        -:  977:        return __npos;
        -:  978:    return static_cast<_SizeT>(__r - __p);
        -:  979:}
        -:  980:
        -:  981:
        -:  982:// __str_rfind
        -:  983:
        -:  984:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  985:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  986:__str_rfind(const _CharT *__p, _SizeT __sz,
        -:  987:              _CharT __c, _SizeT __pos) _NOEXCEPT
        -:  988:{
        -:  989:    if (__sz < 1)
        -:  990:        return __npos;
        -:  991:    if (__pos < __sz)
        -:  992:        ++__pos;
        -:  993:    else
        -:  994:        __pos = __sz;
        -:  995:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -:  996:    {
        -:  997:        if (_Traits::eq(*--__ps, __c))
        -:  998:            return static_cast<_SizeT>(__ps - __p);
        -:  999:    }
        -: 1000:    return __npos;
        -: 1001:}
        -: 1002:
        -: 1003:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1004:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1005:__str_rfind(const _CharT *__p, _SizeT __sz,
        -: 1006:        const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1007:{
        -: 1008:    __pos = _VSTD::min(__pos, __sz);
        -: 1009:    if (__n < __sz - __pos)
        -: 1010:        __pos += __n;
        -: 1011:    else
        -: 1012:        __pos = __sz;
        -: 1013:    const _CharT* __r = _VSTD::__find_end(
        -: 1014:                  __p, __p + __pos, __s, __s + __n, _Traits::eq,
        -: 1015:                        random_access_iterator_tag(), random_access_iterator_tag());
        -: 1016:    if (__n > 0 && __r == __p + __pos)
        -: 1017:        return __npos;
        -: 1018:    return static_cast<_SizeT>(__r - __p);
        -: 1019:}
        -: 1020:
        -: 1021:// __str_find_first_of
        -: 1022:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1023:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1024:__str_find_first_of(const _CharT *__p, _SizeT __sz,
        -: 1025:                const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1026:{
        -: 1027:    if (__pos >= __sz || __n == 0)
        -: 1028:        return __npos;
        -: 1029:    const _CharT* __r = _VSTD::__find_first_of_ce
        -: 1030:        (__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq );
        -: 1031:    if (__r == __p + __sz)
        -: 1032:        return __npos;
        -: 1033:    return static_cast<_SizeT>(__r - __p);
        -: 1034:}
        -: 1035:
        -: 1036:
        -: 1037:// __str_find_last_of
        -: 1038:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1039:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1040:__str_find_last_of(const _CharT *__p, _SizeT __sz,
        -: 1041:               const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1042:    {
        -: 1043:    if (__n != 0)
        -: 1044:    {
        -: 1045:        if (__pos < __sz)
        -: 1046:            ++__pos;
        -: 1047:        else
        -: 1048:            __pos = __sz;
        -: 1049:        for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1050:        {
        -: 1051:            const _CharT* __r = _Traits::find(__s, __n, *--__ps);
        -: 1052:            if (__r)
        -: 1053:                return static_cast<_SizeT>(__ps - __p);
        -: 1054:        }
        -: 1055:    }
        -: 1056:    return __npos;
        -: 1057:}
        -: 1058:
        -: 1059:
        -: 1060:// __str_find_first_not_of
        -: 1061:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1062:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1063:__str_find_first_not_of(const _CharT *__p, _SizeT __sz,
        -: 1064:                    const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1065:{
        -: 1066:    if (__pos < __sz)
        -: 1067:    {
        -: 1068:        const _CharT* __pe = __p + __sz;
        -: 1069:        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
        -: 1070:            if (_Traits::find(__s, __n, *__ps) == nullptr)
        -: 1071:                return static_cast<_SizeT>(__ps - __p);
        -: 1072:    }
        -: 1073:    return __npos;
        -: 1074:}
        -: 1075:
        -: 1076:
        -: 1077:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1078:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1079:__str_find_first_not_of(const _CharT *__p, _SizeT __sz,
        -: 1080:                          _CharT __c, _SizeT __pos) _NOEXCEPT
        -: 1081:{
        -: 1082:    if (__pos < __sz)
        -: 1083:    {
        -: 1084:        const _CharT* __pe = __p + __sz;
        -: 1085:        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
        -: 1086:            if (!_Traits::eq(*__ps, __c))
        -: 1087:                return static_cast<_SizeT>(__ps - __p);
        -: 1088:    }
        -: 1089:    return __npos;
        -: 1090:}
        -: 1091:
        -: 1092:
        -: 1093:// __str_find_last_not_of
        -: 1094:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1095:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1096:__str_find_last_not_of(const _CharT *__p, _SizeT __sz,
        -: 1097:                   const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1098:{
        -: 1099:    if (__pos < __sz)
        -: 1100:        ++__pos;
        -: 1101:    else
        -: 1102:        __pos = __sz;
        -: 1103:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1104:        if (_Traits::find(__s, __n, *--__ps) == nullptr)
        -: 1105:            return static_cast<_SizeT>(__ps - __p);
        -: 1106:    return __npos;
        -: 1107:}
        -: 1108:
        -: 1109:
        -: 1110:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1111:inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1112:__str_find_last_not_of(const _CharT *__p, _SizeT __sz,
        -: 1113:                         _CharT __c, _SizeT __pos) _NOEXCEPT
        -: 1114:{
        -: 1115:    if (__pos < __sz)
        -: 1116:        ++__pos;
        -: 1117:    else
        -: 1118:        __pos = __sz;
        -: 1119:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1120:        if (!_Traits::eq(*--__ps, __c))
        -: 1121:            return static_cast<_SizeT>(__ps - __p);
        -: 1122:    return __npos;
        -: 1123:}
        -: 1124:
        -: 1125:template<class _Ptr>
        -: 1126:inline _LIBCPP_INLINE_VISIBILITY
        -: 1127:size_t __do_string_hash(_Ptr __p, _Ptr __e)
        -: 1128:{
        -: 1129:    typedef typename iterator_traits<_Ptr>::value_type value_type;
        -: 1130:    return __murmur2_or_cityhash<size_t>()(__p, (__e-__p)*sizeof(value_type));
        -: 1131:}
        -: 1132:
        -: 1133:template <class _CharT, class _Iter, class _Traits=char_traits<_CharT> >
        -: 1134:struct __quoted_output_proxy
        -: 1135:{
        -: 1136:    _Iter  __first;
        -: 1137:    _Iter  __last;
        -: 1138:    _CharT  __delim;
        -: 1139:    _CharT  __escape;
        -: 1140:
        -: 1141:    __quoted_output_proxy(_Iter __f, _Iter __l, _CharT __d, _CharT __e)
        -: 1142:    : __first(__f), __last(__l), __delim(__d), __escape(__e) {}
        -: 1143:    //  This would be a nice place for a string_ref
        -: 1144:};
        -: 1145:
        -: 1146:_LIBCPP_END_NAMESPACE_STD
        -: 1147:
        -: 1148:_LIBCPP_POP_MACROS
        -: 1149:
        -: 1150:#endif // _LIBCPP___STRING
