        -:    0:Source:/Users/IAGO/Desktop/TPI/auxiliares.cpp
        -:    0:Graph:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/auxiliares.gcno
        -:    0:Data:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "auxiliares.h"
        -:    3:#include <iostream>
        -:    4:#include <algorithm>
        -:    5:#include <fstream>
        -:    6:#include <iomanip>
        -:    7:
        -:    8:using namespace std;
        -:    9:
        -:   10:const double pi = 3.14;
        -:   11:double radioTierra = 6378;
        -:   12:
function _Z14obtenerLatitudNSt3__15tupleIJddEEE called 423 returned 100% blocks executed 100%
      423:   13:double obtenerLatitud(gps posicion) {
      423:   14:    return get<0>(posicion);
      423:   14-block  0
        -:   15:}
        -:   16:
function _Z15obtenerLongitudNSt3__15tupleIJddEEE called 279 returned 100% blocks executed 100%
      279:   17:double obtenerLongitud(gps posicion) {
      279:   18:    return get<1>(posicion);
      279:   18-block  0
        -:   19:}
        -:   20:
function _Z15obtenerPosicionNSt3__15tupleIJdNS0_IJddEEEEEE called 146 returned 100% blocks executed 100%
      146:   21:gps obtenerPosicion(tuple<tiempo, gps> medicion) {
      146:   22:    return get<1>(medicion);
      146:   22-block  0
        -:   23:}
        -:   24:
function _Z13obtenerTiempoNSt3__15tupleIJdNS0_IJddEEEEEE called 771 returned 100% blocks executed 100%
      771:   25:tiempo obtenerTiempo(tuple<tiempo, gps> medicion) {
      771:   26:    return get<0>(medicion);
      771:   26-block  0
        -:   27:}
function _Z11obtenerEsq1NSt3__15tupleIJNS0_IJddEEES1_NS0_IJiiEEEEEE called 56 returned 100% blocks executed 100%
       56:   28:gps obtenerEsq1(celda celda) {
       56:   29:    return get<0>(celda);
       56:   29-block  0
        -:   30:}
function _Z11obtenerEsq2NSt3__15tupleIJNS0_IJddEEES1_NS0_IJiiEEEEEE called 56 returned 100% blocks executed 100%
       56:   31:gps obtenerEsq2(celda celda) {
       56:   32:    return get<1>(celda);
       56:   32-block  0
        -:   33:}
function _Z13obtenerNombreNSt3__15tupleIJNS0_IJddEEES1_NS0_IJiiEEEEEE called 4 returned 100% blocks executed 100%
        4:   34:nombre obtenerNombre(celda celda) {
        4:   35:    return get<2>(celda);
        4:   35-block  0
        -:   36:}
function _Z11obtenerFilaNSt3__15tupleIJiiEEE called 4 returned 100% blocks executed 100%
        4:   37:int obtenerFila(nombre nombre) {
        4:   38:    return get<0>(nombre);
        4:   38-block  0
        -:   39:}
function _Z14obtenerColumnaNSt3__15tupleIJiiEEE called 4 returned 100% blocks executed 100%
        4:   40:int obtenerColumna(nombre nombre) {
        4:   41:    return get<1>(nombre);
        4:   41-block  0
        -:   42:}
function _Z8distEnKMNSt3__15tupleIJddEEES1_ called 31 returned 100% blocks executed 100%
       31:   43:double distEnKM(gps posicion1, gps posicion2) {
       31:   44:    double latitud1 = obtenerLatitud(posicion1);
       31:   45:    double latitud2 = obtenerLatitud(posicion2);
       31:   46:    double longitud1 = obtenerLongitud(posicion1);
       31:   47:    double longitud2 = obtenerLongitud(posicion2);
        -:   48:
        -:   49:    // obtengo la distancia
       31:   50:    double distanciaLatitud = (latitud2 - latitud1) * pi / 180.0;
       31:   51:    double distanciaLongitud = (longitud2 - longitud1) * pi / 180.0;
        -:   52:
        -:   53:    // paso las latitudes a radianes
       31:   54:    latitud1 = (latitud1) * pi / 180.0;
       31:   55:    latitud2 = (latitud2) * pi / 180.0;
        -:   56:
        -:   57:    // aplico la formula
       62:   58:    double a = pow(sin(distanciaLatitud / 2), 2) +
       62:   59:               pow(sin(distanciaLongitud / 2), 2) *
       62:   60:               cos(latitud1) * cos(latitud2);
        -:   61:
       31:   62:    double c = 2 * asin(sqrt(a));
       31:   63:    return radioTierra * c;
       31:   63-block  0
        -:   64:}
        -:   65:
function _Z14velocidadMediaNSt3__15tupleIJdNS0_IJddEEEEEES2_ called 6 returned 100% blocks executed 100%
        6:   66:double velocidadMedia(puntoViaje p1, puntoViaje p2) {
        6:   67:    return (distEnKM(obtenerPosicion(p1), obtenerPosicion(p2))) / (obtenerTiempo(p2) - obtenerTiempo(p1));
        6:   67-block  0
        -:   68:}
        -:   69:
function _Z12desviarPuntoNSt3__15tupleIJddEEEdd called 39 returned 100% blocks executed 100%
       39:   70:gps desviarPunto(gps p, double desvioMtsLatitud, double desvioMtsLongitud){
       39:   71:    double lat = obtenerLatitud(p);
       39:   72:    double lon = obtenerLongitud(p);
        -:   73:
       39:   74:    double dx = desvioMtsLatitud / 1000;
       39:   75:    double dy = desvioMtsLongitud / 1000;
       39:   76:    double new_latitude = lat + (dx / radioTierra) * (180 / pi);
       39:   77:    double new_longitude = lon + (dy / radioTierra) * (180 / pi) / cos(lat * pi / 180);
       39:   78:    return puntoGps(new_latitude, new_longitude);
       39:   78-block  0
        -:   79:
        -:   80:}
        -:   81:
        -:   82:
function _Z8puntoGpsdd called 109 returned 100% blocks executed 100%
      109:   83:gps puntoGps(double latitud, double longitud) {
      109:   84:    return make_tuple(latitud, longitud);
      109:   84-block  0
        -:   85:}
        -:   86:
function _Z8mediciondNSt3__15tupleIJddEEE called 100 returned 100% blocks executed 100%
      100:   87:tuple<tiempo, gps> medicion(tiempo t, gps g) {
      100:   88:    return make_tuple(t, g);
      100:   88-block  0
        -:   89:}
        -:   90:
function _Z22guardarGrillaEnArchivoNSt3__16vectorINS_5tupleIJNS1_IJddEEES2_NS1_IJiiEEEEEENS_9allocatorIS4_EEEENS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEE called 0 returned 0% blocks executed 0%
    #####:   91:void guardarGrillaEnArchivo(grilla g, string nombreArchivo){
    #####:   92:    ofstream myfile;
        -:   93:    float esq1_lat, esq2_lat, esq1_lng, esq2_lng;
        -:   94:    int name_0, name_1;
        -:   95:
    #####:   96:    myfile.open(nombreArchivo);
    $$$$$:   96-block  0
branch  0 never executed
branch  1 never executed
    #####:   97:    myfile << std::fixed << std::setprecision(5);
    $$$$$:   97-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   97-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   97-block  2
branch  4 never executed
branch  5 never executed
    #####:   98:    for(int i = 0; i < g.size(); i++){
    $$$$$:   98-block  0
    $$$$$:   98-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   98-block  2
    #####:   99:        esq1_lat = get<0>(get<0>(g[i]));
    #####:  100:        esq1_lng = get<1>(get<0>(g[i]));
        -:  101:
    #####:  102:        esq2_lat = get<0>(get<1>(g[i]));
    #####:  103:        esq2_lng = get<1>(get<1>(g[i]));
        -:  104:
    #####:  105:        name_0 = get<0>(get<2>(g[i]));
    #####:  106:        name_1 = get<1>(get<2>(g[i]));
        -:  107:
    #####:  108:        myfile << esq1_lat << "\t"
    $$$$$:  108-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  108-block  1
branch  2 never executed
branch  3 never executed
    #####:  109:               << esq1_lng << "\t"
    $$$$$:  109-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  109-block  1
branch  2 never executed
branch  3 never executed
    #####:  110:               << esq2_lat << "\t"
    $$$$$:  110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  110-block  1
branch  2 never executed
branch  3 never executed
    #####:  111:               << esq2_lng << "\t"
    $$$$$:  111-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  111-block  1
branch  2 never executed
branch  3 never executed
    #####:  112:               << "(" << name_0 << "," << name_1 << ")"
    $$$$$:  112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  112-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  112-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  112-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  112-block  4
branch  8 never executed
branch  9 never executed
    #####:  113:               << endl;
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
        -:  114:
    #####:  115:    }
    $$$$$:  115-block  0
    #####:  116:    myfile.close();
    $$$$$:  116-block  0
branch  0 never executed
branch  1 never executed
        -:  117:
    #####:  118:}
    $$$$$:  118-block  0
    $$$$$:  118-block  1
    $$$$$:  118-block  2
        -:  119:
function _Z26guardarRecorridosEnArchivoNSt3__16vectorINS0_INS_5tupleIJddEEENS_9allocatorIS2_EEEENS3_IS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEE called 0 returned 0% blocks executed 0%
    #####:  120:void guardarRecorridosEnArchivo(vector<recorrido> recorridos, string nombreArchivo){
    #####:  121:    ofstream myfile;
        -:  122:    float lat, lng;
        -:  123:
    #####:  124:    myfile.open(nombreArchivo);
    $$$$$:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:    myfile << std::fixed << std::setprecision(5);
    $$$$$:  125-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  125-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  125-block  2
branch  4 never executed
branch  5 never executed
    #####:  126:    for(int i = 0; i < recorridos.size(); i++){
    $$$$$:  126-block  0
    $$$$$:  126-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  126-block  2
    #####:  127:        for(int k = 0; k < recorridos[i].size(); k++){
    $$$$$:  127-block  0
    $$$$$:  127-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  127-block  2
    #####:  128:            lat= get<0>(recorridos[i][k]);
    #####:  129:            lng= get<1>(recorridos[i][k]);
        -:  130:
    #####:  131:            myfile << i << "\t"
    $$$$$:  131-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  131-block  1
branch  2 never executed
branch  3 never executed
    #####:  132:                   << lat << "\t"
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  132-block  1
branch  2 never executed
branch  3 never executed
    #####:  133:                   << lng << endl;
    $$$$$:  133-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  133-block  1
branch  2 never executed
branch  3 never executed
    #####:  134:        }
    $$$$$:  134-block  0
    #####:  135:    }
    $$$$$:  135-block  0
    #####:  136:    myfile.close();
    $$$$$:  136-block  0
branch  0 never executed
branch  1 never executed
        -:  137:
    #####:  138:}
    $$$$$:  138-block  0
    $$$$$:  138-block  1
    $$$$$:  138-block  2
        -:  139:
