        -:    0:Source:/Users/IAGO/Desktop/TPI/ejercicios.cpp
        -:    0:Graph:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/ejercicios.gcno
        -:    0:Data:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ejercicios.h"
        -:    2:
        -:    3:#include <algorithm>
        -:    4:#include <fstream>
        -:    5:#include <iomanip>
        -:    6:#include <iostream>
        -:    7:
        -:    8:#include "auxiliares.h"
        -:    9:
        -:   10:using namespace std;
        -:   11:
        -:   12:/******++++**************************** EJERCICIO tiempoTotal
        -:   13: * ***********+++***********************/
        -:   14:
function _Z20tiemposMaximoYMinimoNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEE called 28 returned 100% blocks executed 100%
       28:   15:tuple<tiempo, tiempo> tiemposMaximoYMinimo (viaje v) {
       28:   16:    tiempo max = obtenerTiempo(v[0]);
       28:   17:    tiempo min = obtenerTiempo(v[0]);
      278:   18:    for (int i = 1; i < v.size(); i++) {
       28:   18-block  0
      278:   18-block  1
branch  0 taken 250
branch  1 taken 28
      250:   18-block  2
      250:   19:        if (obtenerTiempo(v[i]) > max) {
      250:   19-block  0
branch  0 taken 128
branch  1 taken 122
      122:   20:            max = obtenerTiempo(v[i]);
      122:   21:        }
      122:   21-block  0
      250:   22:        if (obtenerTiempo(v[i]) < min) {
      250:   22-block  0
branch  0 taken 248
branch  1 taken 2
        2:   23:            min = obtenerTiempo(v[i]);
        2:   24:        }
        2:   24-block  0
      250:   25:    }
      250:   25-block  0
       28:   26:    return {max, min};
       28:   26-block  0
        -:   27:}
        -:   28:
function _Z11tiempoTotalNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEE called 2 returned 100% blocks executed 50%
        2:   29:tiempo tiempoTotal(viaje v) { return get<0>(tiemposMaximoYMinimo(v)) - get<1>(tiemposMaximoYMinimo(v)); }
        2:   29-block  0
branch  0 taken 2
branch  1 taken 0
        2:   29-block  1
branch  2 taken 2
branch  3 taken 0
        2:   29-block  2
branch  4 taken 0
branch  5 taken 2
        2:   29-block  3
    $$$$$:   29-block  4
    $$$$$:   29-block  5
    $$$$$:   29-block  6
    $$$$$:   29-block  7
        -:   30:
        -:   31:/************++*********************** EJERCICIO distanciaTotal
        -:   32: * ************++*********************/
function _Z13viajeOrdenadoNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEE called 1 returned 100% blocks executed 82%
        1:   33:viaje viajeOrdenado(viaje v) {
        1:   34:    viaje auxViaje = v;
        4:   35:    for (int i = 0; i < auxViaje.size(); ++i) {
        1:   35-block  0
        4:   35-block  1
branch  0 taken 1
branch  1 taken 3
        3:   35-block  2
       12:   36:        for (int j = 0; j < auxViaje.size(); ++j) {
        3:   36-block  0
       12:   36-block  1
branch  0 taken 9
branch  1 taken 3
        9:   36-block  2
        9:   37:            if (obtenerTiempo(auxViaje[j]) > obtenerTiempo(auxViaje[i])) {
        9:   37-block  0
branch  0 taken 9
branch  1 taken 0
        9:   37-block  1
branch  2 taken 9
branch  3 taken 0
        9:   37-block  2
branch  4 taken 6
branch  5 taken 3
        3:   38:                puntoViaje auxPunto = auxViaje[i];
        3:   39:                auxViaje[i] = auxViaje[j];
        3:   40:                auxViaje[j] = auxPunto;
        3:   41:            }
        3:   41-block  0
        9:   42:        }
        9:   42-block  0
        3:   43:    }
        3:   43-block  0
        1:   44:    return auxViaje;
        1:   45:}
    $$$$$:   45-block  0
        1:   45-block  1
branch  0 taken 1
branch  1 taken 0
    $$$$$:   45-block  2
        1:   45-block  3
    $$$$$:   45-block  4
        -:   46:
function _Z14distanciaTotalNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEE called 1 returned 100% blocks executed 75%
        1:   47:distancia distanciaTotal(viaje v) {
        1:   48:    distancia d = 0;
        1:   49:    viaje aux = viajeOrdenado(v);
        1:   49-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   49-block  1
    $$$$$:   49-block  2
        -:   50:
        3:   51:    for (int i = 0; i < aux.size() - 1; i++) {
        1:   51-block  0
        3:   51-block  1
branch  0 taken 2
branch  1 taken 1
        2:   51-block  2
        2:   52:        d += distEnKM(obtenerPosicion(aux[i]), obtenerPosicion(aux[i + 1]));
        2:   52-block  0
branch  0 taken 2
branch  1 taken 0
        2:   52-block  1
branch  2 taken 2
branch  3 taken 0
        2:   52-block  2
branch  4 taken 2
branch  5 taken 0
        2:   53:    }
        2:   53-block  0
        1:   54:    return d;
        1:   55:}
    $$$$$:   55-block  0
        1:   55-block  1
        -:   56:
        -:   57:/*****************************+***** EJERCICIO excesoDeVelocidad
        -:   58: * **********************************/
function _Z17excesoDeVelocidadNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEE called 2 returned 100% blocks executed 100%
        2:   59:bool excesoDeVelocidad(viaje v) {
        4:   60:    for (int i = 0; i < v.size() - 1; i++) {
        2:   60-block  0
        4:   60-block  1
branch  0 taken 3
branch  1 taken 1
        2:   60-block  2
        3:   61:        if (velocidadMedia(v[i], v[i + 1])*3600 > 80) {
        3:   61-block  0
branch  0 taken 1
branch  1 taken 2
        1:   62:            return true;
        1:   62-block  0
        -:   63:        }
        2:   64:    }
        2:   64-block  0
        1:   65:    return false;
        1:   65-block  0
        2:   66:}
        2:   66-block  0
        -:   67:
        -:   68:/***************************************** EJERCICIO flota
        -:   69: * ***************************************/
function _Z13estabaEnViajeNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEEdd called 6 returned 100% blocks executed 100%
        6:   70:bool estabaEnViaje(viaje v, tiempo t0, tiempo tf) {
       20:   71:    for (int i = 0; i < v.size(); i++) {
        6:   71-block  0
       20:   71-block  1
branch  0 taken 16
branch  1 taken 4
       14:   71-block  2
       16:   72:        if (obtenerTiempo(v[i]) >= t0 && obtenerTiempo(v[i]) <= tf) {
       16:   72-block  0
branch  0 taken 2
branch  1 taken 14
        2:   72-block  1
branch  2 taken 2
branch  3 taken 0
        2:   73:            return true;
        2:   73-block  0
        -:   74:        }
       14:   75:    }
       14:   75-block  0
        4:   76:    return false;
        4:   76-block  0
        6:   77:}
        6:   77-block  0
        -:   78:
function _Z5flotaNSt3__16vectorINS0_INS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEENS4_IS6_EEEEdd called 2 returned 100% blocks executed 80%
        2:   79:int flota(vector<viaje> f, tiempo t0, tiempo tf) {
        2:   80:    int resp = 0;
        8:   81:    for (int i = 0; i < f.size(); i++) {
        2:   81-block  0
        8:   81-block  1
branch  0 taken 6
branch  1 taken 2
        6:   81-block  2
        6:   82:        if (estabaEnViaje(f[i], t0, tf)) {
        6:   82-block  0
branch  0 taken 6
branch  1 taken 0
        6:   82-block  1
branch  2 taken 4
branch  3 taken 2
    $$$$$:   82-block  2
    $$$$$:   82-block  3
        2:   83:            resp++;
        2:   84:        }
        2:   84-block  0
        6:   85:    }
        6:   85-block  0
        2:   86:    return resp;}
        2:   86-block  0
        -:   87:
        -:   88:/************************************ EJERCICIO recorridoCubierto
        -:   89: * *******************************/
function _Z12estaCubiertoNSt3__15tupleIJddEEENS_6vectorINS0_IJdS1_EEENS_9allocatorIS3_EEEEd called 20 returned 100% blocks executed 100%
       20:   90:bool estaCubierto(gps p, viaje v, distancia u) {
       90:   91:    for (int i = 0; i < v.size(); i++) {
       20:   91-block  0
       90:   91-block  1
branch  0 taken 87
branch  1 taken 3
       70:   91-block  2
       87:   92:        if (distEnKM(p, obtenerPosicion(v[i])) < u) {
       87:   92-block  0
branch  0 taken 17
branch  1 taken 70
       17:   93:            return true;
       17:   93-block  0
        -:   94:        }
       70:   95:    }
       70:   95-block  0
        3:   96:    return false;
        3:   96-block  0
       20:   97:}
       20:   97-block  0
        -:   98:
function _Z19recorridoNoCubiertoNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEENS0_IS2_NS4_IS2_EEEEd called 2 returned 100% blocks executed 68%
        2:   99:vector<gps> recorridoNoCubierto(viaje v, recorrido r, distancia u) {
        2:  100:    vector<gps> resp;
       22:  101:    for (int i = 0; i < r.size(); i++) {
        2:  101-block  0
       22:  101-block  1
branch  0 taken 2
branch  1 taken 20
       20:  101-block  2
       20:  102:        if (!estaCubierto(r[i], v, u)) {
       20:  102-block  0
branch  0 taken 20
branch  1 taken 0
       20:  102-block  1
branch  2 taken 20
branch  3 taken 0
       20:  102-block  2
branch  4 taken 3
branch  5 taken 17
    $$$$$:  102-block  3
        3:  103:            resp.push_back(r[i]);
        3:  103-block  0
branch  0 taken 3
branch  1 taken 0
        3:  104:        }
        3:  104-block  0
       20:  105:    }
       20:  105-block  0
        2:  106:    return resp;
        2:  107:}
    $$$$$:  107-block  0
        2:  107-block  1
branch  0 taken 2
branch  1 taken 0
    $$$$$:  107-block  2
        2:  107-block  3
    $$$$$:  107-block  4
    $$$$$:  107-block  5
        -:  108:
        -:  109:/************************************** EJERCICIO construirGrilla
        -:  110: * *******************************/
function _Z15construirGrillaNSt3__15tupleIJddEEES1_ii called 2 returned 100% blocks executed 83%
        2:  111:grilla construirGrilla(gps esq1, gps esq2, int n, int m) {
        2:  112:    distancia ladoHorizontal = (obtenerLongitud(esq2) - obtenerLongitud(esq1)) / n;
        2:  113:    distancia ladoVertical = (obtenerLatitud(esq2) - obtenerLatitud(esq1)) / m;
        2:  114:    grilla resp = {};
        -:  115:
       10:  116:    for (int i = 0; i < n; i++) {
        2:  116-block  0
       10:  116-block  1
branch  0 taken 2
branch  1 taken 8
        8:  116-block  2
       50:  117:        for (int j = 0; j < m; j++) {
        8:  117-block  0
       50:  117-block  1
branch  0 taken 42
branch  1 taken 8
       42:  117-block  2
       42:  118:            gps auxEsq1 = {obtenerLongitud(esq1) + i * ladoHorizontal,
       42:  118-block  0
branch  0 taken 42
branch  1 taken 0
       42:  119:                           obtenerLatitud(esq1) + j * ladoVertical};
       42:  119-block  0
branch  0 taken 42
branch  1 taken 0
       42:  120:            gps auxEsq2 = {obtenerLongitud(esq1) + (i + 1) * ladoHorizontal,
       42:  120-block  0
branch  0 taken 42
branch  1 taken 0
       42:  121:                           obtenerLatitud(esq1) + (j + 1) * ladoVertical};
       42:  121-block  0
branch  0 taken 42
branch  1 taken 0
       42:  122:            resp.push_back({auxEsq1, auxEsq2, {i + 1, j + 1}});
       42:  122-block  0
branch  0 taken 42
branch  1 taken 0
       42:  123:        }
       42:  123-block  0
        8:  124:    }
        8:  124-block  0
        2:  125:    return resp;
        2:  126:}
    $$$$$:  126-block  0
        2:  126-block  1
branch  0 taken 2
branch  1 taken 0
    $$$$$:  126-block  2
        2:  126-block  3
    $$$$$:  126-block  4
        -:  127:
        -:  128:/************************************* EJERCICIO cantidadDeSaltos
        -:  129: * ******************************/
function _Z14getNombreCeldaNSt3__15tupleIJddEEENS_6vectorINS0_IJS1_S1_NS0_IJiiEEEEEENS_9allocatorIS4_EEEE called 8 returned 100% blocks executed 91%
        8:  130:nombre getNombreCelda(gps p, grilla g) {
       92:  131:    for (int i = 0; i < g.size(); i++) {
        8:  131-block  0
       92:  131-block  1
branch  0 taken 92
branch  1 taken 0
       84:  131-block  2
      184:  132:        if ((obtenerLatitud(p) >= obtenerLatitud(obtenerEsq1(g[i]))) &&
       92:  132-block  0
branch  0 taken 92
branch  1 taken 0
       92:  132-block  1
branch  2 taken 8
branch  3 taken 84
       92:  133:            (obtenerLatitud(p) <= obtenerLatitud(obtenerEsq2(g[i]))) &&
       92:  133-block  0
branch  0 taken 20
branch  1 taken 72
       20:  134:            (obtenerLongitud(p) >= obtenerLongitud(obtenerEsq1(g[i]))) &&
       20:  134-block  0
branch  0 taken 0
branch  1 taken 20
       20:  135:            (obtenerLongitud(p) <= obtenerLongitud(obtenerEsq2(g[i])))) {
       20:  135-block  0
        8:  136:            return obtenerNombre(g[i]);
        8:  136-block  0
        -:  137:        }
       84:  138:    }
       84:  138-block  0
    #####:  139:    return {-1, -1};
    $$$$$:  139-block  0
        8:  140:}
        8:  140-block  0
        -:  141:
function _Z17distanciaEnCeldasNSt3__15tupleIJddEEES1_NS_6vectorINS0_IJS1_S1_NS0_IJiiEEEEEENS_9allocatorIS4_EEEE called 2 returned 100% blocks executed 50%
        2:  142:int distanciaEnCeldas(gps p1, gps p2, grilla g) {
        2:  143:    nombre n1 = getNombreCelda(p1, g);
        2:  143-block  0
branch  0 taken 2
branch  1 taken 0
    $$$$$:  143-block  1
    $$$$$:  143-block  2
        2:  144:    nombre n2 = getNombreCelda(p2, g);
        2:  144-block  0
branch  0 taken 0
branch  1 taken 2
    $$$$$:  144-block  1
        4:  145:    return abs(obtenerFila(n1) - obtenerFila(n2)) +
        2:  145-block  0
        2:  145-block  1
        2:  146:           abs(obtenerColumna(n1) - obtenerColumna(n2));
    #####:  147:}
        -:  148:
function _Z17siguienteEnGrillaNSt3__16vectorINS_5tupleIJNS1_IJddEEES2_NS1_IJiiEEEEEENS_9allocatorIS4_EEEENS0_INS1_IJdS2_EEENS5_IS8_EEEEi called 4 returned 100% blocks executed 58%
        4:  149:int siguienteEnGrilla(grilla g, viaje v, int index) {
        4:  150:    nombre noExiste = {-1, -1};
        4:  151:    int posSiguiente = -1;
        4:  152:    for (int i = index + 1; i < v.size(); i++) {
        4:  152-block  0
        4:  152-block  1
branch  0 taken 4
branch  1 taken 0
    $$$$$:  152-block  2
        4:  153:        if (getNombreCelda(obtenerPosicion(v[i]), g) != noExiste) {
        4:  153-block  0
branch  0 taken 4
branch  1 taken 0
        4:  153-block  1
branch  2 taken 4
branch  3 taken 0
        4:  153-block  2
branch  4 taken 0
branch  5 taken 4
    $$$$$:  153-block  3
    $$$$$:  153-block  4
        4:  154:            return i;
        4:  154-block  0
        -:  155:        }
    #####:  156:    }
    $$$$$:  156-block  0
    #####:  157:    return -1;
    $$$$$:  157-block  0
        4:  158:}
        4:  158-block  0
        -:  159:
function _Z16cantidadDeSaltosNSt3__16vectorINS_5tupleIJNS1_IJddEEES2_NS1_IJiiEEEEEENS_9allocatorIS4_EEEENS0_INS1_IJdS2_EEENS5_IS8_EEEE called 1 returned 100% blocks executed 64%
        1:  160:int cantidadDeSaltos(grilla g, viaje v) {
        1:  161:    int resp = 0;
        3:  162:    for (int i = 0; i < v.size() - 1; i++) {
        1:  162-block  0
        3:  162-block  1
branch  0 taken 2
branch  1 taken 1
        2:  162-block  2
        2:  163:        if (siguienteEnGrilla(g, v, i) != -1) {
        2:  163-block  0
branch  0 taken 2
branch  1 taken 0
        2:  163-block  1
branch  2 taken 2
branch  3 taken 0
        2:  163-block  2
branch  4 taken 0
branch  5 taken 2
    $$$$$:  163-block  3
    $$$$$:  163-block  4
    $$$$$:  163-block  5
        2:  164:            if (distanciaEnCeldas(obtenerPosicion(v[i]), obtenerPosicion(v[siguienteEnGrilla(g, v, i)]), g) >= 2) {
        2:  164-block  0
branch  0 taken 0
branch  1 taken 2
        2:  164-block  1
branch  2 taken 2
branch  3 taken 0
        2:  164-block  2
branch  4 taken 2
branch  5 taken 0
        2:  164-block  3
branch  6 taken 2
branch  7 taken 0
        2:  164-block  4
branch  8 taken 0
branch  9 taken 2
        2:  164-block  5
branch 10 taken 0
branch 11 taken 2
    $$$$$:  164-block  6
    $$$$$:  164-block  7
    $$$$$:  164-block  8
        2:  165:                resp++;
        2:  166:            }
        2:  166-block  0
        2:  167:        }
        2:  167-block  0
        2:  168:    }
        2:  168-block  0
        1:  169:    return resp;}
    $$$$$:  169-block  0
    $$$$$:  169-block  1
    $$$$$:  169-block  2
        1:  169-block  3
        -:  170:
        -:  171:/************************************* EJERCICIO corregirViaje
        -:  172: * ******************************/
        -:  173:
function _Z7esErrorNSt3__15tupleIJdNS0_IJddEEEEEENS_6vectorIdNS_9allocatorIdEEEE called 66 returned 100% blocks executed 100%
       66:  174:bool esError(puntoViaje p, vector<tiempo> errores) {
      152:  175:    for (int i = 0; i < errores.size(); i++) {
       66:  175-block  0
      152:  175-block  1
branch  0 taken 106
branch  1 taken 46
       86:  175-block  2
      106:  176:        if (obtenerTiempo(p) == errores[i]) {
      106:  176-block  0
branch  0 taken 20
branch  1 taken 86
       20:  177:            return true;
       20:  177-block  0
        -:  178:        }
       86:  179:    }
       86:  179-block  0
       46:  180:    return false;
       46:  180-block  0
       66:  181:}
       66:  181-block  0
        -:  182:
function _Z14puntosCercanosdNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEENS0_IdNS4_IdEEEE called 6 returned 100% blocks executed 71%
        6:  183:tuple<puntoViaje, puntoViaje> puntosCercanos(tiempo error, viaje v, vector<tiempo> errores) {
        6:  184:    puntoViaje puntoCercano1;
        6:  185:    puntoViaje puntoCercano2;
        6:  186:    tiempo minimo = (get<0>(tiemposMaximoYMinimo(v)) - get<1>(tiemposMaximoYMinimo(v)));
        6:  186-block  0
branch  0 taken 6
branch  1 taken 0
        6:  186-block  1
branch  2 taken 6
branch  3 taken 0
        6:  186-block  2
branch  4 taken 6
branch  5 taken 0
    $$$$$:  186-block  3
    $$$$$:  186-block  4
    $$$$$:  186-block  5
       66:  187:    for (int i = 0; i < v.size(); i++) {
        6:  187-block  0
       66:  187-block  1
branch  0 taken 60
branch  1 taken 6
       60:  187-block  2
       90:  188:        if ((abs(obtenerTiempo(v[i]) - error) < minimo) &&
       60:  188-block  0
branch  0 taken 30
branch  1 taken 30
       60:  188-block  1
branch  2 taken 30
branch  3 taken 30
       30:  188-block  2
       60:  188-block  3
branch  4 taken 40
branch  5 taken 20
    $$$$$:  188-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  188-block  5
    $$$$$:  188-block  6
       30:  189:            (!esError(v[i], errores))) {
       30:  189-block  0
branch  0 taken 30
branch  1 taken 0
       30:  189-block  1
       20:  190:            minimo = abs(obtenerTiempo(v[i]) - error);
       20:  191:            puntoCercano1 = v[i];
       20:  192:        }
       20:  192-block  0
       60:  193:    }
       60:  193-block  0
        -:  194:
        6:  195:    minimo = (get<0>(tiemposMaximoYMinimo(v)) - get<1>(tiemposMaximoYMinimo(v)));
        6:  195-block  0
branch  0 taken 6
branch  1 taken 0
        6:  195-block  1
branch  2 taken 6
branch  3 taken 0
        6:  195-block  2
branch  4 taken 0
branch  5 taken 6
    $$$$$:  195-block  3
    $$$$$:  195-block  4
       66:  196:    for (int i = 0; i < v.size(); i++) {
        6:  196-block  0
       66:  196-block  1
branch  0 taken 6
branch  1 taken 60
       60:  196-block  2
       96:  197:        if ((abs(obtenerTiempo(v[i]) - error) < minimo) &&
       60:  197-block  0
branch  0 taken 24
branch  1 taken 36
       60:  197-block  1
branch  2 taken 24
branch  3 taken 36
       36:  197-block  2
       60:  197-block  3
branch  4 taken 40
branch  5 taken 20
    $$$$$:  197-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  197-block  5
    $$$$$:  197-block  6
       36:  198:            (!esError(v[i], errores)) && (v[i] != puntoCercano1)) {
       36:  198-block  0
branch  0 taken 36
branch  1 taken 0
       36:  198-block  1
branch  2 taken 26
branch  3 taken 10
       26:  198-block  2
branch  4 taken 26
branch  5 taken 0
       20:  199:            minimo = abs(obtenerTiempo(v[i]) - error);
       20:  200:            puntoCercano2 = v[i];
       20:  201:        }
       20:  201-block  0
       60:  202:    }
       60:  202-block  0
        -:  203:
        6:  204:    if (obtenerTiempo(puntoCercano1) > obtenerTiempo(puntoCercano2)) {
        6:  204-block  0
branch  0 taken 0
branch  1 taken 6
        6:  205:        puntoViaje aux = puntoCercano1;
        6:  206:        puntoCercano1 = puntoCercano2;
        6:  207:        puntoCercano2 = aux;
        6:  208:    }
        6:  208-block  0
        6:  209:    return {puntoCercano1, puntoCercano2};}
    $$$$$:  209-block  0
    $$$$$:  209-block  1
        6:  209-block  2
        -:  210:
function _Z14getIndiceViajeNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEEd called 3 returned 100% blocks executed 100%
        3:  211:int getIndiceViaje(viaje v, tiempo t) {
       24:  212:    for (int i = 0; i < v.size(); i++) {
        3:  212-block  0
       24:  212-block  1
branch  0 taken 0
branch  1 taken 24
       21:  212-block  2
       24:  213:        if (obtenerTiempo(v[i]) == t) {
       24:  213-block  0
branch  0 taken 3
branch  1 taken 21
        3:  214:            return i;
        3:  214-block  0
        -:  215:        }
       21:  216:    }
       21:  216-block  0
        3:  217:}
        3:  217-block  0
        -:  218:
function _Z14puntoCorregidoNSt3__15tupleIJdNS0_IJddEEEEEES2_S2_ called 3 returned 100% blocks executed 100%
        3:  219:puntoViaje puntoCorregido(puntoViaje error, puntoViaje puntoCercano1,
        -:  220:                          puntoViaje puntoCercano2) {
        3:  221:    double velocidadMediaPuntosCercanos = velocidadMedia(puntoCercano1, puntoCercano2);
        3:  222:    tiempo tiempoHastaError = obtenerTiempo(error) - obtenerTiempo(puntoCercano1);
        3:  223:    distancia distanciaHastaError = velocidadMediaPuntosCercanos * tiempoHastaError;
        3:  224:    double factorRecorrido = (distanciaHastaError / distEnKM(obtenerPosicion(puntoCercano1), obtenerPosicion(puntoCercano2)));
        -:  225:
        3:  226:    distancia distanciaHorizontalRecorrida =
        6:  227:        (obtenerLatitud(obtenerPosicion(puntoCercano2)) -
        6:  228:         obtenerLatitud(obtenerPosicion(puntoCercano1))) *
        3:  229:        factorRecorrido;
        3:  230:    distancia distanciaVerticalRecorrida =
        6:  231:        (obtenerLongitud(obtenerPosicion(puntoCercano2)) -
        6:  232:         obtenerLongitud(obtenerPosicion(puntoCercano1))) *
        3:  233:        factorRecorrido;
        -:  234:
        3:  235:    double auxLatitud =
        6:  236:        obtenerLatitud(obtenerPosicion(puntoCercano1)) +
        3:  237:        distanciaHorizontalRecorrida;
        -:  238:
        3:  239:    double auxLongitud =
        3:  240:        obtenerLongitud(obtenerPosicion(puntoCercano1)) + distanciaVerticalRecorrida;
        -:  241:
        3:  242:    return {obtenerTiempo(error), {auxLatitud, auxLongitud}};
        3:  242-block  0
        -:  243:}
        -:  244:
function _Z13corregirViajeRNSt3__16vectorINS_5tupleIJdNS1_IJddEEEEEENS_9allocatorIS3_EEEENS0_IdNS4_IdEEEE called 2 returned 100% blocks executed 55%
        2:  245:void corregirViaje(viaje &v, vector<tiempo> errores) {
        5:  246:    for (int i = 0; i < errores.size(); i++) {
        2:  246-block  0
        5:  246-block  1
branch  0 taken 3
branch  1 taken 2
        3:  246-block  2
        3:  247:        puntoViaje puntoCercano1 = get<0>(puntosCercanos(errores[i], v, errores));
        3:  247-block  0
branch  0 taken 3
branch  1 taken 0
        3:  247-block  1
branch  2 taken 0
branch  3 taken 3
    $$$$$:  247-block  2
    $$$$$:  247-block  3
    $$$$$:  247-block  4
        3:  248:        puntoViaje puntoCercano2 = get<1>(puntosCercanos(errores[i], v, errores));
        3:  248-block  0
branch  0 taken 0
branch  1 taken 3
        3:  248-block  1
branch  2 taken 0
branch  3 taken 3
    $$$$$:  248-block  2
    $$$$$:  248-block  3
        3:  249:        int indiceError = getIndiceViaje(v, errores[i]);
        3:  249-block  0
branch  0 taken 0
branch  1 taken 3
    $$$$$:  249-block  1
        3:  250:        v[indiceError] = puntoCorregido(v[indiceError], puntoCercano1, puntoCercano2);
        3:  251:    }
        3:  251-block  0
        2:  252:}
    $$$$$:  252-block  0
    $$$$$:  252-block  1
        2:  252-block  2
