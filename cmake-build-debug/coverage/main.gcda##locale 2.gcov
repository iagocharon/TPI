        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/locale
        -:    0:Graph:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/main.gcno
        -:    0:Data:/Users/IAGO/Desktop/TPI/cmake-build-debug/CMakeFiles/tpi.dir/main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- locale ------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_LOCALE
        -:   11:#define _LIBCPP_LOCALE
        -:   12:
        -:   13:/*
        -:   14:    locale synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:class locale
        -:   20:{
        -:   21:public:
        -:   22:    // types:
        -:   23:    class facet;
        -:   24:    class id;
        -:   25:
        -:   26:    typedef int category;
        -:   27:    static const category // values assigned here are for exposition only
        -:   28:        none     = 0x000,
        -:   29:        collate  = 0x010,
        -:   30:        ctype    = 0x020,
        -:   31:        monetary = 0x040,
        -:   32:        numeric  = 0x080,
        -:   33:        time     = 0x100,
        -:   34:        messages = 0x200,
        -:   35:        all = collate | ctype | monetary | numeric | time | messages;
        -:   36:
        -:   37:    // construct/copy/destroy:
        -:   38:    locale() noexcept;
        -:   39:    locale(const locale& other) noexcept;
        -:   40:    explicit locale(const char* std_name);
        -:   41:    explicit locale(const string& std_name);
        -:   42:    locale(const locale& other, const char* std_name, category);
        -:   43:    locale(const locale& other, const string& std_name, category);
        -:   44:    template <class Facet> locale(const locale& other, Facet* f);
        -:   45:    locale(const locale& other, const locale& one, category);
        -:   46:
        -:   47:    ~locale(); // not virtual
        -:   48:
        -:   49:    const locale& operator=(const locale& other) noexcept;
        -:   50:
        -:   51:    template <class Facet> locale combine(const locale& other) const;
        -:   52:
        -:   53:    // locale operations:
        -:   54:    basic_string<char> name() const;
        -:   55:    bool operator==(const locale& other) const;
        -:   56:    bool operator!=(const locale& other) const;
        -:   57:    template <class charT, class Traits, class Allocator>
        -:   58:      bool operator()(const basic_string<charT,Traits,Allocator>& s1,
        -:   59:                      const basic_string<charT,Traits,Allocator>& s2) const;
        -:   60:
        -:   61:    // global locale objects:
        -:   62:    static locale global(const locale&);
        -:   63:    static const locale& classic();
        -:   64:};
        -:   65:
        -:   66:template <class Facet> const Facet& use_facet(const locale&);
        -:   67:template <class Facet> bool has_facet(const locale&) noexcept;
        -:   68:
        -:   69:// 22.3.3, convenience interfaces:
        -:   70:template <class charT> bool isspace (charT c, const locale& loc);
        -:   71:template <class charT> bool isprint (charT c, const locale& loc);
        -:   72:template <class charT> bool iscntrl (charT c, const locale& loc);
        -:   73:template <class charT> bool isupper (charT c, const locale& loc);
        -:   74:template <class charT> bool islower (charT c, const locale& loc);
        -:   75:template <class charT> bool isalpha (charT c, const locale& loc);
        -:   76:template <class charT> bool isdigit (charT c, const locale& loc);
        -:   77:template <class charT> bool ispunct (charT c, const locale& loc);
        -:   78:template <class charT> bool isxdigit(charT c, const locale& loc);
        -:   79:template <class charT> bool isalnum (charT c, const locale& loc);
        -:   80:template <class charT> bool isgraph (charT c, const locale& loc);
        -:   81:template <class charT> charT toupper(charT c, const locale& loc);
        -:   82:template <class charT> charT tolower(charT c, const locale& loc);
        -:   83:
        -:   84:template<class Codecvt, class Elem = wchar_t,
        -:   85:         class Wide_alloc = allocator<Elem>,
        -:   86:         class Byte_alloc = allocator<char>>
        -:   87:class wstring_convert
        -:   88:{
        -:   89:public:
        -:   90:    typedef basic_string<char, char_traits<char>, Byte_alloc> byte_string;
        -:   91:    typedef basic_string<Elem, char_traits<Elem>, Wide_alloc> wide_string;
        -:   92:    typedef typename Codecvt::state_type                      state_type;
        -:   93:    typedef typename wide_string::traits_type::int_type       int_type;
        -:   94:
        -:   95:    wstring_convert(Codecvt* pcvt = new Codecvt);          // before C++14
        -:   96:    explicit wstring_convert(Codecvt* pcvt = new Codecvt); // before C++20
        -:   97:    wstring_convert() : wstring_convert(new Codecvt) {}    // C++20
        -:   98:    explicit wstring_convert(Codecvt* pcvt);               // C++20
        -:   99:
        -:  100:    wstring_convert(Codecvt* pcvt, state_type state);
        -:  101:    explicit wstring_convert(const byte_string& byte_err,           // explicit in C++14
        -:  102:                    const wide_string& wide_err = wide_string());
        -:  103:    wstring_convert(const wstring_convert&) = delete;               // C++14
        -:  104:    wstring_convert & operator=(const wstring_convert &) = delete;  // C++14
        -:  105:    ~wstring_convert();
        -:  106:
        -:  107:    wide_string from_bytes(char byte);
        -:  108:    wide_string from_bytes(const char* ptr);
        -:  109:    wide_string from_bytes(const byte_string& str);
        -:  110:    wide_string from_bytes(const char* first, const char* last);
        -:  111:
        -:  112:    byte_string to_bytes(Elem wchar);
        -:  113:    byte_string to_bytes(const Elem* wptr);
        -:  114:    byte_string to_bytes(const wide_string& wstr);
        -:  115:    byte_string to_bytes(const Elem* first, const Elem* last);
        -:  116:
        -:  117:    size_t converted() const; // noexcept in C++14
        -:  118:    state_type state() const;
        -:  119:};
        -:  120:
        -:  121:template <class Codecvt, class Elem = wchar_t, class Tr = char_traits<Elem>>
        -:  122:class wbuffer_convert
        -:  123:    : public basic_streambuf<Elem, Tr>
        -:  124:{
        -:  125:public:
        -:  126:    typedef typename Tr::state_type state_type;
        -:  127:
        -:  128:    wbuffer_convert(streambuf* bytebuf = 0, Codecvt* pcvt = new Codecvt,
        -:  129:                    state_type state = state_type());          // before C++14
        -:  130:    explicit wbuffer_convert(streambuf* bytebuf = nullptr, Codecvt* pcvt = new Codecvt,
        -:  131:                            state_type state = state_type()); // before C++20
        -:  132:    wbuffer_convert() : wbuffer_convert(nullptr) {} // C++20
        -:  133:    explicit wbuffer_convert(streambuf* bytebuf, Codecvt* pcvt = new Codecvt,
        -:  134:                            state_type state = state_type()); // C++20
        -:  135:
        -:  136:    wbuffer_convert(const wbuffer_convert&) = delete;               // C++14
        -:  137:    wbuffer_convert & operator=(const wbuffer_convert &) = delete;  // C++14
        -:  138:    ~wbuffer_convert();                                             // C++14
        -:  139:
        -:  140:    streambuf* rdbuf() const;
        -:  141:    streambuf* rdbuf(streambuf* bytebuf);
        -:  142:
        -:  143:    state_type state() const;
        -:  144:};
        -:  145:
        -:  146:// 22.4.1 and 22.4.1.3, ctype:
        -:  147:class ctype_base;
        -:  148:template <class charT> class ctype;
        -:  149:template <> class ctype<char>; // specialization
        -:  150:template <class charT> class ctype_byname;
        -:  151:template <> class ctype_byname<char>; // specialization
        -:  152:
        -:  153:class codecvt_base;
        -:  154:template <class internT, class externT, class stateT> class codecvt;
        -:  155:template <class internT, class externT, class stateT> class codecvt_byname;
        -:  156:
        -:  157:// 22.4.2 and 22.4.3, numeric:
        -:  158:template <class charT, class InputIterator> class num_get;
        -:  159:template <class charT, class OutputIterator> class num_put;
        -:  160:template <class charT> class numpunct;
        -:  161:template <class charT> class numpunct_byname;
        -:  162:
        -:  163:// 22.4.4, col lation:
        -:  164:template <class charT> class collate;
        -:  165:template <class charT> class collate_byname;
        -:  166:
        -:  167:// 22.4.5, date and time:
        -:  168:class time_base;
        -:  169:template <class charT, class InputIterator> class time_get;
        -:  170:template <class charT, class InputIterator> class time_get_byname;
        -:  171:template <class charT, class OutputIterator> class time_put;
        -:  172:template <class charT, class OutputIterator> class time_put_byname;
        -:  173:
        -:  174:// 22.4.6, money:
        -:  175:class money_base;
        -:  176:template <class charT, class InputIterator> class money_get;
        -:  177:template <class charT, class OutputIterator> class money_put;
        -:  178:template <class charT, bool Intl> class moneypunct;
        -:  179:template <class charT, bool Intl> class moneypunct_byname;
        -:  180:
        -:  181:// 22.4.7, message retrieval:
        -:  182:class messages_base;
        -:  183:template <class charT> class messages;
        -:  184:template <class charT> class messages_byname;
        -:  185:
        -:  186:}  // std
        -:  187:
        -:  188:*/
        -:  189:
        -:  190:#include <__config>
        -:  191:#include <__debug>
        -:  192:#include <__locale>
        -:  193:#include <algorithm>
        -:  194:#ifndef __APPLE__
        -:  195:# include <cstdarg>
        -:  196:#endif
        -:  197:#include <cstdio>
        -:  198:#include <cstdlib>
        -:  199:#include <ctime>
        -:  200:#include <ios>
        -:  201:#include <iterator>
        -:  202:#include <limits>
        -:  203:#include <memory>
        -:  204:#include <streambuf>
        -:  205:#include <version>
        -:  206:
        -:  207:#if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
        -:  208:// Most unix variants have catopen.  These are the specific ones that don't.
        -:  209:#  if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION)
        -:  210:#    define _LIBCPP_HAS_CATOPEN 1
        -:  211:#    include <nl_types.h>
        -:  212:#  endif
        -:  213:#endif
        -:  214:
        -:  215:#ifdef _LIBCPP_LOCALE__L_EXTENSIONS
        -:  216:#include <__bsd_locale_defaults.h>
        -:  217:#else
        -:  218:#include <__bsd_locale_fallbacks.h>
        -:  219:#endif
        -:  220:
        -:  221:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  222:#pragma GCC system_header
        -:  223:#endif
        -:  224:
        -:  225:_LIBCPP_PUSH_MACROS
        -:  226:#include <__undef_macros>
        -:  227:
        -:  228:
        -:  229:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  230:
        -:  231:#if defined(__APPLE__) || defined(__FreeBSD__)
        -:  232:#  define _LIBCPP_GET_C_LOCALE 0
        -:  233:#elif defined(__CloudABI__) || defined(__NetBSD__)
        -:  234:#  define _LIBCPP_GET_C_LOCALE LC_C_LOCALE
        -:  235:#else
        -:  236:#  define _LIBCPP_GET_C_LOCALE __cloc()
        -:  237:   // Get the C locale object
        -:  238:   _LIBCPP_FUNC_VIS locale_t __cloc();
        -:  239:#define __cloc_defined
        -:  240:#endif
        -:  241:
        -:  242:// __scan_keyword
        -:  243:// Scans [__b, __e) until a match is found in the basic_strings range
        -:  244://  [__kb, __ke) or until it can be shown that there is no match in [__kb, __ke).
        -:  245://  __b will be incremented (visibly), consuming CharT until a match is found
        -:  246://  or proved to not exist.  A keyword may be "", in which will match anything.
        -:  247://  If one keyword is a prefix of another, and the next CharT in the input
        -:  248://  might match another keyword, the algorithm will attempt to find the longest
        -:  249://  matching keyword.  If the longer matching keyword ends up not matching, then
        -:  250://  no keyword match is found.  If no keyword match is found, __ke is returned
        -:  251://  and failbit is set in __err.
        -:  252://  Else an iterator pointing to the matching keyword is found.  If more than
        -:  253://  one keyword matches, an iterator to the first matching keyword is returned.
        -:  254://  If on exit __b == __e, eofbit is set in __err.  If __case_sensitive is false,
        -:  255://  __ct is used to force to lower case before comparing characters.
        -:  256://  Examples:
        -:  257://  Keywords:  "a", "abb"
        -:  258://  If the input is "a", the first keyword matches and eofbit is set.
        -:  259://  If the input is "abc", no match is found and "ab" are consumed.
        -:  260:template <class _InputIterator, class _ForwardIterator, class _Ctype>
        -:  261:_LIBCPP_HIDDEN
        -:  262:_ForwardIterator
        -:  263:__scan_keyword(_InputIterator& __b, _InputIterator __e,
        -:  264:               _ForwardIterator __kb, _ForwardIterator __ke,
        -:  265:               const _Ctype& __ct, ios_base::iostate& __err,
        -:  266:               bool __case_sensitive = true)
        -:  267:{
        -:  268:    typedef typename iterator_traits<_InputIterator>::value_type _CharT;
        -:  269:    size_t __nkw = static_cast<size_t>(_VSTD::distance(__kb, __ke));
        -:  270:    const unsigned char __doesnt_match = '\0';
        -:  271:    const unsigned char __might_match = '\1';
        -:  272:    const unsigned char __does_match = '\2';
        -:  273:    unsigned char __statbuf[100];
        -:  274:    unsigned char* __status = __statbuf;
        -:  275:    unique_ptr<unsigned char, void(*)(void*)> __stat_hold(nullptr, free);
        -:  276:    if (__nkw > sizeof(__statbuf))
        -:  277:    {
        -:  278:        __status = (unsigned char*)malloc(__nkw);
        -:  279:        if (__status == nullptr)
        -:  280:            __throw_bad_alloc();
        -:  281:        __stat_hold.reset(__status);
        -:  282:    }
        -:  283:    size_t __n_might_match = __nkw;  // At this point, any keyword might match
        -:  284:    size_t __n_does_match = 0;       // but none of them definitely do
        -:  285:    // Initialize all statuses to __might_match, except for "" keywords are __does_match
        -:  286:    unsigned char* __st = __status;
        -:  287:    for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void) ++__st)
        -:  288:    {
        -:  289:        if (!__ky->empty())
        -:  290:            *__st = __might_match;
        -:  291:        else
        -:  292:        {
        -:  293:            *__st = __does_match;
        -:  294:            --__n_might_match;
        -:  295:            ++__n_does_match;
        -:  296:        }
        -:  297:    }
        -:  298:    // While there might be a match, test keywords against the next CharT
        -:  299:    for (size_t __indx = 0; __b != __e && __n_might_match > 0; ++__indx)
        -:  300:    {
        -:  301:        // Peek at the next CharT but don't consume it
        -:  302:        _CharT __c = *__b;
        -:  303:        if (!__case_sensitive)
        -:  304:            __c = __ct.toupper(__c);
        -:  305:        bool __consume = false;
        -:  306:        // For each keyword which might match, see if the __indx character is __c
        -:  307:        // If a match if found, consume __c
        -:  308:        // If a match is found, and that is the last character in the keyword,
        -:  309:        //    then that keyword matches.
        -:  310:        // If the keyword doesn't match this character, then change the keyword
        -:  311:        //    to doesn't match
        -:  312:        __st = __status;
        -:  313:        for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void) ++__st)
        -:  314:        {
        -:  315:            if (*__st == __might_match)
        -:  316:            {
        -:  317:                _CharT __kc = (*__ky)[__indx];
        -:  318:                if (!__case_sensitive)
        -:  319:                    __kc = __ct.toupper(__kc);
        -:  320:                if (__c == __kc)
        -:  321:                {
        -:  322:                    __consume = true;
        -:  323:                    if (__ky->size() == __indx+1)
        -:  324:                    {
        -:  325:                        *__st = __does_match;
        -:  326:                        --__n_might_match;
        -:  327:                        ++__n_does_match;
        -:  328:                    }
        -:  329:                }
        -:  330:                else
        -:  331:                {
        -:  332:                    *__st = __doesnt_match;
        -:  333:                    --__n_might_match;
        -:  334:                }
        -:  335:            }
        -:  336:        }
        -:  337:        // consume if we matched a character
        -:  338:        if (__consume)
        -:  339:        {
        -:  340:            ++__b;
        -:  341:            // If we consumed a character and there might be a matched keyword that
        -:  342:            //   was marked matched on a previous iteration, then such keywords
        -:  343:            //   which are now marked as not matching.
        -:  344:            if (__n_might_match + __n_does_match > 1)
        -:  345:            {
        -:  346:                __st = __status;
        -:  347:                for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void) ++__st)
        -:  348:                {
        -:  349:                    if (*__st == __does_match && __ky->size() != __indx+1)
        -:  350:                    {
        -:  351:                        *__st = __doesnt_match;
        -:  352:                        --__n_does_match;
        -:  353:                    }
        -:  354:                }
        -:  355:            }
        -:  356:        }
        -:  357:    }
        -:  358:    // We've exited the loop because we hit eof and/or we have no more "might matches".
        -:  359:    if (__b == __e)
        -:  360:        __err |= ios_base::eofbit;
        -:  361:    // Return the first matching result
        -:  362:    for (__st = __status; __kb != __ke; ++__kb, (void) ++__st)
        -:  363:        if (*__st == __does_match)
        -:  364:            break;
        -:  365:    if (__kb == __ke)
        -:  366:        __err |= ios_base::failbit;
        -:  367:    return __kb;
        -:  368:}
        -:  369:
        -:  370:struct _LIBCPP_TYPE_VIS __num_get_base
        -:  371:{
        -:  372:    static const int __num_get_buf_sz = 40;
        -:  373:
        -:  374:    static int __get_base(ios_base&);
        -:  375:    static const char __src[33];
        -:  376:};
        -:  377:
        -:  378:_LIBCPP_FUNC_VIS
        -:  379:void __check_grouping(const string& __grouping, unsigned* __g, unsigned* __g_end,
        -:  380:                      ios_base::iostate& __err);
        -:  381:
        -:  382:template <class _CharT>
        -:  383:struct __num_get
        -:  384:    : protected __num_get_base
        -:  385:{
        -:  386:    static string __stage2_float_prep(ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point,
        -:  387:                                      _CharT& __thousands_sep);
        -:  388:
        -:  389:    static int __stage2_float_loop(_CharT __ct, bool& __in_units, char& __exp,
        -:  390:                                   char* __a, char*& __a_end,
        -:  391:                                   _CharT __decimal_point, _CharT __thousands_sep,
        -:  392:                                   const string& __grouping, unsigned* __g,
        -:  393:                                   unsigned*& __g_end, unsigned& __dc, _CharT* __atoms);
        -:  394:#ifndef _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET
        -:  395:    static string __stage2_int_prep(ios_base& __iob, _CharT* __atoms, _CharT& __thousands_sep);
        -:  396:    static int __stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
        -:  397:                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
        -:  398:                  unsigned* __g, unsigned*& __g_end, _CharT* __atoms);
        -:  399:
        -:  400:#else
        -:  401:    static string __stage2_int_prep(ios_base& __iob, _CharT& __thousands_sep)
        -:  402:    {
        -:  403:        locale __loc = __iob.getloc();
        -:  404:        const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);
        -:  405:        __thousands_sep = __np.thousands_sep();
        -:  406:        return __np.grouping();
        -:  407:    }
        -:  408:
        -:  409:    const _CharT* __do_widen(ios_base& __iob, _CharT* __atoms) const
        -:  410:    {
        -:  411:      return __do_widen_p(__iob, __atoms);
        -:  412:    }
        -:  413:
        -:  414:
        -:  415:    static int __stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
        -:  416:                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
        -:  417:                  unsigned* __g, unsigned*& __g_end, const _CharT* __atoms);
        -:  418:private:
        -:  419:    template<typename T>
        -:  420:    const T* __do_widen_p(ios_base& __iob, T* __atoms) const
        -:  421:    {
        -:  422:      locale __loc = __iob.getloc();
        -:  423:      use_facet<ctype<T> >(__loc).widen(__src, __src + 26, __atoms);
        -:  424:      return __atoms;
        -:  425:    }
        -:  426:
        -:  427:    const char* __do_widen_p(ios_base& __iob, char* __atoms) const
        -:  428:    {
        -:  429:      (void)__iob;
        -:  430:      (void)__atoms;
        -:  431:      return __src;
        -:  432:    }
        -:  433:#endif
        -:  434:};
        -:  435:
        -:  436:#ifndef _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET
        -:  437:template <class _CharT>
        -:  438:string
        -:  439:__num_get<_CharT>::__stage2_int_prep(ios_base& __iob, _CharT* __atoms, _CharT& __thousands_sep)
        -:  440:{
        -:  441:    locale __loc = __iob.getloc();
        -:  442:    use_facet<ctype<_CharT> >(__loc).widen(__src, __src + 26, __atoms);
        -:  443:    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);
        -:  444:    __thousands_sep = __np.thousands_sep();
        -:  445:    return __np.grouping();
        -:  446:}
        -:  447:#endif
        -:  448:
        -:  449:template <class _CharT>
        -:  450:string
        -:  451:__num_get<_CharT>::__stage2_float_prep(ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point,
        -:  452:                    _CharT& __thousands_sep)
        -:  453:{
        -:  454:    locale __loc = __iob.getloc();
        -:  455:    use_facet<ctype<_CharT> >(__loc).widen(__src, __src + 32, __atoms);
        -:  456:    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);
        -:  457:    __decimal_point = __np.decimal_point();
        -:  458:    __thousands_sep = __np.thousands_sep();
        -:  459:    return __np.grouping();
        -:  460:}
        -:  461:
        -:  462:template <class _CharT>
        -:  463:int
        -:  464:#ifndef _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET
        -:  465:__num_get<_CharT>::__stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
        -:  466:                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
        -:  467:                  unsigned* __g, unsigned*& __g_end, _CharT* __atoms)
        -:  468:#else
        -:  469:__num_get<_CharT>::__stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
        -:  470:                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
        -:  471:                  unsigned* __g, unsigned*& __g_end, const _CharT* __atoms)
        -:  472:
        -:  473:#endif
        -:  474:{
        -:  475:    if (__a_end == __a && (__ct == __atoms[24] || __ct == __atoms[25]))
        -:  476:    {
        -:  477:        *__a_end++ = __ct == __atoms[24] ? '+' : '-';
        -:  478:        __dc = 0;
        -:  479:        return 0;
        -:  480:    }
        -:  481:    if (__grouping.size() != 0 && __ct == __thousands_sep)
        -:  482:    {
        -:  483:        if (__g_end-__g < __num_get_buf_sz)
        -:  484:        {
        -:  485:            *__g_end++ = __dc;
        -:  486:            __dc = 0;
        -:  487:        }
        -:  488:        return 0;
        -:  489:    }
        -:  490:    ptrdiff_t __f = find(__atoms, __atoms + 26, __ct) - __atoms;
        -:  491:    if (__f >= 24)
        -:  492:        return -1;
        -:  493:    switch (__base)
        -:  494:    {
        -:  495:    case 8:
        -:  496:    case 10:
        -:  497:        if (__f >= __base)
        -:  498:            return -1;
        -:  499:        break;
        -:  500:    case 16:
        -:  501:        if (__f < 22)
        -:  502:            break;
        -:  503:        if (__a_end != __a && __a_end - __a <= 2 && __a_end[-1] == '0')
        -:  504:        {
        -:  505:            __dc = 0;
        -:  506:            *__a_end++ = __src[__f];
        -:  507:            return 0;
        -:  508:        }
        -:  509:        return -1;
        -:  510:    }
        -:  511:    *__a_end++ = __src[__f];
        -:  512:    ++__dc;
        -:  513:    return 0;
        -:  514:}
        -:  515:
        -:  516:template <class _CharT>
        -:  517:int
        -:  518:__num_get<_CharT>::__stage2_float_loop(_CharT __ct, bool& __in_units, char& __exp, char* __a, char*& __a_end,
        -:  519:                    _CharT __decimal_point, _CharT __thousands_sep, const string& __grouping,
        -:  520:                    unsigned* __g, unsigned*& __g_end, unsigned& __dc, _CharT* __atoms)
        -:  521:{
        -:  522:    if (__ct == __decimal_point)
        -:  523:    {
        -:  524:        if (!__in_units)
        -:  525:            return -1;
        -:  526:        __in_units = false;
        -:  527:        *__a_end++ = '.';
        -:  528:        if (__grouping.size() != 0 && __g_end-__g < __num_get_buf_sz)
        -:  529:            *__g_end++ = __dc;
        -:  530:        return 0;
        -:  531:    }
        -:  532:    if (__ct == __thousands_sep && __grouping.size() != 0)
        -:  533:    {
        -:  534:        if (!__in_units)
        -:  535:            return -1;
        -:  536:        if (__g_end-__g < __num_get_buf_sz)
        -:  537:        {
        -:  538:            *__g_end++ = __dc;
        -:  539:            __dc = 0;
        -:  540:        }
        -:  541:        return 0;
        -:  542:    }
        -:  543:    ptrdiff_t __f = find(__atoms, __atoms + 32, __ct) - __atoms;
        -:  544:    if (__f >= 32)
        -:  545:        return -1;
        -:  546:    char __x = __src[__f];
        -:  547:    if (__x == '-' || __x == '+')
        -:  548:    {
        -:  549:        if (__a_end == __a || (__a_end[-1] & 0x5F) == (__exp & 0x7F))
        -:  550:        {
        -:  551:            *__a_end++ = __x;
        -:  552:            return 0;
        -:  553:        }
        -:  554:        return -1;
        -:  555:    }
        -:  556:    if (__x == 'x' || __x == 'X')
        -:  557:        __exp = 'P';
        -:  558:    else if ((__x & 0x5F) == __exp)
        -:  559:    {
        -:  560:        __exp |= (char) 0x80;
        -:  561:        if (__in_units)
        -:  562:        {
        -:  563:            __in_units = false;
        -:  564:            if (__grouping.size() != 0 && __g_end-__g < __num_get_buf_sz)
        -:  565:                *__g_end++ = __dc;
        -:  566:        }
        -:  567:    }
        -:  568:    *__a_end++ = __x;
        -:  569:    if (__f >= 22)
        -:  570:        return 0;
        -:  571:    ++__dc;
        -:  572:    return 0;
        -:  573:}
        -:  574:
        -:  575:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(struct _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __num_get<char>)
        -:  576:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  577:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(struct _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __num_get<wchar_t>)
        -:  578:#endif
        -:  579:
        -:  580:template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
        -:  581:class _LIBCPP_TEMPLATE_VIS num_get
        -:  582:    : public locale::facet,
        -:  583:      private __num_get<_CharT>
        -:  584:{
        -:  585:public:
        -:  586:    typedef _CharT char_type;
        -:  587:    typedef _InputIterator iter_type;
        -:  588:
        -:  589:    _LIBCPP_INLINE_VISIBILITY
        -:  590:    explicit num_get(size_t __refs = 0)
        -:  591:        : locale::facet(__refs) {}
        -:  592:
        -:  593:    _LIBCPP_INLINE_VISIBILITY
        -:  594:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  595:                  ios_base::iostate& __err, bool& __v) const
        -:  596:    {
        -:  597:        return do_get(__b, __e, __iob, __err, __v);
        -:  598:    }
        -:  599:
        -:  600:    _LIBCPP_INLINE_VISIBILITY
        -:  601:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  602:                  ios_base::iostate& __err, long& __v) const
        -:  603:    {
        -:  604:        return do_get(__b, __e, __iob, __err, __v);
        -:  605:    }
        -:  606:
        -:  607:    _LIBCPP_INLINE_VISIBILITY
        -:  608:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  609:                  ios_base::iostate& __err, long long& __v) const
        -:  610:    {
        -:  611:        return do_get(__b, __e, __iob, __err, __v);
        -:  612:    }
        -:  613:
        -:  614:    _LIBCPP_INLINE_VISIBILITY
        -:  615:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  616:                  ios_base::iostate& __err, unsigned short& __v) const
        -:  617:    {
        -:  618:        return do_get(__b, __e, __iob, __err, __v);
        -:  619:    }
        -:  620:
        -:  621:    _LIBCPP_INLINE_VISIBILITY
        -:  622:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  623:                  ios_base::iostate& __err, unsigned int& __v) const
        -:  624:    {
        -:  625:        return do_get(__b, __e, __iob, __err, __v);
        -:  626:    }
        -:  627:
        -:  628:    _LIBCPP_INLINE_VISIBILITY
        -:  629:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  630:                  ios_base::iostate& __err, unsigned long& __v) const
        -:  631:    {
        -:  632:        return do_get(__b, __e, __iob, __err, __v);
        -:  633:    }
        -:  634:
        -:  635:    _LIBCPP_INLINE_VISIBILITY
        -:  636:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  637:                  ios_base::iostate& __err, unsigned long long& __v) const
        -:  638:    {
        -:  639:        return do_get(__b, __e, __iob, __err, __v);
        -:  640:    }
        -:  641:
        -:  642:    _LIBCPP_INLINE_VISIBILITY
        -:  643:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  644:                  ios_base::iostate& __err, float& __v) const
        -:  645:    {
        -:  646:        return do_get(__b, __e, __iob, __err, __v);
        -:  647:    }
        -:  648:
        -:  649:    _LIBCPP_INLINE_VISIBILITY
        -:  650:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  651:                  ios_base::iostate& __err, double& __v) const
        -:  652:    {
        -:  653:        return do_get(__b, __e, __iob, __err, __v);
        -:  654:    }
        -:  655:
        -:  656:    _LIBCPP_INLINE_VISIBILITY
        -:  657:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  658:                  ios_base::iostate& __err, long double& __v) const
        -:  659:    {
        -:  660:        return do_get(__b, __e, __iob, __err, __v);
        -:  661:    }
        -:  662:
        -:  663:    _LIBCPP_INLINE_VISIBILITY
        -:  664:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  665:                  ios_base::iostate& __err, void*& __v) const
        -:  666:    {
        -:  667:        return do_get(__b, __e, __iob, __err, __v);
        -:  668:    }
        -:  669:
        -:  670:    static locale::id id;
        -:  671:
        -:  672:protected:
        -:  673:    _LIBCPP_INLINE_VISIBILITY
        -:  674:    ~num_get() {}
        -:  675:
        -:  676:    template <class _Fp>
        -:  677:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  678:    iter_type __do_get_floating_point
        -:  679:                            (iter_type __b, iter_type __e, ios_base& __iob,
        -:  680:                             ios_base::iostate& __err, _Fp& __v) const;
        -:  681:
        -:  682:    template <class _Signed>
        -:  683:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  684:    iter_type __do_get_signed
        -:  685:                            (iter_type __b, iter_type __e, ios_base& __iob,
        -:  686:                             ios_base::iostate& __err, _Signed& __v) const;
        -:  687:
        -:  688:    template <class _Unsigned>
        -:  689:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  690:    iter_type __do_get_unsigned
        -:  691:                            (iter_type __b, iter_type __e, ios_base& __iob,
        -:  692:                             ios_base::iostate& __err, _Unsigned& __v) const;
        -:  693:
        -:  694:
        -:  695:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  696:                             ios_base::iostate& __err, bool& __v) const;
        -:  697:
        -:  698:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  699:                             ios_base::iostate& __err, long& __v) const
        -:  700:    { return this->__do_get_signed ( __b, __e, __iob, __err, __v ); }
        -:  701:
        -:  702:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  703:                             ios_base::iostate& __err, long long& __v) const
        -:  704:    { return this->__do_get_signed ( __b, __e, __iob, __err, __v ); }
        -:  705:
        -:  706:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  707:                             ios_base::iostate& __err, unsigned short& __v) const
        -:  708:    { return this->__do_get_unsigned ( __b, __e, __iob, __err, __v ); }
        -:  709:
        -:  710:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  711:                             ios_base::iostate& __err, unsigned int& __v) const
        -:  712:    { return this->__do_get_unsigned ( __b, __e, __iob, __err, __v ); }
        -:  713:
        -:  714:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  715:                             ios_base::iostate& __err, unsigned long& __v) const
        -:  716:    { return this->__do_get_unsigned ( __b, __e, __iob, __err, __v ); }
        -:  717:
        -:  718:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  719:                             ios_base::iostate& __err, unsigned long long& __v) const
        -:  720:    { return this->__do_get_unsigned ( __b, __e, __iob, __err, __v ); }
        -:  721:
        -:  722:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  723:                             ios_base::iostate& __err, float& __v) const
        -:  724:    { return this->__do_get_floating_point ( __b, __e, __iob, __err, __v ); }
        -:  725:
        -:  726:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  727:                             ios_base::iostate& __err, double& __v) const
        -:  728:    { return this->__do_get_floating_point ( __b, __e, __iob, __err, __v ); }
        -:  729:
        -:  730:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  731:                             ios_base::iostate& __err, long double& __v) const
        -:  732:    { return this->__do_get_floating_point ( __b, __e, __iob, __err, __v ); }
        -:  733:
        -:  734:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -:  735:                             ios_base::iostate& __err, void*& __v) const;
        -:  736:};
        -:  737:
        -:  738:template <class _CharT, class _InputIterator>
        -:  739:locale::id
        -:  740:num_get<_CharT, _InputIterator>::id;
        -:  741:
        -:  742:template <class _Tp>
        -:  743:_LIBCPP_HIDDEN _Tp
        -:  744:__num_get_signed_integral(const char* __a, const char* __a_end,
        -:  745:                          ios_base::iostate& __err, int __base)
        -:  746:{
        -:  747:    if (__a != __a_end)
        -:  748:    {
        -:  749:        typename remove_reference<decltype(errno)>::type __save_errno = errno;
        -:  750:        errno = 0;
        -:  751:        char *__p2;
        -:  752:        long long __ll = strtoll_l(__a, &__p2, __base, _LIBCPP_GET_C_LOCALE);
        -:  753:        typename remove_reference<decltype(errno)>::type __current_errno = errno;
        -:  754:        if (__current_errno == 0)
        -:  755:            errno = __save_errno;
        -:  756:        if (__p2 != __a_end)
        -:  757:        {
        -:  758:            __err = ios_base::failbit;
        -:  759:            return 0;
        -:  760:        }
        -:  761:        else if (__current_errno == ERANGE         ||
        -:  762:                 __ll < numeric_limits<_Tp>::min() ||
        -:  763:                 numeric_limits<_Tp>::max() < __ll)
        -:  764:        {
        -:  765:            __err = ios_base::failbit;
        -:  766:            if (__ll > 0)
        -:  767:                return numeric_limits<_Tp>::max();
        -:  768:            else
        -:  769:                return numeric_limits<_Tp>::min();
        -:  770:        }
        -:  771:        return static_cast<_Tp>(__ll);
        -:  772:    }
        -:  773:    __err = ios_base::failbit;
        -:  774:    return 0;
        -:  775:}
        -:  776:
        -:  777:template <class _Tp>
        -:  778:_LIBCPP_HIDDEN _Tp
        -:  779:__num_get_unsigned_integral(const char* __a, const char* __a_end,
        -:  780:                            ios_base::iostate& __err, int __base)
        -:  781:{
        -:  782:    if (__a != __a_end)
        -:  783:    {
        -:  784:        const bool __negate = *__a == '-';
        -:  785:        if (__negate && ++__a == __a_end) {
        -:  786:          __err = ios_base::failbit;
        -:  787:          return 0;
        -:  788:        }
        -:  789:        typename remove_reference<decltype(errno)>::type __save_errno = errno;
        -:  790:        errno = 0;
        -:  791:        char *__p2;
        -:  792:        unsigned long long __ll = strtoull_l(__a, &__p2, __base, _LIBCPP_GET_C_LOCALE);
        -:  793:        typename remove_reference<decltype(errno)>::type __current_errno = errno;
        -:  794:        if (__current_errno == 0)
        -:  795:            errno = __save_errno;
        -:  796:        if (__p2 != __a_end)
        -:  797:        {
        -:  798:            __err = ios_base::failbit;
        -:  799:            return 0;
        -:  800:        }
        -:  801:        else if (__current_errno == ERANGE || numeric_limits<_Tp>::max() < __ll)
        -:  802:        {
        -:  803:            __err = ios_base::failbit;
        -:  804:            return numeric_limits<_Tp>::max();
        -:  805:        }
        -:  806:        _Tp __res = static_cast<_Tp>(__ll);
        -:  807:        if (__negate) __res = -__res;
        -:  808:        return __res;
        -:  809:    }
        -:  810:    __err = ios_base::failbit;
        -:  811:    return 0;
        -:  812:}
        -:  813:
        -:  814:template <class _Tp>
        -:  815:_LIBCPP_INLINE_VISIBILITY
        -:  816:_Tp __do_strtod(const char* __a, char** __p2);
        -:  817:
        -:  818:template <>
        -:  819:inline _LIBCPP_INLINE_VISIBILITY
        -:  820:float __do_strtod<float>(const char* __a, char** __p2) {
        -:  821:    return strtof_l(__a, __p2, _LIBCPP_GET_C_LOCALE);
        -:  822:}
        -:  823:
        -:  824:template <>
        -:  825:inline _LIBCPP_INLINE_VISIBILITY
        -:  826:double __do_strtod<double>(const char* __a, char** __p2) {
        -:  827:    return strtod_l(__a, __p2, _LIBCPP_GET_C_LOCALE);
        -:  828:}
        -:  829:
        -:  830:template <>
        -:  831:inline _LIBCPP_INLINE_VISIBILITY
        -:  832:long double __do_strtod<long double>(const char* __a, char** __p2) {
        -:  833:    return strtold_l(__a, __p2, _LIBCPP_GET_C_LOCALE);
        -:  834:}
        -:  835:
        -:  836:template <class _Tp>
        -:  837:_LIBCPP_HIDDEN
        -:  838:_Tp
        -:  839:__num_get_float(const char* __a, const char* __a_end, ios_base::iostate& __err)
        -:  840:{
        -:  841:    if (__a != __a_end)
        -:  842:    {
        -:  843:        typename remove_reference<decltype(errno)>::type __save_errno = errno;
        -:  844:        errno = 0;
        -:  845:        char *__p2;
        -:  846:        _Tp __ld = __do_strtod<_Tp>(__a, &__p2);
        -:  847:        typename remove_reference<decltype(errno)>::type __current_errno = errno;
        -:  848:        if (__current_errno == 0)
        -:  849:            errno = __save_errno;
        -:  850:        if (__p2 != __a_end)
        -:  851:        {
        -:  852:            __err = ios_base::failbit;
        -:  853:            return 0;
        -:  854:        }
        -:  855:        else if (__current_errno == ERANGE)
        -:  856:            __err = ios_base::failbit;
        -:  857:        return __ld;
        -:  858:    }
        -:  859:    __err = ios_base::failbit;
        -:  860:    return 0;
        -:  861:}
        -:  862:
        -:  863:template <class _CharT, class _InputIterator>
        -:  864:_InputIterator
        -:  865:num_get<_CharT, _InputIterator>::do_get(iter_type __b, iter_type __e,
        -:  866:                                        ios_base& __iob,
        -:  867:                                        ios_base::iostate& __err,
        -:  868:                                        bool& __v) const
        -:  869:{
        -:  870:    if ((__iob.flags() & ios_base::boolalpha) == 0)
        -:  871:    {
        -:  872:        long __lv = -1;
        -:  873:        __b = do_get(__b, __e, __iob, __err, __lv);
        -:  874:        switch (__lv)
        -:  875:        {
        -:  876:        case 0:
        -:  877:            __v = false;
        -:  878:            break;
        -:  879:        case 1:
        -:  880:            __v = true;
        -:  881:            break;
        -:  882:        default:
        -:  883:            __v = true;
        -:  884:            __err = ios_base::failbit;
        -:  885:            break;
        -:  886:        }
        -:  887:        return __b;
        -:  888:    }
        -:  889:    const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__iob.getloc());
        -:  890:    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__iob.getloc());
        -:  891:    typedef typename numpunct<_CharT>::string_type string_type;
        -:  892:    const string_type __names[2] = {__np.truename(), __np.falsename()};
        -:  893:    const string_type* __i = _VSTD::__scan_keyword(__b, __e, __names, __names+2,
        -:  894:                                                   __ct, __err);
        -:  895:    __v = __i == __names;
        -:  896:    return __b;
        -:  897:}
        -:  898:
        -:  899:// signed
        -:  900:
        -:  901:template <class _CharT, class _InputIterator>
        -:  902:template <class _Signed>
        -:  903:_InputIterator
        -:  904:num_get<_CharT, _InputIterator>::__do_get_signed(iter_type __b, iter_type __e,
        -:  905:                                        ios_base& __iob,
        -:  906:                                        ios_base::iostate& __err,
        -:  907:                                        _Signed& __v) const
        -:  908:{
        -:  909:    // Stage 1
        -:  910:    int __base = this->__get_base(__iob);
        -:  911:    // Stage 2
        -:  912:    char_type __thousands_sep;
        -:  913:    const int __atoms_size = 26;
        -:  914:#ifdef _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET
        -:  915:    char_type __atoms1[__atoms_size];
        -:  916:    const char_type *__atoms = this->__do_widen(__iob, __atoms1);
        -:  917:    string __grouping = this->__stage2_int_prep(__iob, __thousands_sep);
        -:  918:#else
        -:  919:    char_type __atoms[__atoms_size];
        -:  920:    string __grouping = this->__stage2_int_prep(__iob, __atoms, __thousands_sep);
        -:  921:#endif
        -:  922:    string __buf;
        -:  923:    __buf.resize(__buf.capacity());
        -:  924:    char* __a = &__buf[0];
        -:  925:    char* __a_end = __a;
        -:  926:    unsigned __g[__num_get_base::__num_get_buf_sz];
        -:  927:    unsigned* __g_end = __g;
        -:  928:    unsigned __dc = 0;
        -:  929:    for (; __b != __e; ++__b)
        -:  930:    {
        -:  931:        if (__a_end == __a + __buf.size())
        -:  932:        {
        -:  933:            size_t __tmp = __buf.size();
        -:  934:            __buf.resize(2*__buf.size());
        -:  935:            __buf.resize(__buf.capacity());
        -:  936:            __a = &__buf[0];
        -:  937:            __a_end = __a + __tmp;
        -:  938:        }
        -:  939:        if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc,
        -:  940:                                    __thousands_sep, __grouping, __g, __g_end,
        -:  941:                                    __atoms))
        -:  942:            break;
        -:  943:    }
        -:  944:    if (__grouping.size() != 0 && __g_end-__g < __num_get_base::__num_get_buf_sz)
        -:  945:        *__g_end++ = __dc;
        -:  946:    // Stage 3
        -:  947:    __v = __num_get_signed_integral<_Signed>(__a, __a_end, __err, __base);
        -:  948:    // Digit grouping checked
        -:  949:    __check_grouping(__grouping, __g, __g_end, __err);
        -:  950:    // EOF checked
        -:  951:    if (__b == __e)
        -:  952:        __err |= ios_base::eofbit;
        -:  953:    return __b;
        -:  954:}
        -:  955:
        -:  956:// unsigned
        -:  957:
        -:  958:template <class _CharT, class _InputIterator>
        -:  959:template <class _Unsigned>
        -:  960:_InputIterator
        -:  961:num_get<_CharT, _InputIterator>::__do_get_unsigned(iter_type __b, iter_type __e,
        -:  962:                                        ios_base& __iob,
        -:  963:                                        ios_base::iostate& __err,
        -:  964:                                        _Unsigned& __v) const
        -:  965:{
        -:  966:    // Stage 1
        -:  967:    int __base = this->__get_base(__iob);
        -:  968:    // Stage 2
        -:  969:    char_type __thousands_sep;
        -:  970:    const int __atoms_size = 26;
        -:  971:#ifdef _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET
        -:  972:    char_type __atoms1[__atoms_size];
        -:  973:    const char_type *__atoms = this->__do_widen(__iob, __atoms1);
        -:  974:    string __grouping = this->__stage2_int_prep(__iob, __thousands_sep);
        -:  975:#else
        -:  976:    char_type __atoms[__atoms_size];
        -:  977:    string __grouping = this->__stage2_int_prep(__iob, __atoms, __thousands_sep);
        -:  978:#endif
        -:  979:    string __buf;
        -:  980:    __buf.resize(__buf.capacity());
        -:  981:    char* __a = &__buf[0];
        -:  982:    char* __a_end = __a;
        -:  983:    unsigned __g[__num_get_base::__num_get_buf_sz];
        -:  984:    unsigned* __g_end = __g;
        -:  985:    unsigned __dc = 0;
        -:  986:    for (; __b != __e; ++__b)
        -:  987:    {
        -:  988:        if (__a_end == __a + __buf.size())
        -:  989:        {
        -:  990:            size_t __tmp = __buf.size();
        -:  991:            __buf.resize(2*__buf.size());
        -:  992:            __buf.resize(__buf.capacity());
        -:  993:            __a = &__buf[0];
        -:  994:            __a_end = __a + __tmp;
        -:  995:        }
        -:  996:        if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc,
        -:  997:                                    __thousands_sep, __grouping, __g, __g_end,
        -:  998:                                    __atoms))
        -:  999:            break;
        -: 1000:    }
        -: 1001:    if (__grouping.size() != 0 && __g_end-__g < __num_get_base::__num_get_buf_sz)
        -: 1002:        *__g_end++ = __dc;
        -: 1003:    // Stage 3
        -: 1004:    __v = __num_get_unsigned_integral<_Unsigned>(__a, __a_end, __err, __base);
        -: 1005:    // Digit grouping checked
        -: 1006:    __check_grouping(__grouping, __g, __g_end, __err);
        -: 1007:    // EOF checked
        -: 1008:    if (__b == __e)
        -: 1009:        __err |= ios_base::eofbit;
        -: 1010:    return __b;
        -: 1011:}
        -: 1012:
        -: 1013:// floating point
        -: 1014:
        -: 1015:template <class _CharT, class _InputIterator>
        -: 1016:template <class _Fp>
        -: 1017:_InputIterator
        -: 1018:num_get<_CharT, _InputIterator>::__do_get_floating_point(iter_type __b, iter_type __e,
        -: 1019:                                        ios_base& __iob,
        -: 1020:                                        ios_base::iostate& __err,
        -: 1021:                                        _Fp& __v) const
        -: 1022:{
        -: 1023:    // Stage 1, nothing to do
        -: 1024:    // Stage 2
        -: 1025:    char_type __atoms[32];
        -: 1026:    char_type __decimal_point;
        -: 1027:    char_type __thousands_sep;
        -: 1028:    string __grouping = this->__stage2_float_prep(__iob, __atoms,
        -: 1029:                                                  __decimal_point,
        -: 1030:                                                  __thousands_sep);
        -: 1031:    string __buf;
        -: 1032:    __buf.resize(__buf.capacity());
        -: 1033:    char* __a = &__buf[0];
        -: 1034:    char* __a_end = __a;
        -: 1035:    unsigned __g[__num_get_base::__num_get_buf_sz];
        -: 1036:    unsigned* __g_end = __g;
        -: 1037:    unsigned __dc = 0;
        -: 1038:    bool __in_units = true;
        -: 1039:    char __exp = 'E';
        -: 1040:    for (; __b != __e; ++__b)
        -: 1041:    {
        -: 1042:        if (__a_end == __a + __buf.size())
        -: 1043:        {
        -: 1044:            size_t __tmp = __buf.size();
        -: 1045:            __buf.resize(2*__buf.size());
        -: 1046:            __buf.resize(__buf.capacity());
        -: 1047:            __a = &__buf[0];
        -: 1048:            __a_end = __a + __tmp;
        -: 1049:        }
        -: 1050:        if (this->__stage2_float_loop(*__b, __in_units, __exp, __a, __a_end,
        -: 1051:                                      __decimal_point, __thousands_sep,
        -: 1052:                                      __grouping, __g, __g_end,
        -: 1053:                                      __dc, __atoms))
        -: 1054:            break;
        -: 1055:    }
        -: 1056:    if (__grouping.size() != 0 && __in_units && __g_end-__g < __num_get_base::__num_get_buf_sz)
        -: 1057:        *__g_end++ = __dc;
        -: 1058:    // Stage 3
        -: 1059:    __v = __num_get_float<_Fp>(__a, __a_end, __err);
        -: 1060:    // Digit grouping checked
        -: 1061:    __check_grouping(__grouping, __g, __g_end, __err);
        -: 1062:    // EOF checked
        -: 1063:    if (__b == __e)
        -: 1064:        __err |= ios_base::eofbit;
        -: 1065:    return __b;
        -: 1066:}
        -: 1067:
        -: 1068:template <class _CharT, class _InputIterator>
        -: 1069:_InputIterator
        -: 1070:num_get<_CharT, _InputIterator>::do_get(iter_type __b, iter_type __e,
        -: 1071:                                        ios_base& __iob,
        -: 1072:                                        ios_base::iostate& __err,
        -: 1073:                                        void*& __v) const
        -: 1074:{
        -: 1075:    // Stage 1
        -: 1076:    int __base = 16;
        -: 1077:    // Stage 2
        -: 1078:    char_type __atoms[26];
        -: 1079:    char_type __thousands_sep = 0;
        -: 1080:    string __grouping;
        -: 1081:    use_facet<ctype<_CharT> >(__iob.getloc()).widen(__num_get_base::__src,
        -: 1082:                                                    __num_get_base::__src + 26, __atoms);
        -: 1083:    string __buf;
        -: 1084:    __buf.resize(__buf.capacity());
        -: 1085:    char* __a = &__buf[0];
        -: 1086:    char* __a_end = __a;
        -: 1087:    unsigned __g[__num_get_base::__num_get_buf_sz];
        -: 1088:    unsigned* __g_end = __g;
        -: 1089:    unsigned __dc = 0;
        -: 1090:    for (; __b != __e; ++__b)
        -: 1091:    {
        -: 1092:        if (__a_end == __a + __buf.size())
        -: 1093:        {
        -: 1094:            size_t __tmp = __buf.size();
        -: 1095:            __buf.resize(2*__buf.size());
        -: 1096:            __buf.resize(__buf.capacity());
        -: 1097:            __a = &__buf[0];
        -: 1098:            __a_end = __a + __tmp;
        -: 1099:        }
        -: 1100:        if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc,
        -: 1101:                                    __thousands_sep, __grouping,
        -: 1102:                                    __g, __g_end, __atoms))
        -: 1103:            break;
        -: 1104:    }
        -: 1105:    // Stage 3
        -: 1106:    __buf.resize(__a_end - __a);
        -: 1107:    if (__libcpp_sscanf_l(__buf.c_str(), _LIBCPP_GET_C_LOCALE, "%p", &__v) != 1)
        -: 1108:        __err = ios_base::failbit;
        -: 1109:    // EOF checked
        -: 1110:    if (__b == __e)
        -: 1111:        __err |= ios_base::eofbit;
        -: 1112:    return __b;
        -: 1113:}
        -: 1114:
        -: 1115:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS num_get<char>)
        -: 1116:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1117:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS num_get<wchar_t>)
        -: 1118:#endif
        -: 1119:
        -: 1120:struct _LIBCPP_TYPE_VIS __num_put_base
        -: 1121:{
        -: 1122:protected:
        -: 1123:    static void __format_int(char* __fmt, const char* __len, bool __signd,
        -: 1124:                             ios_base::fmtflags __flags);
        -: 1125:    static bool __format_float(char* __fmt, const char* __len,
        -: 1126:                               ios_base::fmtflags __flags);
        -: 1127:    static char* __identify_padding(char* __nb, char* __ne,
        -: 1128:                                    const ios_base& __iob);
        -: 1129:};
        -: 1130:
        -: 1131:template <class _CharT>
        -: 1132:struct __num_put
        -: 1133:    : protected __num_put_base
        -: 1134:{
        -: 1135:    static void __widen_and_group_int(char* __nb, char* __np, char* __ne,
        -: 1136:                                      _CharT* __ob, _CharT*& __op, _CharT*& __oe,
        -: 1137:                                      const locale& __loc);
        -: 1138:    static void __widen_and_group_float(char* __nb, char* __np, char* __ne,
        -: 1139:                                        _CharT* __ob, _CharT*& __op, _CharT*& __oe,
        -: 1140:                                        const locale& __loc);
        -: 1141:};
        -: 1142:
        -: 1143:template <class _CharT>
        -: 1144:void
        -: 1145:__num_put<_CharT>::__widen_and_group_int(char* __nb, char* __np, char* __ne,
        -: 1146:                                         _CharT* __ob, _CharT*& __op, _CharT*& __oe,
        -: 1147:                                         const locale& __loc)
        -: 1148:{
        -: 1149:    const ctype<_CharT>&    __ct = use_facet<ctype<_CharT> >   (__loc);
        -: 1150:    const numpunct<_CharT>& __npt = use_facet<numpunct<_CharT> >(__loc);
        -: 1151:    string __grouping = __npt.grouping();
        -: 1152:    if (__grouping.empty())
        -: 1153:    {
        -: 1154:        __ct.widen(__nb, __ne, __ob);
        -: 1155:        __oe = __ob + (__ne - __nb);
        -: 1156:    }
        -: 1157:    else
        -: 1158:    {
        -: 1159:        __oe = __ob;
        -: 1160:        char* __nf = __nb;
        -: 1161:        if (*__nf == '-' || *__nf == '+')
        -: 1162:            *__oe++ = __ct.widen(*__nf++);
        -: 1163:        if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' ||
        -: 1164:                                                   __nf[1] == 'X'))
        -: 1165:        {
        -: 1166:            *__oe++ = __ct.widen(*__nf++);
        -: 1167:            *__oe++ = __ct.widen(*__nf++);
        -: 1168:        }
        -: 1169:        reverse(__nf, __ne);
        -: 1170:        _CharT __thousands_sep = __npt.thousands_sep();
        -: 1171:        unsigned __dc = 0;
        -: 1172:        unsigned __dg = 0;
        -: 1173:        for (char* __p = __nf; __p < __ne; ++__p)
        -: 1174:        {
        -: 1175:            if (static_cast<unsigned>(__grouping[__dg]) > 0 &&
        -: 1176:                __dc == static_cast<unsigned>(__grouping[__dg]))
        -: 1177:            {
        -: 1178:                *__oe++ = __thousands_sep;
        -: 1179:                __dc = 0;
        -: 1180:                if (__dg < __grouping.size()-1)
        -: 1181:                    ++__dg;
        -: 1182:            }
        -: 1183:            *__oe++ = __ct.widen(*__p);
        -: 1184:            ++__dc;
        -: 1185:        }
        -: 1186:        reverse(__ob + (__nf - __nb), __oe);
        -: 1187:    }
        -: 1188:    if (__np == __ne)
        -: 1189:        __op = __oe;
        -: 1190:    else
        -: 1191:        __op = __ob + (__np - __nb);
        -: 1192:}
        -: 1193:
        -: 1194:template <class _CharT>
        -: 1195:void
        -: 1196:__num_put<_CharT>::__widen_and_group_float(char* __nb, char* __np, char* __ne,
        -: 1197:                                           _CharT* __ob, _CharT*& __op, _CharT*& __oe,
        -: 1198:                                           const locale& __loc)
        -: 1199:{
        -: 1200:    const ctype<_CharT>&    __ct = use_facet<ctype<_CharT> >   (__loc);
        -: 1201:    const numpunct<_CharT>& __npt = use_facet<numpunct<_CharT> >(__loc);
        -: 1202:    string __grouping = __npt.grouping();
        -: 1203:    __oe = __ob;
        -: 1204:    char* __nf = __nb;
        -: 1205:    if (*__nf == '-' || *__nf == '+')
        -: 1206:        *__oe++ = __ct.widen(*__nf++);
        -: 1207:    char* __ns;
        -: 1208:    if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' ||
        -: 1209:                                               __nf[1] == 'X'))
        -: 1210:    {
        -: 1211:        *__oe++ = __ct.widen(*__nf++);
        -: 1212:        *__oe++ = __ct.widen(*__nf++);
        -: 1213:        for (__ns = __nf; __ns < __ne; ++__ns)
        -: 1214:            if (!isxdigit_l(*__ns, _LIBCPP_GET_C_LOCALE))
        -: 1215:                break;
        -: 1216:    }
        -: 1217:    else
        -: 1218:    {
        -: 1219:        for (__ns = __nf; __ns < __ne; ++__ns)
        -: 1220:            if (!isdigit_l(*__ns, _LIBCPP_GET_C_LOCALE))
        -: 1221:                break;
        -: 1222:    }
        -: 1223:    if (__grouping.empty())
        -: 1224:    {
        -: 1225:        __ct.widen(__nf, __ns, __oe);
        -: 1226:        __oe += __ns - __nf;
        -: 1227:    }
        -: 1228:    else
        -: 1229:    {
        -: 1230:        reverse(__nf, __ns);
        -: 1231:        _CharT __thousands_sep = __npt.thousands_sep();
        -: 1232:        unsigned __dc = 0;
        -: 1233:        unsigned __dg = 0;
        -: 1234:        for (char* __p = __nf; __p < __ns; ++__p)
        -: 1235:        {
        -: 1236:            if (__grouping[__dg] > 0 && __dc == static_cast<unsigned>(__grouping[__dg]))
        -: 1237:            {
        -: 1238:                *__oe++ = __thousands_sep;
        -: 1239:                __dc = 0;
        -: 1240:                if (__dg < __grouping.size()-1)
        -: 1241:                    ++__dg;
        -: 1242:            }
        -: 1243:            *__oe++ = __ct.widen(*__p);
        -: 1244:            ++__dc;
        -: 1245:        }
        -: 1246:        reverse(__ob + (__nf - __nb), __oe);
        -: 1247:    }
        -: 1248:    for (__nf = __ns; __nf < __ne; ++__nf)
        -: 1249:    {
        -: 1250:        if (*__nf == '.')
        -: 1251:        {
        -: 1252:            *__oe++ = __npt.decimal_point();
        -: 1253:            ++__nf;
        -: 1254:            break;
        -: 1255:        }
        -: 1256:        else
        -: 1257:            *__oe++ = __ct.widen(*__nf);
        -: 1258:    }
        -: 1259:    __ct.widen(__nf, __ne, __oe);
        -: 1260:    __oe += __ne - __nf;
        -: 1261:    if (__np == __ne)
        -: 1262:        __op = __oe;
        -: 1263:    else
        -: 1264:        __op = __ob + (__np - __nb);
        -: 1265:}
        -: 1266:
        -: 1267:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(struct _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __num_put<char>)
        -: 1268:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1269:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(struct _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __num_put<wchar_t>)
        -: 1270:#endif
        -: 1271:
        -: 1272:template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
        -: 1273:class _LIBCPP_TEMPLATE_VIS num_put
        -: 1274:    : public locale::facet,
        -: 1275:      private __num_put<_CharT>
        -: 1276:{
        -: 1277:public:
        -: 1278:    typedef _CharT char_type;
        -: 1279:    typedef _OutputIterator iter_type;
        -: 1280:
        -: 1281:    _LIBCPP_INLINE_VISIBILITY
        -: 1282:    explicit num_put(size_t __refs = 0)
        -: 1283:        : locale::facet(__refs) {}
        -: 1284:
        -: 1285:    _LIBCPP_INLINE_VISIBILITY
        -: 1286:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1287:                  bool __v) const
        -: 1288:    {
        -: 1289:        return do_put(__s, __iob, __fl, __v);
        -: 1290:    }
        -: 1291:
        -: 1292:    _LIBCPP_INLINE_VISIBILITY
        -: 1293:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1294:                  long __v) const
        -: 1295:    {
        -: 1296:        return do_put(__s, __iob, __fl, __v);
        -: 1297:    }
        -: 1298:
        -: 1299:    _LIBCPP_INLINE_VISIBILITY
        -: 1300:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1301:                  long long __v) const
        -: 1302:    {
        -: 1303:        return do_put(__s, __iob, __fl, __v);
        -: 1304:    }
        -: 1305:
        -: 1306:    _LIBCPP_INLINE_VISIBILITY
        -: 1307:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1308:                  unsigned long __v) const
        -: 1309:    {
        -: 1310:        return do_put(__s, __iob, __fl, __v);
        -: 1311:    }
        -: 1312:
        -: 1313:    _LIBCPP_INLINE_VISIBILITY
        -: 1314:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1315:                  unsigned long long __v) const
        -: 1316:    {
        -: 1317:        return do_put(__s, __iob, __fl, __v);
        -: 1318:    }
        -: 1319:
        -: 1320:    _LIBCPP_INLINE_VISIBILITY
        -: 1321:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1322:                  double __v) const
        -: 1323:    {
        -: 1324:        return do_put(__s, __iob, __fl, __v);
        -: 1325:    }
        -: 1326:
        -: 1327:    _LIBCPP_INLINE_VISIBILITY
        -: 1328:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1329:                  long double __v) const
        -: 1330:    {
        -: 1331:        return do_put(__s, __iob, __fl, __v);
        -: 1332:    }
        -: 1333:
        -: 1334:    _LIBCPP_INLINE_VISIBILITY
        -: 1335:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1336:                  const void* __v) const
        -: 1337:    {
        -: 1338:        return do_put(__s, __iob, __fl, __v);
        -: 1339:    }
        -: 1340:
        -: 1341:    static locale::id id;
        -: 1342:
        -: 1343:protected:
        -: 1344:    _LIBCPP_INLINE_VISIBILITY
        -: 1345:    ~num_put() {}
        -: 1346:
        -: 1347:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1348:                             bool __v) const;
        -: 1349:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1350:                             long __v) const;
        -: 1351:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1352:                             long long __v) const;
        -: 1353:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1354:                             unsigned long) const;
        -: 1355:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1356:                             unsigned long long) const;
        -: 1357:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1358:                             double __v) const;
        -: 1359:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1360:                             long double __v) const;
        -: 1361:    virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 1362:                             const void* __v) const;
        -: 1363:};
        -: 1364:
        -: 1365:template <class _CharT, class _OutputIterator>
        -: 1366:locale::id
        -: 1367:num_put<_CharT, _OutputIterator>::id;
        -: 1368:
        -: 1369:template <class _CharT, class _OutputIterator>
        -: 1370:_LIBCPP_HIDDEN
        -: 1371:_OutputIterator
        -: 1372:__pad_and_output(_OutputIterator __s,
        -: 1373:                 const _CharT* __ob, const _CharT* __op, const _CharT* __oe,
        -: 1374:                 ios_base& __iob, _CharT __fl)
        -: 1375:{
        -: 1376:    streamsize __sz = __oe - __ob;
        -: 1377:    streamsize __ns = __iob.width();
        -: 1378:    if (__ns > __sz)
        -: 1379:        __ns -= __sz;
        -: 1380:    else
        -: 1381:        __ns = 0;
        -: 1382:    for (;__ob < __op; ++__ob, ++__s)
        -: 1383:        *__s = *__ob;
        -: 1384:    for (; __ns; --__ns, ++__s)
        -: 1385:        *__s = __fl;
        -: 1386:    for (; __ob < __oe; ++__ob, ++__s)
        -: 1387:        *__s = *__ob;
        -: 1388:    __iob.width(0);
        -: 1389:    return __s;
        -: 1390:}
        -: 1391:
        -: 1392:template <class _CharT, class _Traits>
        -: 1393:_LIBCPP_HIDDEN
        -: 1394:ostreambuf_iterator<_CharT, _Traits>
function _ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ called 350 returned 100% blocks executed 40%
      350: 1395:__pad_and_output(ostreambuf_iterator<_CharT, _Traits> __s,
        -: 1396:                 const _CharT* __ob, const _CharT* __op, const _CharT* __oe,
        -: 1397:                 ios_base& __iob, _CharT __fl)
        -: 1398:{
      350: 1399:    if (__s.__sbuf_ == nullptr)
      350: 1399-block  0
branch  0 taken 350
branch  1 taken 0
    #####: 1400:        return __s;
    $$$$$: 1400-block  0
      350: 1401:    streamsize __sz = __oe - __ob;
      350: 1402:    streamsize __ns = __iob.width();
      350: 1403:    if (__ns > __sz)
      350: 1403-block  0
branch  0 taken 0
branch  1 taken 350
    #####: 1404:        __ns -= __sz;
    $$$$$: 1404-block  0
        -: 1405:    else
      350: 1406:        __ns = 0;
      350: 1406-block  0
      350: 1407:    streamsize __np = __op - __ob;
      350: 1408:    if (__np > 0)
      350: 1408-block  0
branch  0 taken 350
branch  1 taken 0
        -: 1409:    {
    #####: 1410:        if (__s.__sbuf_->sputn(__ob, __np) != __np)
    $$$$$: 1410-block  0
branch  0 never executed
branch  1 never executed
        -: 1411:        {
    #####: 1412:            __s.__sbuf_ = nullptr;
    #####: 1413:            return __s;
    $$$$$: 1413-block  0
        -: 1414:        }
    #####: 1415:    }
    $$$$$: 1415-block  0
      350: 1416:    if (__ns > 0)
      350: 1416-block  0
branch  0 taken 350
branch  1 taken 0
        -: 1417:    {
    #####: 1418:        basic_string<_CharT, _Traits> __sp(__ns, __fl);
    #####: 1419:        if (__s.__sbuf_->sputn(__sp.data(), __ns) != __ns)
    $$$$$: 1419-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1419-block  1
branch  2 never executed
branch  3 never executed
        -: 1420:        {
    #####: 1421:            __s.__sbuf_ = nullptr;
    #####: 1422:            return __s;
    $$$$$: 1422-block  0
        -: 1423:        }
    #####: 1424:    }
    $$$$$: 1424-block  0
    $$$$$: 1424-block  1
    $$$$$: 1424-block  2
branch  0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1424-block  3
    $$$$$: 1424-block  4
      350: 1425:    __np = __oe - __op;
      350: 1426:    if (__np > 0)
      350: 1426-block  0
branch  0 taken 0
branch  1 taken 350
        -: 1427:    {
      350: 1428:        if (__s.__sbuf_->sputn(__op, __np) != __np)
      350: 1428-block  0
branch  0 taken 0
branch  1 taken 350
        -: 1429:        {
    #####: 1430:            __s.__sbuf_ = nullptr;
    #####: 1431:            return __s;
    $$$$$: 1431-block  0
        -: 1432:        }
      350: 1433:    }
      350: 1433-block  0
      350: 1434:    __iob.width(0);
      350: 1435:    return __s;
      350: 1435-block  0
      350: 1436:}
      350: 1436-block  0
        -: 1437:
        -: 1438:template <class _CharT, class _OutputIterator>
        -: 1439:_OutputIterator
        -: 1440:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1441:                                         char_type __fl, bool __v) const
        -: 1442:{
        -: 1443:    if ((__iob.flags() & ios_base::boolalpha) == 0)
        -: 1444:        return do_put(__s, __iob, __fl, (unsigned long)__v);
        -: 1445:    const numpunct<char_type>& __np = use_facet<numpunct<char_type> >(__iob.getloc());
        -: 1446:    typedef typename numpunct<char_type>::string_type string_type;
        -: 1447:#if _LIBCPP_DEBUG_LEVEL == 2
        -: 1448:    string_type __tmp(__v ? __np.truename() : __np.falsename());
        -: 1449:    string_type __nm = _VSTD::move(__tmp);
        -: 1450:#else
        -: 1451:    string_type __nm = __v ? __np.truename() : __np.falsename();
        -: 1452:#endif
        -: 1453:    for (typename string_type::iterator __i = __nm.begin(); __i != __nm.end(); ++__i, ++__s)
        -: 1454:        *__s = *__i;
        -: 1455:    return __s;
        -: 1456:}
        -: 1457:
        -: 1458:template <class _CharT, class _OutputIterator>
        -: 1459:_OutputIterator
        -: 1460:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1461:                                         char_type __fl, long __v) const
        -: 1462:{
        -: 1463:    // Stage 1 - Get number in narrow char
        -: 1464:    char __fmt[6] = {'%', 0};
        -: 1465:    const char* __len = "l";
        -: 1466:    this->__format_int(__fmt+1, __len, true, __iob.flags());
        -: 1467:    // Worst case is octal, with showbase enabled. Note that octal is always
        -: 1468:    // printed as an unsigned value.
        -: 1469:    _LIBCPP_CONSTEXPR const unsigned __nbuf
        -: 1470:        = (numeric_limits<unsigned long>::digits / 3)        // 1 char per 3 bits
        -: 1471:        + ((numeric_limits<unsigned long>::digits % 3) != 0) // round up
        -: 1472:        + 2; // base prefix + terminating null character
        -: 1473:    char __nar[__nbuf];
        -: 1474:    int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1475:    char* __ne = __nar + __nc;
        -: 1476:    char* __np = this->__identify_padding(__nar, __ne, __iob);
        -: 1477:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1478:    char_type __o[2*(__nbuf-1) - 1];
        -: 1479:    char_type* __op;  // pad here
        -: 1480:    char_type* __oe;  // end of output
        -: 1481:    this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());
        -: 1482:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1483:    // Stage 3 & 4
        -: 1484:    return __pad_and_output(__s, __o, __op, __oe, __iob, __fl);
        -: 1485:}
        -: 1486:
        -: 1487:template <class _CharT, class _OutputIterator>
        -: 1488:_OutputIterator
        -: 1489:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1490:                                         char_type __fl, long long __v) const
        -: 1491:{
        -: 1492:    // Stage 1 - Get number in narrow char
        -: 1493:    char __fmt[8] = {'%', 0};
        -: 1494:    const char* __len = "ll";
        -: 1495:    this->__format_int(__fmt+1, __len, true, __iob.flags());
        -: 1496:    // Worst case is octal, with showbase enabled. Note that octal is always
        -: 1497:    // printed as an unsigned value.
        -: 1498:    _LIBCPP_CONSTEXPR const unsigned __nbuf
        -: 1499:        = (numeric_limits<unsigned long long>::digits / 3)        // 1 char per 3 bits
        -: 1500:        + ((numeric_limits<unsigned long long>::digits % 3) != 0) // round up
        -: 1501:        + 2; // base prefix + terminating null character
        -: 1502:    char __nar[__nbuf];
        -: 1503:    int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1504:    char* __ne = __nar + __nc;
        -: 1505:    char* __np = this->__identify_padding(__nar, __ne, __iob);
        -: 1506:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1507:    char_type __o[2*(__nbuf-1) - 1];
        -: 1508:    char_type* __op;  // pad here
        -: 1509:    char_type* __oe;  // end of output
        -: 1510:    this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());
        -: 1511:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1512:    // Stage 3 & 4
        -: 1513:    return __pad_and_output(__s, __o, __op, __oe, __iob, __fl);
        -: 1514:}
        -: 1515:
        -: 1516:template <class _CharT, class _OutputIterator>
        -: 1517:_OutputIterator
        -: 1518:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1519:                                         char_type __fl, unsigned long __v) const
        -: 1520:{
        -: 1521:    // Stage 1 - Get number in narrow char
        -: 1522:    char __fmt[6] = {'%', 0};
        -: 1523:    const char* __len = "l";
        -: 1524:    this->__format_int(__fmt+1, __len, false, __iob.flags());
        -: 1525:    // Worst case is octal, with showbase enabled.
        -: 1526:    _LIBCPP_CONSTEXPR const unsigned __nbuf
        -: 1527:        = (numeric_limits<unsigned long>::digits / 3)        // 1 char per 3 bits
        -: 1528:        + ((numeric_limits<unsigned long>::digits % 3) != 0) // round up
        -: 1529:        + 2; // base prefix + terminating null character
        -: 1530:    char __nar[__nbuf];
        -: 1531:    int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1532:    char* __ne = __nar + __nc;
        -: 1533:    char* __np = this->__identify_padding(__nar, __ne, __iob);
        -: 1534:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1535:    char_type __o[2*(__nbuf-1) - 1];
        -: 1536:    char_type* __op;  // pad here
        -: 1537:    char_type* __oe;  // end of output
        -: 1538:    this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());
        -: 1539:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1540:    // Stage 3 & 4
        -: 1541:    return __pad_and_output(__s, __o, __op, __oe, __iob, __fl);
        -: 1542:}
        -: 1543:
        -: 1544:template <class _CharT, class _OutputIterator>
        -: 1545:_OutputIterator
        -: 1546:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1547:                                         char_type __fl, unsigned long long __v) const
        -: 1548:{
        -: 1549:    // Stage 1 - Get number in narrow char
        -: 1550:    char __fmt[8] = {'%', 0};
        -: 1551:    const char* __len = "ll";
        -: 1552:    this->__format_int(__fmt+1, __len, false, __iob.flags());
        -: 1553:    // Worst case is octal, with showbase enabled.
        -: 1554:    _LIBCPP_CONSTEXPR const unsigned __nbuf
        -: 1555:        = (numeric_limits<unsigned long long>::digits / 3)        // 1 char per 3 bits
        -: 1556:        + ((numeric_limits<unsigned long long>::digits % 3) != 0) // round up
        -: 1557:        + 2; // base prefix + terminating null character
        -: 1558:    char __nar[__nbuf];
        -: 1559:    int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1560:    char* __ne = __nar + __nc;
        -: 1561:    char* __np = this->__identify_padding(__nar, __ne, __iob);
        -: 1562:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1563:    char_type __o[2*(__nbuf-1) - 1];
        -: 1564:    char_type* __op;  // pad here
        -: 1565:    char_type* __oe;  // end of output
        -: 1566:    this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());
        -: 1567:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1568:    // Stage 3 & 4
        -: 1569:    return __pad_and_output(__s, __o, __op, __oe, __iob, __fl);
        -: 1570:}
        -: 1571:
        -: 1572:template <class _CharT, class _OutputIterator>
        -: 1573:_OutputIterator
        -: 1574:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1575:                                         char_type __fl, double __v) const
        -: 1576:{
        -: 1577:    // Stage 1 - Get number in narrow char
        -: 1578:    char __fmt[8] = {'%', 0};
        -: 1579:    const char* __len = "";
        -: 1580:    bool __specify_precision = this->__format_float(__fmt+1, __len, __iob.flags());
        -: 1581:    const unsigned __nbuf = 30;
        -: 1582:    char __nar[__nbuf];
        -: 1583:    char* __nb = __nar;
        -: 1584:    int __nc;
        -: 1585:    if (__specify_precision)
        -: 1586:        __nc = __libcpp_snprintf_l(__nb, __nbuf, _LIBCPP_GET_C_LOCALE, __fmt,
        -: 1587:                                   (int)__iob.precision(), __v);
        -: 1588:    else
        -: 1589:        __nc = __libcpp_snprintf_l(__nb, __nbuf, _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1590:    unique_ptr<char, void(*)(void*)> __nbh(nullptr, free);
        -: 1591:    if (__nc > static_cast<int>(__nbuf-1))
        -: 1592:    {
        -: 1593:        if (__specify_precision)
        -: 1594:            __nc = __libcpp_asprintf_l(&__nb, _LIBCPP_GET_C_LOCALE, __fmt, (int)__iob.precision(), __v);
        -: 1595:        else
        -: 1596:            __nc = __libcpp_asprintf_l(&__nb, _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1597:        if (__nc == -1)
        -: 1598:            __throw_bad_alloc();
        -: 1599:        __nbh.reset(__nb);
        -: 1600:    }
        -: 1601:    char* __ne = __nb + __nc;
        -: 1602:    char* __np = this->__identify_padding(__nb, __ne, __iob);
        -: 1603:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1604:    char_type __o[2*(__nbuf-1) - 1];
        -: 1605:    char_type* __ob = __o;
        -: 1606:    unique_ptr<char_type, void(*)(void*)> __obh(0, free);
        -: 1607:    if (__nb != __nar)
        -: 1608:    {
        -: 1609:        __ob = (char_type*)malloc(2*static_cast<size_t>(__nc)*sizeof(char_type));
        -: 1610:        if (__ob == 0)
        -: 1611:            __throw_bad_alloc();
        -: 1612:        __obh.reset(__ob);
        -: 1613:    }
        -: 1614:    char_type* __op;  // pad here
        -: 1615:    char_type* __oe;  // end of output
        -: 1616:    this->__widen_and_group_float(__nb, __np, __ne, __ob, __op, __oe, __iob.getloc());
        -: 1617:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1618:    // Stage 3 & 4
        -: 1619:    __s = __pad_and_output(__s, __ob, __op, __oe, __iob, __fl);
        -: 1620:    return __s;
        -: 1621:}
        -: 1622:
        -: 1623:template <class _CharT, class _OutputIterator>
        -: 1624:_OutputIterator
        -: 1625:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1626:                                         char_type __fl, long double __v) const
        -: 1627:{
        -: 1628:    // Stage 1 - Get number in narrow char
        -: 1629:    char __fmt[8] = {'%', 0};
        -: 1630:    const char* __len = "L";
        -: 1631:    bool __specify_precision = this->__format_float(__fmt+1, __len, __iob.flags());
        -: 1632:    const unsigned __nbuf = 30;
        -: 1633:    char __nar[__nbuf];
        -: 1634:    char* __nb = __nar;
        -: 1635:    int __nc;
        -: 1636:    if (__specify_precision)
        -: 1637:        __nc = __libcpp_snprintf_l(__nb, __nbuf, _LIBCPP_GET_C_LOCALE, __fmt,
        -: 1638:                                   (int)__iob.precision(), __v);
        -: 1639:    else
        -: 1640:        __nc = __libcpp_snprintf_l(__nb, __nbuf, _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1641:    unique_ptr<char, void(*)(void*)> __nbh(nullptr, free);
        -: 1642:    if (__nc > static_cast<int>(__nbuf-1))
        -: 1643:    {
        -: 1644:        if (__specify_precision)
        -: 1645:            __nc = __libcpp_asprintf_l(&__nb, _LIBCPP_GET_C_LOCALE, __fmt, (int)__iob.precision(), __v);
        -: 1646:        else
        -: 1647:            __nc = __libcpp_asprintf_l(&__nb, _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1648:        if (__nc == -1)
        -: 1649:            __throw_bad_alloc();
        -: 1650:        __nbh.reset(__nb);
        -: 1651:    }
        -: 1652:    char* __ne = __nb + __nc;
        -: 1653:    char* __np = this->__identify_padding(__nb, __ne, __iob);
        -: 1654:    // Stage 2 - Widen __nar while adding thousands separators
        -: 1655:    char_type __o[2*(__nbuf-1) - 1];
        -: 1656:    char_type* __ob = __o;
        -: 1657:    unique_ptr<char_type, void(*)(void*)> __obh(0, free);
        -: 1658:    if (__nb != __nar)
        -: 1659:    {
        -: 1660:        __ob = (char_type*)malloc(2*static_cast<size_t>(__nc)*sizeof(char_type));
        -: 1661:        if (__ob == 0)
        -: 1662:            __throw_bad_alloc();
        -: 1663:        __obh.reset(__ob);
        -: 1664:    }
        -: 1665:    char_type* __op;  // pad here
        -: 1666:    char_type* __oe;  // end of output
        -: 1667:    this->__widen_and_group_float(__nb, __np, __ne, __ob, __op, __oe, __iob.getloc());
        -: 1668:    // [__o, __oe) contains thousands_sep'd wide number
        -: 1669:    // Stage 3 & 4
        -: 1670:    __s = __pad_and_output(__s, __ob, __op, __oe, __iob, __fl);
        -: 1671:    return __s;
        -: 1672:}
        -: 1673:
        -: 1674:template <class _CharT, class _OutputIterator>
        -: 1675:_OutputIterator
        -: 1676:num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob,
        -: 1677:                                         char_type __fl, const void* __v) const
        -: 1678:{
        -: 1679:    // Stage 1 - Get pointer in narrow char
        -: 1680:    char __fmt[6] = "%p";
        -: 1681:    const unsigned __nbuf = 20;
        -: 1682:    char __nar[__nbuf];
        -: 1683:    int __nc = __libcpp_snprintf_l(__nar, sizeof(__nar), _LIBCPP_GET_C_LOCALE, __fmt, __v);
        -: 1684:    char* __ne = __nar + __nc;
        -: 1685:    char* __np = this->__identify_padding(__nar, __ne, __iob);
        -: 1686:    // Stage 2 - Widen __nar
        -: 1687:    char_type __o[2*(__nbuf-1) - 1];
        -: 1688:    char_type* __op;  // pad here
        -: 1689:    char_type* __oe;  // end of output
        -: 1690:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 1691:    __ct.widen(__nar, __ne, __o);
        -: 1692:    __oe = __o + (__ne - __nar);
        -: 1693:    if (__np == __ne)
        -: 1694:        __op = __oe;
        -: 1695:    else
        -: 1696:        __op = __o + (__np - __nar);
        -: 1697:    // [__o, __oe) contains wide number
        -: 1698:    // Stage 3 & 4
        -: 1699:    return __pad_and_output(__s, __o, __op, __oe, __iob, __fl);
        -: 1700:}
        -: 1701:
        -: 1702:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS num_put<char>)
        -: 1703:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1704:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS num_put<wchar_t>)
        -: 1705:#endif
        -: 1706:
        -: 1707:template <class _CharT, class _InputIterator>
        -: 1708:_LIBCPP_HIDDEN
        -: 1709:int
        -: 1710:__get_up_to_n_digits(_InputIterator& __b, _InputIterator __e,
        -: 1711:                     ios_base::iostate& __err, const ctype<_CharT>& __ct, int __n)
        -: 1712:{
        -: 1713:    // Precondition:  __n >= 1
        -: 1714:    if (__b == __e)
        -: 1715:    {
        -: 1716:        __err |= ios_base::eofbit | ios_base::failbit;
        -: 1717:        return 0;
        -: 1718:    }
        -: 1719:    // get first digit
        -: 1720:    _CharT __c = *__b;
        -: 1721:    if (!__ct.is(ctype_base::digit, __c))
        -: 1722:    {
        -: 1723:        __err |= ios_base::failbit;
        -: 1724:        return 0;
        -: 1725:    }
        -: 1726:    int __r = __ct.narrow(__c, 0) - '0';
        -: 1727:    for (++__b, (void) --__n; __b != __e && __n > 0; ++__b, (void) --__n)
        -: 1728:    {
        -: 1729:        // get next digit
        -: 1730:        __c = *__b;
        -: 1731:        if (!__ct.is(ctype_base::digit, __c))
        -: 1732:            return __r;
        -: 1733:        __r = __r * 10 + __ct.narrow(__c, 0) - '0';
        -: 1734:    }
        -: 1735:    if (__b == __e)
        -: 1736:        __err |= ios_base::eofbit;
        -: 1737:    return __r;
        -: 1738:}
        -: 1739:
        -: 1740:class _LIBCPP_TYPE_VIS time_base
        -: 1741:{
        -: 1742:public:
        -: 1743:    enum dateorder {no_order, dmy, mdy, ymd, ydm};
        -: 1744:};
        -: 1745:
        -: 1746:template <class _CharT>
        -: 1747:class _LIBCPP_TEMPLATE_VIS __time_get_c_storage
        -: 1748:{
        -: 1749:protected:
        -: 1750:    typedef basic_string<_CharT> string_type;
        -: 1751:
        -: 1752:    virtual const string_type* __weeks() const;
        -: 1753:    virtual const string_type* __months() const;
        -: 1754:    virtual const string_type* __am_pm() const;
        -: 1755:    virtual const string_type& __c() const;
        -: 1756:    virtual const string_type& __r() const;
        -: 1757:    virtual const string_type& __x() const;
        -: 1758:    virtual const string_type& __X() const;
        -: 1759:
        -: 1760:    _LIBCPP_INLINE_VISIBILITY
        -: 1761:    ~__time_get_c_storage() {}
        -: 1762:};
        -: 1763:
        -: 1764:template <> _LIBCPP_FUNC_VIS const string* __time_get_c_storage<char>::__weeks() const;
        -: 1765:template <> _LIBCPP_FUNC_VIS const string* __time_get_c_storage<char>::__months() const;
        -: 1766:template <> _LIBCPP_FUNC_VIS const string* __time_get_c_storage<char>::__am_pm() const;
        -: 1767:template <> _LIBCPP_FUNC_VIS const string& __time_get_c_storage<char>::__c() const;
        -: 1768:template <> _LIBCPP_FUNC_VIS const string& __time_get_c_storage<char>::__r() const;
        -: 1769:template <> _LIBCPP_FUNC_VIS const string& __time_get_c_storage<char>::__x() const;
        -: 1770:template <> _LIBCPP_FUNC_VIS const string& __time_get_c_storage<char>::__X() const;
        -: 1771:
        -: 1772:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1773:template <> _LIBCPP_FUNC_VIS const wstring* __time_get_c_storage<wchar_t>::__weeks() const;
        -: 1774:template <> _LIBCPP_FUNC_VIS const wstring* __time_get_c_storage<wchar_t>::__months() const;
        -: 1775:template <> _LIBCPP_FUNC_VIS const wstring* __time_get_c_storage<wchar_t>::__am_pm() const;
        -: 1776:template <> _LIBCPP_FUNC_VIS const wstring& __time_get_c_storage<wchar_t>::__c() const;
        -: 1777:template <> _LIBCPP_FUNC_VIS const wstring& __time_get_c_storage<wchar_t>::__r() const;
        -: 1778:template <> _LIBCPP_FUNC_VIS const wstring& __time_get_c_storage<wchar_t>::__x() const;
        -: 1779:template <> _LIBCPP_FUNC_VIS const wstring& __time_get_c_storage<wchar_t>::__X() const;
        -: 1780:#endif
        -: 1781:
        -: 1782:template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
        -: 1783:class _LIBCPP_TEMPLATE_VIS time_get
        -: 1784:    : public locale::facet,
        -: 1785:      public time_base,
        -: 1786:      private __time_get_c_storage<_CharT>
        -: 1787:{
        -: 1788:public:
        -: 1789:    typedef _CharT                  char_type;
        -: 1790:    typedef _InputIterator          iter_type;
        -: 1791:    typedef time_base::dateorder    dateorder;
        -: 1792:    typedef basic_string<char_type> string_type;
        -: 1793:
        -: 1794:    _LIBCPP_INLINE_VISIBILITY
        -: 1795:    explicit time_get(size_t __refs = 0)
        -: 1796:        : locale::facet(__refs) {}
        -: 1797:
        -: 1798:    _LIBCPP_INLINE_VISIBILITY
        -: 1799:    dateorder date_order() const
        -: 1800:    {
        -: 1801:        return this->do_date_order();
        -: 1802:    }
        -: 1803:
        -: 1804:    _LIBCPP_INLINE_VISIBILITY
        -: 1805:    iter_type get_time(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1806:                       ios_base::iostate& __err, tm* __tm) const
        -: 1807:    {
        -: 1808:        return do_get_time(__b, __e, __iob, __err, __tm);
        -: 1809:    }
        -: 1810:
        -: 1811:    _LIBCPP_INLINE_VISIBILITY
        -: 1812:    iter_type get_date(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1813:                       ios_base::iostate& __err, tm* __tm) const
        -: 1814:    {
        -: 1815:        return do_get_date(__b, __e, __iob, __err, __tm);
        -: 1816:    }
        -: 1817:
        -: 1818:    _LIBCPP_INLINE_VISIBILITY
        -: 1819:    iter_type get_weekday(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1820:                          ios_base::iostate& __err, tm* __tm) const
        -: 1821:    {
        -: 1822:        return do_get_weekday(__b, __e, __iob, __err, __tm);
        -: 1823:    }
        -: 1824:
        -: 1825:    _LIBCPP_INLINE_VISIBILITY
        -: 1826:    iter_type get_monthname(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1827:                            ios_base::iostate& __err, tm* __tm) const
        -: 1828:    {
        -: 1829:        return do_get_monthname(__b, __e, __iob, __err, __tm);
        -: 1830:    }
        -: 1831:
        -: 1832:    _LIBCPP_INLINE_VISIBILITY
        -: 1833:    iter_type get_year(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1834:                       ios_base::iostate& __err, tm* __tm) const
        -: 1835:    {
        -: 1836:        return do_get_year(__b, __e, __iob, __err, __tm);
        -: 1837:    }
        -: 1838:
        -: 1839:    _LIBCPP_INLINE_VISIBILITY
        -: 1840:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1841:                  ios_base::iostate& __err, tm *__tm,
        -: 1842:                  char __fmt, char __mod = 0) const
        -: 1843:    {
        -: 1844:        return do_get(__b, __e, __iob, __err, __tm, __fmt, __mod);
        -: 1845:    }
        -: 1846:
        -: 1847:    iter_type get(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1848:                  ios_base::iostate& __err, tm* __tm,
        -: 1849:                  const char_type* __fmtb, const char_type* __fmte) const;
        -: 1850:
        -: 1851:    static locale::id id;
        -: 1852:
        -: 1853:protected:
        -: 1854:    _LIBCPP_INLINE_VISIBILITY
        -: 1855:    ~time_get() {}
        -: 1856:
        -: 1857:    virtual dateorder do_date_order() const;
        -: 1858:    virtual iter_type do_get_time(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1859:                                  ios_base::iostate& __err, tm* __tm) const;
        -: 1860:    virtual iter_type do_get_date(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1861:                                  ios_base::iostate& __err, tm* __tm) const;
        -: 1862:    virtual iter_type do_get_weekday(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1863:                                     ios_base::iostate& __err, tm* __tm) const;
        -: 1864:    virtual iter_type do_get_monthname(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1865:                                       ios_base::iostate& __err, tm* __tm) const;
        -: 1866:    virtual iter_type do_get_year(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1867:                                  ios_base::iostate& __err, tm* __tm) const;
        -: 1868:    virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob,
        -: 1869:                             ios_base::iostate& __err, tm* __tm,
        -: 1870:                             char __fmt, char __mod) const;
        -: 1871:private:
        -: 1872:    void __get_white_space(iter_type& __b, iter_type __e,
        -: 1873:                           ios_base::iostate& __err, const ctype<char_type>& __ct) const;
        -: 1874:    void __get_percent(iter_type& __b, iter_type __e, ios_base::iostate& __err,
        -: 1875:                       const ctype<char_type>& __ct) const;
        -: 1876:
        -: 1877:    void __get_weekdayname(int& __m,
        -: 1878:                           iter_type& __b, iter_type __e,
        -: 1879:                           ios_base::iostate& __err,
        -: 1880:                           const ctype<char_type>& __ct) const;
        -: 1881:    void __get_monthname(int& __m,
        -: 1882:                         iter_type& __b, iter_type __e,
        -: 1883:                         ios_base::iostate& __err,
        -: 1884:                         const ctype<char_type>& __ct) const;
        -: 1885:    void __get_day(int& __d,
        -: 1886:                   iter_type& __b, iter_type __e,
        -: 1887:                   ios_base::iostate& __err,
        -: 1888:                   const ctype<char_type>& __ct) const;
        -: 1889:    void __get_month(int& __m,
        -: 1890:                     iter_type& __b, iter_type __e,
        -: 1891:                     ios_base::iostate& __err,
        -: 1892:                     const ctype<char_type>& __ct) const;
        -: 1893:    void __get_year(int& __y,
        -: 1894:                   iter_type& __b, iter_type __e,
        -: 1895:                   ios_base::iostate& __err,
        -: 1896:                   const ctype<char_type>& __ct) const;
        -: 1897:    void __get_year4(int& __y,
        -: 1898:                    iter_type& __b, iter_type __e,
        -: 1899:                    ios_base::iostate& __err,
        -: 1900:                    const ctype<char_type>& __ct) const;
        -: 1901:    void __get_hour(int& __d,
        -: 1902:                    iter_type& __b, iter_type __e,
        -: 1903:                    ios_base::iostate& __err,
        -: 1904:                    const ctype<char_type>& __ct) const;
        -: 1905:    void __get_12_hour(int& __h,
        -: 1906:                       iter_type& __b, iter_type __e,
        -: 1907:                       ios_base::iostate& __err,
        -: 1908:                       const ctype<char_type>& __ct) const;
        -: 1909:    void __get_am_pm(int& __h,
        -: 1910:                     iter_type& __b, iter_type __e,
        -: 1911:                     ios_base::iostate& __err,
        -: 1912:                     const ctype<char_type>& __ct) const;
        -: 1913:    void __get_minute(int& __m,
        -: 1914:                      iter_type& __b, iter_type __e,
        -: 1915:                      ios_base::iostate& __err,
        -: 1916:                      const ctype<char_type>& __ct) const;
        -: 1917:    void __get_second(int& __s,
        -: 1918:                      iter_type& __b, iter_type __e,
        -: 1919:                      ios_base::iostate& __err,
        -: 1920:                      const ctype<char_type>& __ct) const;
        -: 1921:    void __get_weekday(int& __w,
        -: 1922:                       iter_type& __b, iter_type __e,
        -: 1923:                       ios_base::iostate& __err,
        -: 1924:                       const ctype<char_type>& __ct) const;
        -: 1925:    void __get_day_year_num(int& __w,
        -: 1926:                            iter_type& __b, iter_type __e,
        -: 1927:                            ios_base::iostate& __err,
        -: 1928:                            const ctype<char_type>& __ct) const;
        -: 1929:};
        -: 1930:
        -: 1931:template <class _CharT, class _InputIterator>
        -: 1932:locale::id
        -: 1933:time_get<_CharT, _InputIterator>::id;
        -: 1934:
        -: 1935:// time_get primitives
        -: 1936:
        -: 1937:template <class _CharT, class _InputIterator>
        -: 1938:void
        -: 1939:time_get<_CharT, _InputIterator>::__get_weekdayname(int& __w,
        -: 1940:                                                    iter_type& __b, iter_type __e,
        -: 1941:                                                    ios_base::iostate& __err,
        -: 1942:                                                    const ctype<char_type>& __ct) const
        -: 1943:{
        -: 1944:    // Note:  ignoring case comes from the POSIX strptime spec
        -: 1945:    const string_type* __wk = this->__weeks();
        -: 1946:    ptrdiff_t __i = _VSTD::__scan_keyword(__b, __e, __wk, __wk+14, __ct, __err, false) - __wk;
        -: 1947:    if (__i < 14)
        -: 1948:        __w = __i % 7;
        -: 1949:}
        -: 1950:
        -: 1951:template <class _CharT, class _InputIterator>
        -: 1952:void
        -: 1953:time_get<_CharT, _InputIterator>::__get_monthname(int& __m,
        -: 1954:                                                  iter_type& __b, iter_type __e,
        -: 1955:                                                  ios_base::iostate& __err,
        -: 1956:                                                  const ctype<char_type>& __ct) const
        -: 1957:{
        -: 1958:    // Note:  ignoring case comes from the POSIX strptime spec
        -: 1959:    const string_type* __month = this->__months();
        -: 1960:    ptrdiff_t __i = _VSTD::__scan_keyword(__b, __e, __month, __month+24, __ct, __err, false) - __month;
        -: 1961:    if (__i < 24)
        -: 1962:        __m = __i % 12;
        -: 1963:}
        -: 1964:
        -: 1965:template <class _CharT, class _InputIterator>
        -: 1966:void
        -: 1967:time_get<_CharT, _InputIterator>::__get_day(int& __d,
        -: 1968:                                            iter_type& __b, iter_type __e,
        -: 1969:                                            ios_base::iostate& __err,
        -: 1970:                                            const ctype<char_type>& __ct) const
        -: 1971:{
        -: 1972:    int __t = _VSTD::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
        -: 1973:    if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 31)
        -: 1974:        __d = __t;
        -: 1975:    else
        -: 1976:        __err |= ios_base::failbit;
        -: 1977:}
        -: 1978:
        -: 1979:template <class _CharT, class _InputIterator>
        -: 1980:void
        -: 1981:time_get<_CharT, _InputIterator>::__get_month(int& __m,
        -: 1982:                                              iter_type& __b, iter_type __e,
        -: 1983:                                              ios_base::iostate& __err,
        -: 1984:                                              const ctype<char_type>& __ct) const
        -: 1985:{
        -: 1986:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 2) - 1;
        -: 1987:    if (!(__err & ios_base::failbit) && __t <= 11)
        -: 1988:        __m = __t;
        -: 1989:    else
        -: 1990:        __err |= ios_base::failbit;
        -: 1991:}
        -: 1992:
        -: 1993:template <class _CharT, class _InputIterator>
        -: 1994:void
        -: 1995:time_get<_CharT, _InputIterator>::__get_year(int& __y,
        -: 1996:                                             iter_type& __b, iter_type __e,
        -: 1997:                                             ios_base::iostate& __err,
        -: 1998:                                             const ctype<char_type>& __ct) const
        -: 1999:{
        -: 2000:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 4);
        -: 2001:    if (!(__err & ios_base::failbit))
        -: 2002:    {
        -: 2003:        if (__t < 69)
        -: 2004:            __t += 2000;
        -: 2005:        else if (69 <= __t && __t <= 99)
        -: 2006:            __t += 1900;
        -: 2007:        __y = __t - 1900;
        -: 2008:    }
        -: 2009:}
        -: 2010:
        -: 2011:template <class _CharT, class _InputIterator>
        -: 2012:void
        -: 2013:time_get<_CharT, _InputIterator>::__get_year4(int& __y,
        -: 2014:                                              iter_type& __b, iter_type __e,
        -: 2015:                                              ios_base::iostate& __err,
        -: 2016:                                              const ctype<char_type>& __ct) const
        -: 2017:{
        -: 2018:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 4);
        -: 2019:    if (!(__err & ios_base::failbit))
        -: 2020:        __y = __t - 1900;
        -: 2021:}
        -: 2022:
        -: 2023:template <class _CharT, class _InputIterator>
        -: 2024:void
        -: 2025:time_get<_CharT, _InputIterator>::__get_hour(int& __h,
        -: 2026:                                             iter_type& __b, iter_type __e,
        -: 2027:                                             ios_base::iostate& __err,
        -: 2028:                                             const ctype<char_type>& __ct) const
        -: 2029:{
        -: 2030:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 2);
        -: 2031:    if (!(__err & ios_base::failbit) && __t <= 23)
        -: 2032:        __h = __t;
        -: 2033:    else
        -: 2034:        __err |= ios_base::failbit;
        -: 2035:}
        -: 2036:
        -: 2037:template <class _CharT, class _InputIterator>
        -: 2038:void
        -: 2039:time_get<_CharT, _InputIterator>::__get_12_hour(int& __h,
        -: 2040:                                                iter_type& __b, iter_type __e,
        -: 2041:                                                ios_base::iostate& __err,
        -: 2042:                                                const ctype<char_type>& __ct) const
        -: 2043:{
        -: 2044:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 2);
        -: 2045:    if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 12)
        -: 2046:        __h = __t;
        -: 2047:    else
        -: 2048:        __err |= ios_base::failbit;
        -: 2049:}
        -: 2050:
        -: 2051:template <class _CharT, class _InputIterator>
        -: 2052:void
        -: 2053:time_get<_CharT, _InputIterator>::__get_minute(int& __m,
        -: 2054:                                               iter_type& __b, iter_type __e,
        -: 2055:                                               ios_base::iostate& __err,
        -: 2056:                                               const ctype<char_type>& __ct) const
        -: 2057:{
        -: 2058:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 2);
        -: 2059:    if (!(__err & ios_base::failbit) && __t <= 59)
        -: 2060:        __m = __t;
        -: 2061:    else
        -: 2062:        __err |= ios_base::failbit;
        -: 2063:}
        -: 2064:
        -: 2065:template <class _CharT, class _InputIterator>
        -: 2066:void
        -: 2067:time_get<_CharT, _InputIterator>::__get_second(int& __s,
        -: 2068:                                               iter_type& __b, iter_type __e,
        -: 2069:                                               ios_base::iostate& __err,
        -: 2070:                                               const ctype<char_type>& __ct) const
        -: 2071:{
        -: 2072:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 2);
        -: 2073:    if (!(__err & ios_base::failbit) && __t <= 60)
        -: 2074:        __s = __t;
        -: 2075:    else
        -: 2076:        __err |= ios_base::failbit;
        -: 2077:}
        -: 2078:
        -: 2079:template <class _CharT, class _InputIterator>
        -: 2080:void
        -: 2081:time_get<_CharT, _InputIterator>::__get_weekday(int& __w,
        -: 2082:                                                iter_type& __b, iter_type __e,
        -: 2083:                                                ios_base::iostate& __err,
        -: 2084:                                                const ctype<char_type>& __ct) const
        -: 2085:{
        -: 2086:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 1);
        -: 2087:    if (!(__err & ios_base::failbit) && __t <= 6)
        -: 2088:        __w = __t;
        -: 2089:    else
        -: 2090:        __err |= ios_base::failbit;
        -: 2091:}
        -: 2092:
        -: 2093:template <class _CharT, class _InputIterator>
        -: 2094:void
        -: 2095:time_get<_CharT, _InputIterator>::__get_day_year_num(int& __d,
        -: 2096:                                                     iter_type& __b, iter_type __e,
        -: 2097:                                                     ios_base::iostate& __err,
        -: 2098:                                                     const ctype<char_type>& __ct) const
        -: 2099:{
        -: 2100:    int __t = __get_up_to_n_digits(__b, __e, __err, __ct, 3);
        -: 2101:    if (!(__err & ios_base::failbit) && __t <= 365)
        -: 2102:        __d = __t;
        -: 2103:    else
        -: 2104:        __err |= ios_base::failbit;
        -: 2105:}
        -: 2106:
        -: 2107:template <class _CharT, class _InputIterator>
        -: 2108:void
        -: 2109:time_get<_CharT, _InputIterator>::__get_white_space(iter_type& __b, iter_type __e,
        -: 2110:                                                    ios_base::iostate& __err,
        -: 2111:                                                    const ctype<char_type>& __ct) const
        -: 2112:{
        -: 2113:    for (; __b != __e && __ct.is(ctype_base::space, *__b); ++__b)
        -: 2114:        ;
        -: 2115:    if (__b == __e)
        -: 2116:        __err |= ios_base::eofbit;
        -: 2117:}
        -: 2118:
        -: 2119:template <class _CharT, class _InputIterator>
        -: 2120:void
        -: 2121:time_get<_CharT, _InputIterator>::__get_am_pm(int& __h,
        -: 2122:                                              iter_type& __b, iter_type __e,
        -: 2123:                                              ios_base::iostate& __err,
        -: 2124:                                              const ctype<char_type>& __ct) const
        -: 2125:{
        -: 2126:    const string_type* __ap = this->__am_pm();
        -: 2127:    if (__ap[0].size() + __ap[1].size() == 0)
        -: 2128:    {
        -: 2129:        __err |= ios_base::failbit;
        -: 2130:        return;
        -: 2131:    }
        -: 2132:    ptrdiff_t __i = _VSTD::__scan_keyword(__b, __e, __ap, __ap+2, __ct, __err, false) - __ap;
        -: 2133:    if (__i == 0 && __h == 12)
        -: 2134:        __h = 0;
        -: 2135:    else if (__i == 1 && __h < 12)
        -: 2136:        __h += 12;
        -: 2137:}
        -: 2138:
        -: 2139:template <class _CharT, class _InputIterator>
        -: 2140:void
        -: 2141:time_get<_CharT, _InputIterator>::__get_percent(iter_type& __b, iter_type __e,
        -: 2142:                                                ios_base::iostate& __err,
        -: 2143:                                                const ctype<char_type>& __ct) const
        -: 2144:{
        -: 2145:    if (__b == __e)
        -: 2146:    {
        -: 2147:        __err |= ios_base::eofbit | ios_base::failbit;
        -: 2148:        return;
        -: 2149:    }
        -: 2150:    if (__ct.narrow(*__b, 0) != '%')
        -: 2151:        __err |= ios_base::failbit;
        -: 2152:    else if(++__b == __e)
        -: 2153:        __err |= ios_base::eofbit;
        -: 2154:}
        -: 2155:
        -: 2156:// time_get end primitives
        -: 2157:
        -: 2158:template <class _CharT, class _InputIterator>
        -: 2159:_InputIterator
        -: 2160:time_get<_CharT, _InputIterator>::get(iter_type __b, iter_type __e,
        -: 2161:                                      ios_base& __iob,
        -: 2162:                                      ios_base::iostate& __err, tm* __tm,
        -: 2163:                                      const char_type* __fmtb, const char_type* __fmte) const
        -: 2164:{
        -: 2165:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2166:    __err = ios_base::goodbit;
        -: 2167:    while (__fmtb != __fmte && __err == ios_base::goodbit)
        -: 2168:    {
        -: 2169:        if (__b == __e)
        -: 2170:        {
        -: 2171:            __err = ios_base::failbit;
        -: 2172:            break;
        -: 2173:        }
        -: 2174:        if (__ct.narrow(*__fmtb, 0) == '%')
        -: 2175:        {
        -: 2176:            if (++__fmtb == __fmte)
        -: 2177:            {
        -: 2178:                __err = ios_base::failbit;
        -: 2179:                break;
        -: 2180:            }
        -: 2181:            char __cmd = __ct.narrow(*__fmtb, 0);
        -: 2182:            char __opt = '\0';
        -: 2183:            if (__cmd == 'E' || __cmd == '0')
        -: 2184:            {
        -: 2185:                if (++__fmtb == __fmte)
        -: 2186:                {
        -: 2187:                    __err = ios_base::failbit;
        -: 2188:                    break;
        -: 2189:                }
        -: 2190:                __opt = __cmd;
        -: 2191:                __cmd = __ct.narrow(*__fmtb, 0);
        -: 2192:            }
        -: 2193:            __b = do_get(__b, __e, __iob, __err, __tm, __cmd, __opt);
        -: 2194:            ++__fmtb;
        -: 2195:        }
        -: 2196:        else if (__ct.is(ctype_base::space, *__fmtb))
        -: 2197:        {
        -: 2198:            for (++__fmtb; __fmtb != __fmte && __ct.is(ctype_base::space, *__fmtb); ++__fmtb)
        -: 2199:                ;
        -: 2200:            for (        ;    __b != __e    && __ct.is(ctype_base::space, *__b);    ++__b)
        -: 2201:                ;
        -: 2202:        }
        -: 2203:        else if (__ct.toupper(*__b) == __ct.toupper(*__fmtb))
        -: 2204:        {
        -: 2205:            ++__b;
        -: 2206:            ++__fmtb;
        -: 2207:        }
        -: 2208:        else
        -: 2209:            __err = ios_base::failbit;
        -: 2210:    }
        -: 2211:    if (__b == __e)
        -: 2212:        __err |= ios_base::eofbit;
        -: 2213:    return __b;
        -: 2214:}
        -: 2215:
        -: 2216:template <class _CharT, class _InputIterator>
        -: 2217:typename time_get<_CharT, _InputIterator>::dateorder
        -: 2218:time_get<_CharT, _InputIterator>::do_date_order() const
        -: 2219:{
        -: 2220:    return mdy;
        -: 2221:}
        -: 2222:
        -: 2223:template <class _CharT, class _InputIterator>
        -: 2224:_InputIterator
        -: 2225:time_get<_CharT, _InputIterator>::do_get_time(iter_type __b, iter_type __e,
        -: 2226:                                              ios_base& __iob,
        -: 2227:                                              ios_base::iostate& __err,
        -: 2228:                                              tm* __tm) const
        -: 2229:{
        -: 2230:    const char_type __fmt[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
        -: 2231:    return get(__b, __e, __iob, __err, __tm, __fmt, __fmt + sizeof(__fmt)/sizeof(__fmt[0]));
        -: 2232:}
        -: 2233:
        -: 2234:template <class _CharT, class _InputIterator>
        -: 2235:_InputIterator
        -: 2236:time_get<_CharT, _InputIterator>::do_get_date(iter_type __b, iter_type __e,
        -: 2237:                                              ios_base& __iob,
        -: 2238:                                              ios_base::iostate& __err,
        -: 2239:                                              tm* __tm) const
        -: 2240:{
        -: 2241:    const string_type& __fmt = this->__x();
        -: 2242:    return get(__b, __e, __iob, __err, __tm, __fmt.data(), __fmt.data() + __fmt.size());
        -: 2243:}
        -: 2244:
        -: 2245:template <class _CharT, class _InputIterator>
        -: 2246:_InputIterator
        -: 2247:time_get<_CharT, _InputIterator>::do_get_weekday(iter_type __b, iter_type __e,
        -: 2248:                                                 ios_base& __iob,
        -: 2249:                                                 ios_base::iostate& __err,
        -: 2250:                                                 tm* __tm) const
        -: 2251:{
        -: 2252:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2253:    __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
        -: 2254:    return __b;
        -: 2255:}
        -: 2256:
        -: 2257:template <class _CharT, class _InputIterator>
        -: 2258:_InputIterator
        -: 2259:time_get<_CharT, _InputIterator>::do_get_monthname(iter_type __b, iter_type __e,
        -: 2260:                                                   ios_base& __iob,
        -: 2261:                                                   ios_base::iostate& __err,
        -: 2262:                                                   tm* __tm) const
        -: 2263:{
        -: 2264:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2265:    __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
        -: 2266:    return __b;
        -: 2267:}
        -: 2268:
        -: 2269:template <class _CharT, class _InputIterator>
        -: 2270:_InputIterator
        -: 2271:time_get<_CharT, _InputIterator>::do_get_year(iter_type __b, iter_type __e,
        -: 2272:                                              ios_base& __iob,
        -: 2273:                                              ios_base::iostate& __err,
        -: 2274:                                              tm* __tm) const
        -: 2275:{
        -: 2276:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2277:    __get_year(__tm->tm_year, __b, __e, __err, __ct);
        -: 2278:    return __b;
        -: 2279:}
        -: 2280:
        -: 2281:template <class _CharT, class _InputIterator>
        -: 2282:_InputIterator
        -: 2283:time_get<_CharT, _InputIterator>::do_get(iter_type __b, iter_type __e,
        -: 2284:                                         ios_base& __iob,
        -: 2285:                                         ios_base::iostate& __err, tm* __tm,
        -: 2286:                                         char __fmt, char) const
        -: 2287:{
        -: 2288:    __err = ios_base::goodbit;
        -: 2289:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2290:    switch (__fmt)
        -: 2291:    {
        -: 2292:    case 'a':
        -: 2293:    case 'A':
        -: 2294:        __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
        -: 2295:        break;
        -: 2296:    case 'b':
        -: 2297:    case 'B':
        -: 2298:    case 'h':
        -: 2299:        __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
        -: 2300:        break;
        -: 2301:    case 'c':
        -: 2302:        {
        -: 2303:        const string_type& __fm = this->__c();
        -: 2304:        __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
        -: 2305:        }
        -: 2306:        break;
        -: 2307:    case 'd':
        -: 2308:    case 'e':
        -: 2309:        __get_day(__tm->tm_mday, __b, __e, __err, __ct);
        -: 2310:        break;
        -: 2311:    case 'D':
        -: 2312:        {
        -: 2313:        const char_type __fm[] = {'%', 'm', '/', '%', 'd', '/', '%', 'y'};
        -: 2314:        __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm)/sizeof(__fm[0]));
        -: 2315:        }
        -: 2316:        break;
        -: 2317:    case 'F':
        -: 2318:        {
        -: 2319:        const char_type __fm[] = {'%', 'Y', '-', '%', 'm', '-', '%', 'd'};
        -: 2320:        __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm)/sizeof(__fm[0]));
        -: 2321:        }
        -: 2322:        break;
        -: 2323:    case 'H':
        -: 2324:        __get_hour(__tm->tm_hour, __b, __e, __err, __ct);
        -: 2325:        break;
        -: 2326:    case 'I':
        -: 2327:        __get_12_hour(__tm->tm_hour, __b, __e, __err, __ct);
        -: 2328:        break;
        -: 2329:    case 'j':
        -: 2330:        __get_day_year_num(__tm->tm_yday, __b, __e, __err, __ct);
        -: 2331:        break;
        -: 2332:    case 'm':
        -: 2333:        __get_month(__tm->tm_mon, __b, __e, __err, __ct);
        -: 2334:        break;
        -: 2335:    case 'M':
        -: 2336:        __get_minute(__tm->tm_min, __b, __e, __err, __ct);
        -: 2337:        break;
        -: 2338:    case 'n':
        -: 2339:    case 't':
        -: 2340:        __get_white_space(__b, __e, __err, __ct);
        -: 2341:        break;
        -: 2342:    case 'p':
        -: 2343:        __get_am_pm(__tm->tm_hour, __b, __e, __err, __ct);
        -: 2344:        break;
        -: 2345:    case 'r':
        -: 2346:        {
        -: 2347:        const char_type __fm[] = {'%', 'I', ':', '%', 'M', ':', '%', 'S', ' ', '%', 'p'};
        -: 2348:        __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm)/sizeof(__fm[0]));
        -: 2349:        }
        -: 2350:        break;
        -: 2351:    case 'R':
        -: 2352:        {
        -: 2353:        const char_type __fm[] = {'%', 'H', ':', '%', 'M'};
        -: 2354:        __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm)/sizeof(__fm[0]));
        -: 2355:        }
        -: 2356:        break;
        -: 2357:    case 'S':
        -: 2358:        __get_second(__tm->tm_sec, __b, __e, __err, __ct);
        -: 2359:        break;
        -: 2360:    case 'T':
        -: 2361:        {
        -: 2362:        const char_type __fm[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
        -: 2363:        __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm)/sizeof(__fm[0]));
        -: 2364:        }
        -: 2365:        break;
        -: 2366:    case 'w':
        -: 2367:        __get_weekday(__tm->tm_wday, __b, __e, __err, __ct);
        -: 2368:        break;
        -: 2369:    case 'x':
        -: 2370:        return do_get_date(__b, __e, __iob, __err, __tm);
        -: 2371:    case 'X':
        -: 2372:        {
        -: 2373:        const string_type& __fm = this->__X();
        -: 2374:        __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
        -: 2375:        }
        -: 2376:        break;
        -: 2377:    case 'y':
        -: 2378:        __get_year(__tm->tm_year, __b, __e, __err, __ct);
        -: 2379:        break;
        -: 2380:    case 'Y':
        -: 2381:        __get_year4(__tm->tm_year, __b, __e, __err, __ct);
        -: 2382:        break;
        -: 2383:    case '%':
        -: 2384:        __get_percent(__b, __e, __err, __ct);
        -: 2385:        break;
        -: 2386:    default:
        -: 2387:        __err |= ios_base::failbit;
        -: 2388:    }
        -: 2389:    return __b;
        -: 2390:}
        -: 2391:
        -: 2392:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_get<char>)
        -: 2393:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2394:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_get<wchar_t>)
        -: 2395:#endif
        -: 2396:
        -: 2397:class _LIBCPP_TYPE_VIS __time_get
        -: 2398:{
        -: 2399:protected:
        -: 2400:    locale_t __loc_;
        -: 2401:
        -: 2402:    __time_get(const char* __nm);
        -: 2403:    __time_get(const string& __nm);
        -: 2404:    ~__time_get();
        -: 2405:};
        -: 2406:
        -: 2407:template <class _CharT>
        -: 2408:class _LIBCPP_TEMPLATE_VIS __time_get_storage
        -: 2409:    : public __time_get
        -: 2410:{
        -: 2411:protected:
        -: 2412:    typedef basic_string<_CharT> string_type;
        -: 2413:
        -: 2414:    string_type __weeks_[14];
        -: 2415:    string_type __months_[24];
        -: 2416:    string_type __am_pm_[2];
        -: 2417:    string_type __c_;
        -: 2418:    string_type __r_;
        -: 2419:    string_type __x_;
        -: 2420:    string_type __X_;
        -: 2421:
        -: 2422:    explicit __time_get_storage(const char* __nm);
        -: 2423:    explicit __time_get_storage(const string& __nm);
        -: 2424:
        -: 2425:    _LIBCPP_INLINE_VISIBILITY ~__time_get_storage() {}
        -: 2426:
        -: 2427:    time_base::dateorder __do_date_order() const;
        -: 2428:
        -: 2429:private:
        -: 2430:    void init(const ctype<_CharT>&);
        -: 2431:    string_type __analyze(char __fmt, const ctype<_CharT>&);
        -: 2432:};
        -: 2433:
        -: 2434:#define _LIBCPP_TIME_GET_STORAGE_EXPLICIT_INSTANTIATION(_CharT) \
        -: 2435:template <> _LIBCPP_FUNC_VIS time_base::dateorder __time_get_storage<_CharT>::__do_date_order() const; \
        -: 2436:template <> _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::__time_get_storage(const char*); \
        -: 2437:template <> _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::__time_get_storage(const string&); \
        -: 2438:template <> _LIBCPP_FUNC_VIS void __time_get_storage<_CharT>::init(const ctype<_CharT>&); \
        -: 2439:template <> _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::string_type __time_get_storage<_CharT>::__analyze(char, const ctype<_CharT>&); \
        -: 2440:extern template _LIBCPP_FUNC_VIS time_base::dateorder __time_get_storage<_CharT>::__do_date_order() const; \
        -: 2441:extern template _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::__time_get_storage(const char*); \
        -: 2442:extern template _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::__time_get_storage(const string&); \
        -: 2443:extern template _LIBCPP_FUNC_VIS void __time_get_storage<_CharT>::init(const ctype<_CharT>&); \
        -: 2444:extern template _LIBCPP_FUNC_VIS __time_get_storage<_CharT>::string_type __time_get_storage<_CharT>::__analyze(char, const ctype<_CharT>&); \
        -: 2445:/**/
        -: 2446:
        -: 2447:_LIBCPP_TIME_GET_STORAGE_EXPLICIT_INSTANTIATION(char)
        -: 2448:_LIBCPP_TIME_GET_STORAGE_EXPLICIT_INSTANTIATION(wchar_t)
        -: 2449:#undef _LIBCPP_TIME_GET_STORAGE_EXPLICIT_INSTANTIATION
        -: 2450:
        -: 2451:template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
        -: 2452:class _LIBCPP_TEMPLATE_VIS time_get_byname
        -: 2453:    : public time_get<_CharT, _InputIterator>,
        -: 2454:      private __time_get_storage<_CharT>
        -: 2455:{
        -: 2456:public:
        -: 2457:    typedef time_base::dateorder    dateorder;
        -: 2458:    typedef _InputIterator          iter_type;
        -: 2459:    typedef _CharT                  char_type;
        -: 2460:    typedef basic_string<char_type> string_type;
        -: 2461:
        -: 2462:    _LIBCPP_INLINE_VISIBILITY
        -: 2463:    explicit time_get_byname(const char* __nm, size_t __refs = 0)
        -: 2464:        : time_get<_CharT, _InputIterator>(__refs),
        -: 2465:          __time_get_storage<_CharT>(__nm) {}
        -: 2466:    _LIBCPP_INLINE_VISIBILITY
        -: 2467:    explicit time_get_byname(const string& __nm, size_t __refs = 0)
        -: 2468:        : time_get<_CharT, _InputIterator>(__refs),
        -: 2469:          __time_get_storage<_CharT>(__nm) {}
        -: 2470:
        -: 2471:protected:
        -: 2472:    _LIBCPP_INLINE_VISIBILITY
        -: 2473:    ~time_get_byname() {}
        -: 2474:
        -: 2475:    _LIBCPP_INLINE_VISIBILITY
        -: 2476:    virtual dateorder do_date_order() const {return this->__do_date_order();}
        -: 2477:private:
        -: 2478:    _LIBCPP_INLINE_VISIBILITY
        -: 2479:    virtual const string_type* __weeks() const  {return this->__weeks_;}
        -: 2480:    _LIBCPP_INLINE_VISIBILITY
        -: 2481:    virtual const string_type* __months() const {return this->__months_;}
        -: 2482:    _LIBCPP_INLINE_VISIBILITY
        -: 2483:    virtual const string_type* __am_pm() const  {return this->__am_pm_;}
        -: 2484:    _LIBCPP_INLINE_VISIBILITY
        -: 2485:    virtual const string_type& __c() const      {return this->__c_;}
        -: 2486:    _LIBCPP_INLINE_VISIBILITY
        -: 2487:    virtual const string_type& __r() const      {return this->__r_;}
        -: 2488:    _LIBCPP_INLINE_VISIBILITY
        -: 2489:    virtual const string_type& __x() const      {return this->__x_;}
        -: 2490:    _LIBCPP_INLINE_VISIBILITY
        -: 2491:    virtual const string_type& __X() const      {return this->__X_;}
        -: 2492:};
        -: 2493:
        -: 2494:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_get_byname<char>)
        -: 2495:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2496:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_get_byname<wchar_t>)
        -: 2497:#endif
        -: 2498:
        -: 2499:class _LIBCPP_TYPE_VIS __time_put
        -: 2500:{
        -: 2501:    locale_t __loc_;
        -: 2502:protected:
        -: 2503:    _LIBCPP_INLINE_VISIBILITY __time_put() : __loc_(_LIBCPP_GET_C_LOCALE) {}
        -: 2504:    __time_put(const char* __nm);
        -: 2505:    __time_put(const string& __nm);
        -: 2506:    ~__time_put();
        -: 2507:    void __do_put(char* __nb, char*& __ne, const tm* __tm,
        -: 2508:                  char __fmt, char __mod) const;
        -: 2509:    void __do_put(wchar_t* __wb, wchar_t*& __we, const tm* __tm,
        -: 2510:                  char __fmt, char __mod) const;
        -: 2511:};
        -: 2512:
        -: 2513:template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
        -: 2514:class _LIBCPP_TEMPLATE_VIS time_put
        -: 2515:    : public locale::facet,
        -: 2516:      private __time_put
        -: 2517:{
        -: 2518:public:
        -: 2519:    typedef _CharT char_type;
        -: 2520:    typedef _OutputIterator iter_type;
        -: 2521:
        -: 2522:    _LIBCPP_INLINE_VISIBILITY
        -: 2523:    explicit time_put(size_t __refs = 0)
        -: 2524:        : locale::facet(__refs) {}
        -: 2525:
        -: 2526:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm,
        -: 2527:                  const char_type* __pb, const char_type* __pe) const;
        -: 2528:
        -: 2529:    _LIBCPP_INLINE_VISIBILITY
        -: 2530:    iter_type put(iter_type __s, ios_base& __iob, char_type __fl,
        -: 2531:                  const tm* __tm, char __fmt, char __mod = 0) const
        -: 2532:    {
        -: 2533:        return do_put(__s, __iob, __fl, __tm, __fmt, __mod);
        -: 2534:    }
        -: 2535:
        -: 2536:    static locale::id id;
        -: 2537:
        -: 2538:protected:
        -: 2539:    _LIBCPP_INLINE_VISIBILITY
        -: 2540:    ~time_put() {}
        -: 2541:    virtual iter_type do_put(iter_type __s, ios_base&, char_type, const tm* __tm,
        -: 2542:                             char __fmt, char __mod) const;
        -: 2543:
        -: 2544:    _LIBCPP_INLINE_VISIBILITY
        -: 2545:    explicit time_put(const char* __nm, size_t __refs)
        -: 2546:        : locale::facet(__refs),
        -: 2547:          __time_put(__nm) {}
        -: 2548:    _LIBCPP_INLINE_VISIBILITY
        -: 2549:    explicit time_put(const string& __nm, size_t __refs)
        -: 2550:        : locale::facet(__refs),
        -: 2551:          __time_put(__nm) {}
        -: 2552:};
        -: 2553:
        -: 2554:template <class _CharT, class _OutputIterator>
        -: 2555:locale::id
        -: 2556:time_put<_CharT, _OutputIterator>::id;
        -: 2557:
        -: 2558:template <class _CharT, class _OutputIterator>
        -: 2559:_OutputIterator
        -: 2560:time_put<_CharT, _OutputIterator>::put(iter_type __s, ios_base& __iob,
        -: 2561:                                       char_type __fl, const tm* __tm,
        -: 2562:                                       const char_type* __pb,
        -: 2563:                                       const char_type* __pe) const
        -: 2564:{
        -: 2565:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__iob.getloc());
        -: 2566:    for (; __pb != __pe; ++__pb)
        -: 2567:    {
        -: 2568:        if (__ct.narrow(*__pb, 0) == '%')
        -: 2569:        {
        -: 2570:            if (++__pb == __pe)
        -: 2571:            {
        -: 2572:                *__s++ = __pb[-1];
        -: 2573:                break;
        -: 2574:            }
        -: 2575:            char __mod = 0;
        -: 2576:            char __fmt = __ct.narrow(*__pb, 0);
        -: 2577:            if (__fmt == 'E' || __fmt == 'O')
        -: 2578:            {
        -: 2579:                if (++__pb == __pe)
        -: 2580:                {
        -: 2581:                    *__s++ = __pb[-2];
        -: 2582:                    *__s++ = __pb[-1];
        -: 2583:                    break;
        -: 2584:                }
        -: 2585:                __mod = __fmt;
        -: 2586:                __fmt = __ct.narrow(*__pb, 0);
        -: 2587:            }
        -: 2588:            __s = do_put(__s, __iob, __fl, __tm, __fmt, __mod);
        -: 2589:        }
        -: 2590:        else
        -: 2591:            *__s++ = *__pb;
        -: 2592:    }
        -: 2593:    return __s;
        -: 2594:}
        -: 2595:
        -: 2596:template <class _CharT, class _OutputIterator>
        -: 2597:_OutputIterator
        -: 2598:time_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base&,
        -: 2599:                                          char_type, const tm* __tm,
        -: 2600:                                          char __fmt, char __mod) const
        -: 2601:{
        -: 2602:    char_type __nar[100];
        -: 2603:    char_type* __nb = __nar;
        -: 2604:    char_type* __ne = __nb + 100;
        -: 2605:    __do_put(__nb, __ne, __tm, __fmt, __mod);
        -: 2606:    return _VSTD::copy(__nb, __ne, __s);
        -: 2607:}
        -: 2608:
        -: 2609:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_put<char>)
        -: 2610:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2611:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_put<wchar_t>)
        -: 2612:#endif
        -: 2613:
        -: 2614:template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
        -: 2615:class _LIBCPP_TEMPLATE_VIS time_put_byname
        -: 2616:    : public time_put<_CharT, _OutputIterator>
        -: 2617:{
        -: 2618:public:
        -: 2619:    _LIBCPP_INLINE_VISIBILITY
        -: 2620:    explicit time_put_byname(const char* __nm, size_t __refs = 0)
        -: 2621:        : time_put<_CharT, _OutputIterator>(__nm, __refs) {}
        -: 2622:
        -: 2623:    _LIBCPP_INLINE_VISIBILITY
        -: 2624:    explicit time_put_byname(const string& __nm, size_t __refs = 0)
        -: 2625:        : time_put<_CharT, _OutputIterator>(__nm, __refs) {}
        -: 2626:
        -: 2627:protected:
        -: 2628:    _LIBCPP_INLINE_VISIBILITY
        -: 2629:    ~time_put_byname() {}
        -: 2630:};
        -: 2631:
        -: 2632:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_put_byname<char>)
        -: 2633:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2634:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS time_put_byname<wchar_t>)
        -: 2635:#endif
        -: 2636:
        -: 2637:// money_base
        -: 2638:
        -: 2639:class _LIBCPP_TYPE_VIS money_base
        -: 2640:{
        -: 2641:public:
        -: 2642:    enum part {none, space, symbol, sign, value};
        -: 2643:    struct pattern {char field[4];};
        -: 2644:
        -: 2645:    _LIBCPP_INLINE_VISIBILITY money_base() {}
        -: 2646:};
        -: 2647:
        -: 2648:// moneypunct
        -: 2649:
        -: 2650:template <class _CharT, bool _International = false>
        -: 2651:class _LIBCPP_TEMPLATE_VIS moneypunct
        -: 2652:    : public locale::facet,
        -: 2653:      public money_base
        -: 2654:{
        -: 2655:public:
        -: 2656:    typedef _CharT                  char_type;
        -: 2657:    typedef basic_string<char_type> string_type;
        -: 2658:
        -: 2659:    _LIBCPP_INLINE_VISIBILITY
        -: 2660:    explicit moneypunct(size_t __refs = 0)
        -: 2661:        : locale::facet(__refs) {}
        -: 2662:
        -: 2663:    _LIBCPP_INLINE_VISIBILITY char_type   decimal_point() const {return do_decimal_point();}
        -: 2664:    _LIBCPP_INLINE_VISIBILITY char_type   thousands_sep() const {return do_thousands_sep();}
        -: 2665:    _LIBCPP_INLINE_VISIBILITY string      grouping()      const {return do_grouping();}
        -: 2666:    _LIBCPP_INLINE_VISIBILITY string_type curr_symbol()   const {return do_curr_symbol();}
        -: 2667:    _LIBCPP_INLINE_VISIBILITY string_type positive_sign() const {return do_positive_sign();}
        -: 2668:    _LIBCPP_INLINE_VISIBILITY string_type negative_sign() const {return do_negative_sign();}
        -: 2669:    _LIBCPP_INLINE_VISIBILITY int         frac_digits()   const {return do_frac_digits();}
        -: 2670:    _LIBCPP_INLINE_VISIBILITY pattern     pos_format()    const {return do_pos_format();}
        -: 2671:    _LIBCPP_INLINE_VISIBILITY pattern     neg_format()    const {return do_neg_format();}
        -: 2672:
        -: 2673:    static locale::id id;
        -: 2674:    static const bool intl = _International;
        -: 2675:
        -: 2676:protected:
        -: 2677:    _LIBCPP_INLINE_VISIBILITY
        -: 2678:    ~moneypunct() {}
        -: 2679:
        -: 2680:    virtual char_type   do_decimal_point() const {return numeric_limits<char_type>::max();}
        -: 2681:    virtual char_type   do_thousands_sep() const {return numeric_limits<char_type>::max();}
        -: 2682:    virtual string      do_grouping()      const {return string();}
        -: 2683:    virtual string_type do_curr_symbol()   const {return string_type();}
        -: 2684:    virtual string_type do_positive_sign() const {return string_type();}
        -: 2685:    virtual string_type do_negative_sign() const {return string_type(1, '-');}
        -: 2686:    virtual int         do_frac_digits()   const {return 0;}
        -: 2687:    virtual pattern     do_pos_format()    const
        -: 2688:        {pattern __p = {{symbol, sign, none, value}}; return __p;}
        -: 2689:    virtual pattern     do_neg_format()    const
        -: 2690:        {pattern __p = {{symbol, sign, none, value}}; return __p;}
        -: 2691:};
        -: 2692:
        -: 2693:template <class _CharT, bool _International>
        -: 2694:locale::id
        -: 2695:moneypunct<_CharT, _International>::id;
        -: 2696:
        -: 2697:template <class _CharT, bool _International>
        -: 2698:const bool
        -: 2699:moneypunct<_CharT, _International>::intl;
        -: 2700:
        -: 2701:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct<char, false>)
        -: 2702:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct<char, true>)
        -: 2703:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2704:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct<wchar_t, false>)
        -: 2705:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct<wchar_t, true>)
        -: 2706:#endif
        -: 2707:
        -: 2708:// moneypunct_byname
        -: 2709:
        -: 2710:template <class _CharT, bool _International = false>
        -: 2711:class _LIBCPP_TEMPLATE_VIS moneypunct_byname
        -: 2712:    : public moneypunct<_CharT, _International>
        -: 2713:{
        -: 2714:public:
        -: 2715:    typedef money_base::pattern  pattern;
        -: 2716:    typedef _CharT                  char_type;
        -: 2717:    typedef basic_string<char_type> string_type;
        -: 2718:
        -: 2719:    _LIBCPP_INLINE_VISIBILITY
        -: 2720:    explicit moneypunct_byname(const char* __nm, size_t __refs = 0)
        -: 2721:        : moneypunct<_CharT, _International>(__refs) {init(__nm);}
        -: 2722:
        -: 2723:    _LIBCPP_INLINE_VISIBILITY
        -: 2724:    explicit moneypunct_byname(const string& __nm, size_t __refs = 0)
        -: 2725:        : moneypunct<_CharT, _International>(__refs) {init(__nm.c_str());}
        -: 2726:
        -: 2727:protected:
        -: 2728:    _LIBCPP_INLINE_VISIBILITY
        -: 2729:    ~moneypunct_byname() {}
        -: 2730:
        -: 2731:    virtual char_type   do_decimal_point() const {return __decimal_point_;}
        -: 2732:    virtual char_type   do_thousands_sep() const {return __thousands_sep_;}
        -: 2733:    virtual string      do_grouping()      const {return __grouping_;}
        -: 2734:    virtual string_type do_curr_symbol()   const {return __curr_symbol_;}
        -: 2735:    virtual string_type do_positive_sign() const {return __positive_sign_;}
        -: 2736:    virtual string_type do_negative_sign() const {return __negative_sign_;}
        -: 2737:    virtual int         do_frac_digits()   const {return __frac_digits_;}
        -: 2738:    virtual pattern     do_pos_format()    const {return __pos_format_;}
        -: 2739:    virtual pattern     do_neg_format()    const {return __neg_format_;}
        -: 2740:
        -: 2741:private:
        -: 2742:    char_type   __decimal_point_;
        -: 2743:    char_type   __thousands_sep_;
        -: 2744:    string      __grouping_;
        -: 2745:    string_type __curr_symbol_;
        -: 2746:    string_type __positive_sign_;
        -: 2747:    string_type __negative_sign_;
        -: 2748:    int         __frac_digits_;
        -: 2749:    pattern     __pos_format_;
        -: 2750:    pattern     __neg_format_;
        -: 2751:
        -: 2752:    void init(const char*);
        -: 2753:};
        -: 2754:
        -: 2755:template<> _LIBCPP_FUNC_VIS void moneypunct_byname<char, false>::init(const char*);
        -: 2756:template<> _LIBCPP_FUNC_VIS void moneypunct_byname<char, true>::init(const char*);
        -: 2757:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct_byname<char, false>)
        -: 2758:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct_byname<char, true>)
        -: 2759:
        -: 2760:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2761:template<> _LIBCPP_FUNC_VIS void moneypunct_byname<wchar_t, false>::init(const char*);
        -: 2762:template<> _LIBCPP_FUNC_VIS void moneypunct_byname<wchar_t, true>::init(const char*);
        -: 2763:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct_byname<wchar_t, false>)
        -: 2764:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS moneypunct_byname<wchar_t, true>)
        -: 2765:#endif
        -: 2766:
        -: 2767:// money_get
        -: 2768:
        -: 2769:template <class _CharT>
        -: 2770:class __money_get
        -: 2771:{
        -: 2772:protected:
        -: 2773:    typedef _CharT                  char_type;
        -: 2774:    typedef basic_string<char_type> string_type;
        -: 2775:
        -: 2776:    _LIBCPP_INLINE_VISIBILITY __money_get() {}
        -: 2777:
        -: 2778:    static void __gather_info(bool __intl, const locale& __loc,
        -: 2779:                              money_base::pattern& __pat, char_type& __dp,
        -: 2780:                              char_type& __ts, string& __grp,
        -: 2781:                              string_type& __sym, string_type& __psn,
        -: 2782:                              string_type& __nsn, int& __fd);
        -: 2783:};
        -: 2784:
        -: 2785:template <class _CharT>
        -: 2786:void
        -: 2787:__money_get<_CharT>::__gather_info(bool __intl, const locale& __loc,
        -: 2788:                                   money_base::pattern& __pat, char_type& __dp,
        -: 2789:                                   char_type& __ts, string& __grp,
        -: 2790:                                   string_type& __sym, string_type& __psn,
        -: 2791:                                   string_type& __nsn, int& __fd)
        -: 2792:{
        -: 2793:    if (__intl)
        -: 2794:    {
        -: 2795:        const moneypunct<char_type, true>& __mp =
        -: 2796:            use_facet<moneypunct<char_type, true> >(__loc);
        -: 2797:        __pat = __mp.neg_format();
        -: 2798:        __nsn = __mp.negative_sign();
        -: 2799:        __psn = __mp.positive_sign();
        -: 2800:        __dp = __mp.decimal_point();
        -: 2801:        __ts = __mp.thousands_sep();
        -: 2802:        __grp = __mp.grouping();
        -: 2803:        __sym = __mp.curr_symbol();
        -: 2804:        __fd = __mp.frac_digits();
        -: 2805:    }
        -: 2806:    else
        -: 2807:    {
        -: 2808:        const moneypunct<char_type, false>& __mp =
        -: 2809:            use_facet<moneypunct<char_type, false> >(__loc);
        -: 2810:        __pat = __mp.neg_format();
        -: 2811:        __nsn = __mp.negative_sign();
        -: 2812:        __psn = __mp.positive_sign();
        -: 2813:        __dp = __mp.decimal_point();
        -: 2814:        __ts = __mp.thousands_sep();
        -: 2815:        __grp = __mp.grouping();
        -: 2816:        __sym = __mp.curr_symbol();
        -: 2817:        __fd = __mp.frac_digits();
        -: 2818:    }
        -: 2819:}
        -: 2820:
        -: 2821:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __money_get<char>)
        -: 2822:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2823:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __money_get<wchar_t>)
        -: 2824:#endif
        -: 2825:
        -: 2826:template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
        -: 2827:class _LIBCPP_TEMPLATE_VIS money_get
        -: 2828:    : public locale::facet,
        -: 2829:      private __money_get<_CharT>
        -: 2830:{
        -: 2831:public:
        -: 2832:    typedef _CharT                  char_type;
        -: 2833:    typedef _InputIterator          iter_type;
        -: 2834:    typedef basic_string<char_type> string_type;
        -: 2835:
        -: 2836:    _LIBCPP_INLINE_VISIBILITY
        -: 2837:    explicit money_get(size_t __refs = 0)
        -: 2838:        : locale::facet(__refs) {}
        -: 2839:
        -: 2840:    _LIBCPP_INLINE_VISIBILITY
        -: 2841:    iter_type get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob,
        -: 2842:                  ios_base::iostate& __err, long double& __v) const
        -: 2843:    {
        -: 2844:        return do_get(__b, __e, __intl, __iob, __err, __v);
        -: 2845:    }
        -: 2846:
        -: 2847:    _LIBCPP_INLINE_VISIBILITY
        -: 2848:    iter_type get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob,
        -: 2849:                  ios_base::iostate& __err, string_type& __v) const
        -: 2850:    {
        -: 2851:        return do_get(__b, __e, __intl, __iob, __err, __v);
        -: 2852:    }
        -: 2853:
        -: 2854:    static locale::id id;
        -: 2855:
        -: 2856:protected:
        -: 2857:
        -: 2858:    _LIBCPP_INLINE_VISIBILITY
        -: 2859:    ~money_get() {}
        -: 2860:
        -: 2861:    virtual iter_type do_get(iter_type __b, iter_type __e, bool __intl,
        -: 2862:                             ios_base& __iob, ios_base::iostate& __err,
        -: 2863:                             long double& __v) const;
        -: 2864:    virtual iter_type do_get(iter_type __b, iter_type __e, bool __intl,
        -: 2865:                             ios_base& __iob, ios_base::iostate& __err,
        -: 2866:                             string_type& __v) const;
        -: 2867:
        -: 2868:private:
        -: 2869:    static bool __do_get(iter_type& __b, iter_type __e,
        -: 2870:                         bool __intl, const locale& __loc,
        -: 2871:                         ios_base::fmtflags __flags, ios_base::iostate& __err,
        -: 2872:                         bool& __neg, const ctype<char_type>& __ct,
        -: 2873:                         unique_ptr<char_type, void(*)(void*)>& __wb,
        -: 2874:                         char_type*& __wn, char_type* __we);
        -: 2875:};
        -: 2876:
        -: 2877:template <class _CharT, class _InputIterator>
        -: 2878:locale::id
        -: 2879:money_get<_CharT, _InputIterator>::id;
        -: 2880:
        -: 2881:_LIBCPP_FUNC_VIS void __do_nothing(void*);
        -: 2882:
        -: 2883:template <class _Tp>
        -: 2884:_LIBCPP_HIDDEN
        -: 2885:void
        -: 2886:__double_or_nothing(unique_ptr<_Tp, void(*)(void*)>& __b, _Tp*& __n, _Tp*& __e)
        -: 2887:{
        -: 2888:    bool __owns = __b.get_deleter() != __do_nothing;
        -: 2889:    size_t __cur_cap = static_cast<size_t>(__e-__b.get()) * sizeof(_Tp);
        -: 2890:    size_t __new_cap = __cur_cap < numeric_limits<size_t>::max() / 2 ?
        -: 2891:                       2 * __cur_cap : numeric_limits<size_t>::max();
        -: 2892:    if (__new_cap == 0)
        -: 2893:        __new_cap = sizeof(_Tp);
        -: 2894:    size_t __n_off = static_cast<size_t>(__n - __b.get());
        -: 2895:    _Tp* __t = (_Tp*)realloc(__owns ? __b.get() : 0, __new_cap);
        -: 2896:    if (__t == 0)
        -: 2897:        __throw_bad_alloc();
        -: 2898:    if (__owns)
        -: 2899:        __b.release();
        -: 2900:    __b = unique_ptr<_Tp, void(*)(void*)>(__t, free);
        -: 2901:    __new_cap /= sizeof(_Tp);
        -: 2902:    __n = __b.get() + __n_off;
        -: 2903:    __e = __b.get() + __new_cap;
        -: 2904:}
        -: 2905:
        -: 2906:// true == success
        -: 2907:template <class _CharT, class _InputIterator>
        -: 2908:bool
        -: 2909:money_get<_CharT, _InputIterator>::__do_get(iter_type& __b, iter_type __e,
        -: 2910:                                            bool __intl, const locale& __loc,
        -: 2911:                                            ios_base::fmtflags __flags,
        -: 2912:                                            ios_base::iostate& __err,
        -: 2913:                                            bool& __neg,
        -: 2914:                                            const ctype<char_type>& __ct,
        -: 2915:                                            unique_ptr<char_type, void(*)(void*)>& __wb,
        -: 2916:                                            char_type*& __wn, char_type* __we)
        -: 2917:{
        -: 2918:    const unsigned __bz = 100;
        -: 2919:    unsigned __gbuf[__bz];
        -: 2920:    unique_ptr<unsigned, void(*)(void*)> __gb(__gbuf, __do_nothing);
        -: 2921:    unsigned* __gn = __gb.get();
        -: 2922:    unsigned* __ge = __gn + __bz;
        -: 2923:    money_base::pattern __pat;
        -: 2924:    char_type __dp;
        -: 2925:    char_type __ts;
        -: 2926:    string __grp;
        -: 2927:    string_type __sym;
        -: 2928:    string_type __psn;
        -: 2929:    string_type __nsn;
        -: 2930:    // Capture the spaces read into money_base::{space,none} so they
        -: 2931:    // can be compared to initial spaces in __sym.
        -: 2932:    string_type __spaces;
        -: 2933:    int __fd;
        -: 2934:    __money_get<_CharT>::__gather_info(__intl, __loc, __pat, __dp, __ts, __grp,
        -: 2935:                                       __sym, __psn, __nsn, __fd);
        -: 2936:    const string_type* __trailing_sign = 0;
        -: 2937:    __wn = __wb.get();
        -: 2938:    for (unsigned __p = 0; __p < 4 && __b != __e; ++__p)
        -: 2939:    {
        -: 2940:        switch (__pat.field[__p])
        -: 2941:        {
        -: 2942:        case money_base::space:
        -: 2943:            if (__p != 3)
        -: 2944:            {
        -: 2945:                if (__ct.is(ctype_base::space, *__b))
        -: 2946:                    __spaces.push_back(*__b++);
        -: 2947:                else
        -: 2948:                {
        -: 2949:                    __err |= ios_base::failbit;
        -: 2950:                    return false;
        -: 2951:                }
        -: 2952:            }
        -: 2953:            _LIBCPP_FALLTHROUGH();
        -: 2954:        case money_base::none:
        -: 2955:            if (__p != 3)
        -: 2956:            {
        -: 2957:                while (__b != __e && __ct.is(ctype_base::space, *__b))
        -: 2958:                    __spaces.push_back(*__b++);
        -: 2959:            }
        -: 2960:            break;
        -: 2961:        case money_base::sign:
        -: 2962:            if (__psn.size() + __nsn.size() > 0)
        -: 2963:            {
        -: 2964:                if (__psn.size() == 0 || __nsn.size() == 0)
        -: 2965:                {   // sign is optional
        -: 2966:                    if (__psn.size() > 0)
        -: 2967:                    {   // __nsn.size() == 0
        -: 2968:                        if (*__b == __psn[0])
        -: 2969:                        {
        -: 2970:                            ++__b;
        -: 2971:                            if (__psn.size() > 1)
        -: 2972:                                __trailing_sign = &__psn;
        -: 2973:                        }
        -: 2974:                        else
        -: 2975:                            __neg = true;
        -: 2976:                    }
        -: 2977:                    else if (*__b == __nsn[0])  // __nsn.size() > 0 &&  __psn.size() == 0
        -: 2978:                    {
        -: 2979:                        ++__b;
        -: 2980:                        __neg = true;
        -: 2981:                        if (__nsn.size() > 1)
        -: 2982:                            __trailing_sign = &__nsn;
        -: 2983:                    }
        -: 2984:                }
        -: 2985:                else  // sign is required
        -: 2986:                {
        -: 2987:                    if (*__b == __psn[0])
        -: 2988:                    {
        -: 2989:                        ++__b;
        -: 2990:                        if (__psn.size() > 1)
        -: 2991:                            __trailing_sign = &__psn;
        -: 2992:                    }
        -: 2993:                    else if (*__b == __nsn[0])
        -: 2994:                    {
        -: 2995:                        ++__b;
        -: 2996:                        __neg = true;
        -: 2997:                        if (__nsn.size() > 1)
        -: 2998:                            __trailing_sign = &__nsn;
        -: 2999:                    }
        -: 3000:                    else
        -: 3001:                    {
        -: 3002:                        __err |= ios_base::failbit;
        -: 3003:                        return false;
        -: 3004:                    }
        -: 3005:                }
        -: 3006:            }
        -: 3007:            break;
        -: 3008:        case money_base::symbol:
        -: 3009:            {
        -: 3010:            bool __more_needed = __trailing_sign ||
        -: 3011:                                 (__p < 2)       ||
        -: 3012:                                 (__p == 2 && __pat.field[3] != static_cast<char>(money_base::none));
        -: 3013:            bool __sb = (__flags & ios_base::showbase) != 0;
        -: 3014:            if (__sb || __more_needed)
        -: 3015:            {
        -: 3016:                typename string_type::const_iterator __sym_space_end = __sym.begin();
        -: 3017:                if (__p > 0 && (__pat.field[__p - 1] == money_base::none ||
        -: 3018:                                __pat.field[__p - 1] == money_base::space)) {
        -: 3019:                    // Match spaces we've already read against spaces at
        -: 3020:                    // the beginning of __sym.
        -: 3021:                    while (__sym_space_end != __sym.end() &&
        -: 3022:                           __ct.is(ctype_base::space, *__sym_space_end))
        -: 3023:                        ++__sym_space_end;
        -: 3024:                    const size_t __num_spaces = __sym_space_end - __sym.begin();
        -: 3025:                    if (__num_spaces > __spaces.size() ||
        -: 3026:                        !equal(__spaces.end() - __num_spaces, __spaces.end(),
        -: 3027:                               __sym.begin())) {
        -: 3028:                        // No match. Put __sym_space_end back at the
        -: 3029:                        // beginning of __sym, which will prevent a
        -: 3030:                        // match in the next loop.
        -: 3031:                        __sym_space_end = __sym.begin();
        -: 3032:                    }
        -: 3033:                }
        -: 3034:                typename string_type::const_iterator __sym_curr_char = __sym_space_end;
        -: 3035:                while (__sym_curr_char != __sym.end() && __b != __e &&
        -: 3036:                       *__b == *__sym_curr_char) {
        -: 3037:                    ++__b;
        -: 3038:                    ++__sym_curr_char;
        -: 3039:                }
        -: 3040:                if (__sb && __sym_curr_char != __sym.end())
        -: 3041:                {
        -: 3042:                    __err |= ios_base::failbit;
        -: 3043:                    return false;
        -: 3044:                }
        -: 3045:            }
        -: 3046:            }
        -: 3047:            break;
        -: 3048:        case money_base::value:
        -: 3049:            {
        -: 3050:            unsigned __ng = 0;
        -: 3051:            for (; __b != __e; ++__b)
        -: 3052:            {
        -: 3053:                char_type __c = *__b;
        -: 3054:                if (__ct.is(ctype_base::digit, __c))
        -: 3055:                {
        -: 3056:                    if (__wn == __we)
        -: 3057:                        __double_or_nothing(__wb, __wn, __we);
        -: 3058:                    *__wn++ = __c;
        -: 3059:                    ++__ng;
        -: 3060:                }
        -: 3061:                else if (__grp.size() > 0 && __ng > 0 && __c == __ts)
        -: 3062:                {
        -: 3063:                    if (__gn == __ge)
        -: 3064:                        __double_or_nothing(__gb, __gn, __ge);
        -: 3065:                    *__gn++ = __ng;
        -: 3066:                    __ng = 0;
        -: 3067:                }
        -: 3068:                else
        -: 3069:                    break;
        -: 3070:            }
        -: 3071:            if (__gb.get() != __gn && __ng > 0)
        -: 3072:            {
        -: 3073:                if (__gn == __ge)
        -: 3074:                    __double_or_nothing(__gb, __gn, __ge);
        -: 3075:                *__gn++ = __ng;
        -: 3076:            }
        -: 3077:            if (__fd > 0)
        -: 3078:            {
        -: 3079:                if (__b == __e || *__b != __dp)
        -: 3080:                {
        -: 3081:                    __err |= ios_base::failbit;
        -: 3082:                    return false;
        -: 3083:                }
        -: 3084:                for (++__b; __fd > 0; --__fd, ++__b)
        -: 3085:                {
        -: 3086:                    if (__b == __e || !__ct.is(ctype_base::digit, *__b))
        -: 3087:                    {
        -: 3088:                        __err |= ios_base::failbit;
        -: 3089:                        return false;
        -: 3090:                    }
        -: 3091:                    if (__wn == __we)
        -: 3092:                        __double_or_nothing(__wb, __wn, __we);
        -: 3093:                    *__wn++ = *__b;
        -: 3094:                }
        -: 3095:            }
        -: 3096:            if (__wn == __wb.get())
        -: 3097:            {
        -: 3098:                __err |= ios_base::failbit;
        -: 3099:                return false;
        -: 3100:            }
        -: 3101:            }
        -: 3102:            break;
        -: 3103:        }
        -: 3104:    }
        -: 3105:    if (__trailing_sign)
        -: 3106:    {
        -: 3107:        for (unsigned __i = 1; __i < __trailing_sign->size(); ++__i, ++__b)
        -: 3108:        {
        -: 3109:            if (__b == __e || *__b != (*__trailing_sign)[__i])
        -: 3110:            {
        -: 3111:                __err |= ios_base::failbit;
        -: 3112:                return false;
        -: 3113:            }
        -: 3114:        }
        -: 3115:    }
        -: 3116:    if (__gb.get() != __gn)
        -: 3117:    {
        -: 3118:        ios_base::iostate __et = ios_base::goodbit;
        -: 3119:        __check_grouping(__grp, __gb.get(), __gn, __et);
        -: 3120:        if (__et)
        -: 3121:        {
        -: 3122:            __err |= ios_base::failbit;
        -: 3123:            return false;
        -: 3124:        }
        -: 3125:    }
        -: 3126:    return true;
        -: 3127:}
        -: 3128:
        -: 3129:template <class _CharT, class _InputIterator>
        -: 3130:_InputIterator
        -: 3131:money_get<_CharT, _InputIterator>::do_get(iter_type __b, iter_type __e,
        -: 3132:                                          bool __intl, ios_base& __iob,
        -: 3133:                                          ios_base::iostate& __err,
        -: 3134:                                          long double& __v) const
        -: 3135:{
        -: 3136:    const int __bz = 100;
        -: 3137:    char_type __wbuf[__bz];
        -: 3138:    unique_ptr<char_type, void(*)(void*)> __wb(__wbuf, __do_nothing);
        -: 3139:    char_type* __wn;
        -: 3140:    char_type* __we = __wbuf + __bz;
        -: 3141:    locale __loc = __iob.getloc();
        -: 3142:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__loc);
        -: 3143:    bool __neg = false;
        -: 3144:    if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct,
        -: 3145:                 __wb, __wn, __we))
        -: 3146:    {
        -: 3147:        const char __src[] = "0123456789";
        -: 3148:        char_type __atoms[sizeof(__src)-1];
        -: 3149:        __ct.widen(__src, __src + (sizeof(__src)-1), __atoms);
        -: 3150:        char __nbuf[__bz];
        -: 3151:        char* __nc = __nbuf;
        -: 3152:        unique_ptr<char, void(*)(void*)> __h(nullptr, free);
        -: 3153:        if (__wn - __wb.get() > __bz-2)
        -: 3154:        {
        -: 3155:            __h.reset((char*)malloc(static_cast<size_t>(__wn - __wb.get() + 2)));
        -: 3156:            if (__h.get() == nullptr)
        -: 3157:                __throw_bad_alloc();
        -: 3158:            __nc = __h.get();
        -: 3159:        }
        -: 3160:        if (__neg)
        -: 3161:            *__nc++ = '-';
        -: 3162:        for (const char_type* __w = __wb.get(); __w < __wn; ++__w, ++__nc)
        -: 3163:            *__nc = __src[find(__atoms, _VSTD::end(__atoms), *__w) - __atoms];
        -: 3164:        *__nc = char();
        -: 3165:        if (sscanf(__nbuf, "%Lf", &__v) != 1)
        -: 3166:            __throw_runtime_error("money_get error");
        -: 3167:    }
        -: 3168:    if (__b == __e)
        -: 3169:        __err |= ios_base::eofbit;
        -: 3170:    return __b;
        -: 3171:}
        -: 3172:
        -: 3173:template <class _CharT, class _InputIterator>
        -: 3174:_InputIterator
        -: 3175:money_get<_CharT, _InputIterator>::do_get(iter_type __b, iter_type __e,
        -: 3176:                                          bool __intl, ios_base& __iob,
        -: 3177:                                          ios_base::iostate& __err,
        -: 3178:                                          string_type& __v) const
        -: 3179:{
        -: 3180:    const int __bz = 100;
        -: 3181:    char_type __wbuf[__bz];
        -: 3182:    unique_ptr<char_type, void(*)(void*)> __wb(__wbuf, __do_nothing);
        -: 3183:    char_type* __wn;
        -: 3184:    char_type* __we = __wbuf + __bz;
        -: 3185:    locale __loc = __iob.getloc();
        -: 3186:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__loc);
        -: 3187:    bool __neg = false;
        -: 3188:    if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct,
        -: 3189:                 __wb, __wn, __we))
        -: 3190:    {
        -: 3191:        __v.clear();
        -: 3192:        if (__neg)
        -: 3193:            __v.push_back(__ct.widen('-'));
        -: 3194:        char_type __z = __ct.widen('0');
        -: 3195:        char_type* __w;
        -: 3196:        for (__w = __wb.get(); __w < __wn-1; ++__w)
        -: 3197:            if (*__w != __z)
        -: 3198:                break;
        -: 3199:        __v.append(__w, __wn);
        -: 3200:    }
        -: 3201:    if (__b == __e)
        -: 3202:        __err |= ios_base::eofbit;
        -: 3203:    return __b;
        -: 3204:}
        -: 3205:
        -: 3206:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS money_get<char>)
        -: 3207:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 3208:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS money_get<wchar_t>)
        -: 3209:#endif
        -: 3210:
        -: 3211:// money_put
        -: 3212:
        -: 3213:template <class _CharT>
        -: 3214:class __money_put
        -: 3215:{
        -: 3216:protected:
        -: 3217:    typedef _CharT                  char_type;
        -: 3218:    typedef basic_string<char_type> string_type;
        -: 3219:
        -: 3220:    _LIBCPP_INLINE_VISIBILITY __money_put() {}
        -: 3221:
        -: 3222:    static void __gather_info(bool __intl, bool __neg, const locale& __loc,
        -: 3223:                              money_base::pattern& __pat, char_type& __dp,
        -: 3224:                              char_type& __ts, string& __grp,
        -: 3225:                              string_type& __sym, string_type& __sn,
        -: 3226:                              int& __fd);
        -: 3227:    static void __format(char_type* __mb, char_type*& __mi, char_type*& __me,
        -: 3228:                         ios_base::fmtflags __flags,
        -: 3229:                         const char_type* __db, const char_type* __de,
        -: 3230:                         const ctype<char_type>& __ct, bool __neg,
        -: 3231:                         const money_base::pattern& __pat, char_type __dp,
        -: 3232:                         char_type __ts, const string& __grp,
        -: 3233:                         const string_type& __sym, const string_type& __sn,
        -: 3234:                         int __fd);
        -: 3235:};
        -: 3236:
        -: 3237:template <class _CharT>
        -: 3238:void
        -: 3239:__money_put<_CharT>::__gather_info(bool __intl, bool __neg, const locale& __loc,
        -: 3240:                                   money_base::pattern& __pat, char_type& __dp,
        -: 3241:                                   char_type& __ts, string& __grp,
        -: 3242:                                   string_type& __sym, string_type& __sn,
        -: 3243:                                   int& __fd)
        -: 3244:{
        -: 3245:    if (__intl)
        -: 3246:    {
        -: 3247:        const moneypunct<char_type, true>& __mp =
        -: 3248:            use_facet<moneypunct<char_type, true> >(__loc);
        -: 3249:        if (__neg)
        -: 3250:        {
        -: 3251:            __pat = __mp.neg_format();
        -: 3252:            __sn = __mp.negative_sign();
        -: 3253:        }
        -: 3254:        else
        -: 3255:        {
        -: 3256:            __pat = __mp.pos_format();
        -: 3257:            __sn = __mp.positive_sign();
        -: 3258:        }
        -: 3259:        __dp = __mp.decimal_point();
        -: 3260:        __ts = __mp.thousands_sep();
        -: 3261:        __grp = __mp.grouping();
        -: 3262:        __sym = __mp.curr_symbol();
        -: 3263:        __fd = __mp.frac_digits();
        -: 3264:    }
        -: 3265:    else
        -: 3266:    {
        -: 3267:        const moneypunct<char_type, false>& __mp =
        -: 3268:            use_facet<moneypunct<char_type, false> >(__loc);
        -: 3269:        if (__neg)
        -: 3270:        {
        -: 3271:            __pat = __mp.neg_format();
        -: 3272:            __sn = __mp.negative_sign();
        -: 3273:        }
        -: 3274:        else
        -: 3275:        {
        -: 3276:            __pat = __mp.pos_format();
        -: 3277:            __sn = __mp.positive_sign();
        -: 3278:        }
        -: 3279:        __dp = __mp.decimal_point();
        -: 3280:        __ts = __mp.thousands_sep();
        -: 3281:        __grp = __mp.grouping();
        -: 3282:        __sym = __mp.curr_symbol();
        -: 3283:        __fd = __mp.frac_digits();
        -: 3284:    }
        -: 3285:}
        -: 3286:
        -: 3287:template <class _CharT>
        -: 3288:void
        -: 3289:__money_put<_CharT>::__format(char_type* __mb, char_type*& __mi, char_type*& __me,
        -: 3290:                              ios_base::fmtflags __flags,
        -: 3291:                              const char_type* __db, const char_type* __de,
        -: 3292:                              const ctype<char_type>& __ct, bool __neg,
        -: 3293:                              const money_base::pattern& __pat, char_type __dp,
        -: 3294:                              char_type __ts, const string& __grp,
        -: 3295:                              const string_type& __sym, const string_type& __sn,
        -: 3296:                              int __fd)
        -: 3297:{
        -: 3298:    __me = __mb;
        -: 3299:    for (unsigned __p = 0; __p < 4; ++__p)
        -: 3300:    {
        -: 3301:        switch (__pat.field[__p])
        -: 3302:        {
        -: 3303:        case money_base::none:
        -: 3304:            __mi = __me;
        -: 3305:            break;
        -: 3306:        case money_base::space:
        -: 3307:            __mi = __me;
        -: 3308:            *__me++ = __ct.widen(' ');
        -: 3309:            break;
        -: 3310:        case money_base::sign:
        -: 3311:            if (!__sn.empty())
        -: 3312:                *__me++ = __sn[0];
        -: 3313:            break;
        -: 3314:        case money_base::symbol:
        -: 3315:            if (!__sym.empty() && (__flags & ios_base::showbase))
        -: 3316:                __me = _VSTD::copy(__sym.begin(), __sym.end(), __me);
        -: 3317:            break;
        -: 3318:        case money_base::value:
        -: 3319:            {
        -: 3320:            // remember start of value so we can reverse it
        -: 3321:            char_type* __t = __me;
        -: 3322:            // find beginning of digits
        -: 3323:            if (__neg)
        -: 3324:                ++__db;
        -: 3325:            // find end of digits
        -: 3326:            const char_type* __d;
        -: 3327:            for (__d = __db; __d < __de; ++__d)
        -: 3328:                if (!__ct.is(ctype_base::digit, *__d))
        -: 3329:                    break;
        -: 3330:            // print fractional part
        -: 3331:            if (__fd > 0)
        -: 3332:            {
        -: 3333:                int __f;
        -: 3334:                for (__f = __fd; __d > __db && __f > 0; --__f)
        -: 3335:                    *__me++ = *--__d;
        -: 3336:                char_type __z = __f > 0 ? __ct.widen('0') : char_type();
        -: 3337:                for (; __f > 0; --__f)
        -: 3338:                    *__me++ = __z;
        -: 3339:                *__me++ = __dp;
        -: 3340:            }
        -: 3341:            // print units part
        -: 3342:            if (__d == __db)
        -: 3343:            {
        -: 3344:                *__me++ = __ct.widen('0');
        -: 3345:            }
        -: 3346:            else
        -: 3347:            {
        -: 3348:                unsigned __ng = 0;
        -: 3349:                unsigned __ig = 0;
        -: 3350:                unsigned __gl = __grp.empty() ? numeric_limits<unsigned>::max()
        -: 3351:                                              : static_cast<unsigned>(__grp[__ig]);
        -: 3352:                while (__d != __db)
        -: 3353:                {
        -: 3354:                    if (__ng == __gl)
        -: 3355:                    {
        -: 3356:                        *__me++ = __ts;
        -: 3357:                        __ng = 0;
        -: 3358:                        if (++__ig < __grp.size())
        -: 3359:                            __gl = __grp[__ig] == numeric_limits<char>::max() ?
        -: 3360:                                        numeric_limits<unsigned>::max() :
        -: 3361:                                        static_cast<unsigned>(__grp[__ig]);
        -: 3362:                    }
        -: 3363:                    *__me++ = *--__d;
        -: 3364:                    ++__ng;
        -: 3365:                }
        -: 3366:            }
        -: 3367:            // reverse it
        -: 3368:            reverse(__t, __me);
        -: 3369:            }
        -: 3370:            break;
        -: 3371:        }
        -: 3372:    }
        -: 3373:    // print rest of sign, if any
        -: 3374:    if (__sn.size() > 1)
        -: 3375:        __me = _VSTD::copy(__sn.begin()+1, __sn.end(), __me);
        -: 3376:    // set alignment
        -: 3377:    if ((__flags & ios_base::adjustfield) == ios_base::left)
        -: 3378:        __mi = __me;
        -: 3379:    else if ((__flags & ios_base::adjustfield) != ios_base::internal)
        -: 3380:        __mi = __mb;
        -: 3381:}
        -: 3382:
        -: 3383:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __money_put<char>)
        -: 3384:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 3385:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __money_put<wchar_t>)
        -: 3386:#endif
        -: 3387:
        -: 3388:template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
        -: 3389:class _LIBCPP_TEMPLATE_VIS money_put
        -: 3390:    : public locale::facet,
        -: 3391:      private __money_put<_CharT>
        -: 3392:{
        -: 3393:public:
        -: 3394:    typedef _CharT                  char_type;
        -: 3395:    typedef _OutputIterator         iter_type;
        -: 3396:    typedef basic_string<char_type> string_type;
        -: 3397:
        -: 3398:    _LIBCPP_INLINE_VISIBILITY
        -: 3399:    explicit money_put(size_t __refs = 0)
        -: 3400:        : locale::facet(__refs) {}
        -: 3401:
        -: 3402:    _LIBCPP_INLINE_VISIBILITY
        -: 3403:    iter_type put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl,
        -: 3404:                  long double __units) const
        -: 3405:    {
        -: 3406:        return do_put(__s, __intl, __iob, __fl, __units);
        -: 3407:    }
        -: 3408:
        -: 3409:    _LIBCPP_INLINE_VISIBILITY
        -: 3410:    iter_type put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl,
        -: 3411:                  const string_type& __digits) const
        -: 3412:    {
        -: 3413:        return do_put(__s, __intl, __iob, __fl, __digits);
        -: 3414:    }
        -: 3415:
        -: 3416:    static locale::id id;
        -: 3417:
        -: 3418:protected:
        -: 3419:    _LIBCPP_INLINE_VISIBILITY
        -: 3420:    ~money_put() {}
        -: 3421:
        -: 3422:    virtual iter_type do_put(iter_type __s, bool __intl, ios_base& __iob,
        -: 3423:                             char_type __fl, long double __units) const;
        -: 3424:    virtual iter_type do_put(iter_type __s, bool __intl, ios_base& __iob,
        -: 3425:                             char_type __fl, const string_type& __digits) const;
        -: 3426:};
        -: 3427:
        -: 3428:template <class _CharT, class _OutputIterator>
        -: 3429:locale::id
        -: 3430:money_put<_CharT, _OutputIterator>::id;
        -: 3431:
        -: 3432:template <class _CharT, class _OutputIterator>
        -: 3433:_OutputIterator
        -: 3434:money_put<_CharT, _OutputIterator>::do_put(iter_type __s, bool __intl,
        -: 3435:                                           ios_base& __iob, char_type __fl,
        -: 3436:                                           long double __units) const
        -: 3437:{
        -: 3438:    // convert to char
        -: 3439:    const size_t __bs = 100;
        -: 3440:    char __buf[__bs];
        -: 3441:    char* __bb = __buf;
        -: 3442:    char_type __digits[__bs];
        -: 3443:    char_type* __db = __digits;
        -: 3444:    int __n = snprintf(__bb, __bs, "%.0Lf", __units);
        -: 3445:    unique_ptr<char, void(*)(void*)> __hn(nullptr, free);
        -: 3446:    unique_ptr<char_type, void(*)(void*)> __hd(0, free);
        -: 3447:    // secure memory for digit storage
        -: 3448:    if (static_cast<size_t>(__n) > __bs-1)
        -: 3449:    {
        -: 3450:        __n = __libcpp_asprintf_l(&__bb, _LIBCPP_GET_C_LOCALE, "%.0Lf", __units);
        -: 3451:        if (__n == -1)
        -: 3452:            __throw_bad_alloc();
        -: 3453:        __hn.reset(__bb);
        -: 3454:        __hd.reset((char_type*)malloc(static_cast<size_t>(__n) * sizeof(char_type)));
        -: 3455:        if (__hd == nullptr)
        -: 3456:            __throw_bad_alloc();
        -: 3457:        __db = __hd.get();
        -: 3458:    }
        -: 3459:    // gather info
        -: 3460:    locale __loc = __iob.getloc();
        -: 3461:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__loc);
        -: 3462:    __ct.widen(__bb, __bb + __n, __db);
        -: 3463:    bool __neg = __n > 0 && __bb[0] == '-';
        -: 3464:    money_base::pattern __pat;
        -: 3465:    char_type __dp;
        -: 3466:    char_type __ts;
        -: 3467:    string __grp;
        -: 3468:    string_type __sym;
        -: 3469:    string_type __sn;
        -: 3470:    int __fd;
        -: 3471:    this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
        -: 3472:    // secure memory for formatting
        -: 3473:    char_type __mbuf[__bs];
        -: 3474:    char_type* __mb = __mbuf;
        -: 3475:    unique_ptr<char_type, void(*)(void*)> __hw(0, free);
        -: 3476:    size_t __exn = __n > __fd ?
        -: 3477:                   (static_cast<size_t>(__n) - static_cast<size_t>(__fd)) * 2 +
        -: 3478:                    __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 1
        -: 3479:                 : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
        -: 3480:    if (__exn > __bs)
        -: 3481:    {
        -: 3482:        __hw.reset((char_type*)malloc(__exn * sizeof(char_type)));
        -: 3483:        __mb = __hw.get();
        -: 3484:        if (__mb == 0)
        -: 3485:            __throw_bad_alloc();
        -: 3486:    }
        -: 3487:    // format
        -: 3488:    char_type* __mi;
        -: 3489:    char_type* __me;
        -: 3490:    this->__format(__mb, __mi, __me, __iob.flags(),
        -: 3491:                   __db, __db + __n, __ct,
        -: 3492:                   __neg, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
        -: 3493:    return __pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
        -: 3494:}
        -: 3495:
        -: 3496:template <class _CharT, class _OutputIterator>
        -: 3497:_OutputIterator
        -: 3498:money_put<_CharT, _OutputIterator>::do_put(iter_type __s, bool __intl,
        -: 3499:                                           ios_base& __iob, char_type __fl,
        -: 3500:                                           const string_type& __digits) const
        -: 3501:{
        -: 3502:    // gather info
        -: 3503:    locale __loc = __iob.getloc();
        -: 3504:    const ctype<char_type>& __ct = use_facet<ctype<char_type> >(__loc);
        -: 3505:    bool __neg = __digits.size() > 0 && __digits[0] == __ct.widen('-');
        -: 3506:    money_base::pattern __pat;
        -: 3507:    char_type __dp;
        -: 3508:    char_type __ts;
        -: 3509:    string __grp;
        -: 3510:    string_type __sym;
        -: 3511:    string_type __sn;
        -: 3512:    int __fd;
        -: 3513:    this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
        -: 3514:    // secure memory for formatting
        -: 3515:    char_type __mbuf[100];
        -: 3516:    char_type* __mb = __mbuf;
        -: 3517:    unique_ptr<char_type, void(*)(void*)> __h(0, free);
        -: 3518:    size_t __exn = static_cast<int>(__digits.size()) > __fd ?
        -: 3519:                   (__digits.size() - static_cast<size_t>(__fd)) * 2 +
        -: 3520:                    __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 1
        -: 3521:                 : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
        -: 3522:    if (__exn > 100)
        -: 3523:    {
        -: 3524:        __h.reset((char_type*)malloc(__exn * sizeof(char_type)));
        -: 3525:        __mb = __h.get();
        -: 3526:        if (__mb == 0)
        -: 3527:            __throw_bad_alloc();
        -: 3528:    }
        -: 3529:    // format
        -: 3530:    char_type* __mi;
        -: 3531:    char_type* __me;
        -: 3532:    this->__format(__mb, __mi, __me, __iob.flags(),
        -: 3533:                   __digits.data(), __digits.data() + __digits.size(), __ct,
        -: 3534:                   __neg, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
        -: 3535:    return __pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
        -: 3536:}
        -: 3537:
        -: 3538:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS money_put<char>)
        -: 3539:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 3540:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS money_put<wchar_t>)
        -: 3541:#endif
        -: 3542:
        -: 3543:// messages
        -: 3544:
        -: 3545:class _LIBCPP_TYPE_VIS messages_base
        -: 3546:{
        -: 3547:public:
        -: 3548:    typedef ptrdiff_t catalog;
        -: 3549:
        -: 3550:    _LIBCPP_INLINE_VISIBILITY messages_base() {}
        -: 3551:};
        -: 3552:
        -: 3553:template <class _CharT>
        -: 3554:class _LIBCPP_TEMPLATE_VIS messages
        -: 3555:    : public locale::facet,
        -: 3556:      public messages_base
        -: 3557:{
        -: 3558:public:
        -: 3559:    typedef _CharT               char_type;
        -: 3560:    typedef basic_string<_CharT> string_type;
        -: 3561:
        -: 3562:    _LIBCPP_INLINE_VISIBILITY
        -: 3563:    explicit messages(size_t __refs = 0)
        -: 3564:        : locale::facet(__refs) {}
        -: 3565:
        -: 3566:    _LIBCPP_INLINE_VISIBILITY
        -: 3567:    catalog open(const basic_string<char>& __nm, const locale& __loc) const
        -: 3568:    {
        -: 3569:        return do_open(__nm, __loc);
        -: 3570:    }
        -: 3571:
        -: 3572:    _LIBCPP_INLINE_VISIBILITY
        -: 3573:    string_type get(catalog __c, int __set, int __msgid,
        -: 3574:                    const string_type& __dflt) const
        -: 3575:    {
        -: 3576:        return do_get(__c, __set, __msgid, __dflt);
        -: 3577:    }
        -: 3578:
        -: 3579:    _LIBCPP_INLINE_VISIBILITY
        -: 3580:    void close(catalog __c) const
        -: 3581:    {
        -: 3582:        do_close(__c);
        -: 3583:    }
        -: 3584:
        -: 3585:    static locale::id id;
        -: 3586:
        -: 3587:protected:
        -: 3588:    _LIBCPP_INLINE_VISIBILITY
        -: 3589:    ~messages() {}
        -: 3590:
        -: 3591:    virtual catalog do_open(const basic_string<char>&, const locale&) const;
        -: 3592:    virtual string_type do_get(catalog, int __set, int __msgid,
        -: 3593:                               const string_type& __dflt) const;
        -: 3594:    virtual void do_close(catalog) const;
        -: 3595:};
        -: 3596:
        -: 3597:template <class _CharT>
        -: 3598:locale::id
        -: 3599:messages<_CharT>::id;
        -: 3600:
        -: 3601:template <class _CharT>
        -: 3602:typename messages<_CharT>::catalog
        -: 3603:messages<_CharT>::do_open(const basic_string<char>& __nm, const locale&) const
        -: 3604:{
        -: 3605:#ifdef _LIBCPP_HAS_CATOPEN
        -: 3606:    catalog __cat = (catalog)catopen(__nm.c_str(), NL_CAT_LOCALE);
        -: 3607:    if (__cat != -1)
        -: 3608:        __cat = static_cast<catalog>((static_cast<size_t>(__cat) >> 1));
        -: 3609:    return __cat;
        -: 3610:#else // !_LIBCPP_HAS_CATOPEN
        -: 3611:    (void)__nm;
        -: 3612:    return -1;
        -: 3613:#endif // _LIBCPP_HAS_CATOPEN
        -: 3614:}
        -: 3615:
        -: 3616:template <class _CharT>
        -: 3617:typename messages<_CharT>::string_type
        -: 3618:messages<_CharT>::do_get(catalog __c, int __set, int __msgid,
        -: 3619:                         const string_type& __dflt) const
        -: 3620:{
        -: 3621:#ifdef _LIBCPP_HAS_CATOPEN
        -: 3622:    string __ndflt;
        -: 3623:    __narrow_to_utf8<sizeof(char_type)*__CHAR_BIT__>()(back_inserter(__ndflt),
        -: 3624:                                                       __dflt.c_str(),
        -: 3625:                                                       __dflt.c_str() + __dflt.size());
        -: 3626:    if (__c != -1)
        -: 3627:        __c <<= 1;
        -: 3628:    nl_catd __cat = (nl_catd)__c;
        -: 3629:    char* __n = catgets(__cat, __set, __msgid, __ndflt.c_str());
        -: 3630:    string_type __w;
        -: 3631:    __widen_from_utf8<sizeof(char_type)*__CHAR_BIT__>()(back_inserter(__w),
        -: 3632:                                                        __n, __n + _VSTD::strlen(__n));
        -: 3633:    return __w;
        -: 3634:#else // !_LIBCPP_HAS_CATOPEN
        -: 3635:    (void)__c;
        -: 3636:    (void)__set;
        -: 3637:    (void)__msgid;
        -: 3638:    return __dflt;
        -: 3639:#endif // _LIBCPP_HAS_CATOPEN
        -: 3640:}
        -: 3641:
        -: 3642:template <class _CharT>
        -: 3643:void
        -: 3644:messages<_CharT>::do_close(catalog __c) const
        -: 3645:{
        -: 3646:#ifdef _LIBCPP_HAS_CATOPEN
        -: 3647:    if (__c != -1)
        -: 3648:        __c <<= 1;
        -: 3649:    nl_catd __cat = (nl_catd)__c;
        -: 3650:    catclose(__cat);
        -: 3651:#else // !_LIBCPP_HAS_CATOPEN
        -: 3652:    (void)__c;
        -: 3653:#endif // _LIBCPP_HAS_CATOPEN
        -: 3654:}
        -: 3655:
        -: 3656:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS messages<char>)
        -: 3657:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 3658:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS messages<wchar_t>)
        -: 3659:#endif
        -: 3660:
        -: 3661:template <class _CharT>
        -: 3662:class _LIBCPP_TEMPLATE_VIS messages_byname
        -: 3663:    : public messages<_CharT>
        -: 3664:{
        -: 3665:public:
        -: 3666:    typedef messages_base::catalog catalog;
        -: 3667:    typedef basic_string<_CharT> string_type;
        -: 3668:
        -: 3669:    _LIBCPP_INLINE_VISIBILITY
        -: 3670:    explicit messages_byname(const char*, size_t __refs = 0)
        -: 3671:        : messages<_CharT>(__refs) {}
        -: 3672:
        -: 3673:    _LIBCPP_INLINE_VISIBILITY
        -: 3674:    explicit messages_byname(const string&, size_t __refs = 0)
        -: 3675:        : messages<_CharT>(__refs) {}
        -: 3676:
        -: 3677:protected:
        -: 3678:    _LIBCPP_INLINE_VISIBILITY
        -: 3679:    ~messages_byname() {}
        -: 3680:};
        -: 3681:
        -: 3682:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS messages_byname<char>)
        -: 3683:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 3684:_LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS messages_byname<wchar_t>)
        -: 3685:#endif
        -: 3686:
        -: 3687:template<class _Codecvt, class _Elem = wchar_t,
        -: 3688:         class _Wide_alloc = allocator<_Elem>,
        -: 3689:         class _Byte_alloc = allocator<char> >
        -: 3690:class _LIBCPP_TEMPLATE_VIS wstring_convert
        -: 3691:{
        -: 3692:public:
        -: 3693:    typedef basic_string<char, char_traits<char>, _Byte_alloc>   byte_string;
        -: 3694:    typedef basic_string<_Elem, char_traits<_Elem>, _Wide_alloc> wide_string;
        -: 3695:    typedef typename _Codecvt::state_type                        state_type;
        -: 3696:    typedef typename wide_string::traits_type::int_type          int_type;
        -: 3697:
        -: 3698:private:
        -: 3699:    byte_string __byte_err_string_;
        -: 3700:    wide_string __wide_err_string_;
        -: 3701:    _Codecvt* __cvtptr_;
        -: 3702:    state_type __cvtstate_;
        -: 3703:    size_t __cvtcount_;
        -: 3704:
        -: 3705:    wstring_convert(const wstring_convert& __wc);
        -: 3706:    wstring_convert& operator=(const wstring_convert& __wc);
        -: 3707:public:
        -: 3708:#ifndef _LIBCPP_CXX03_LANG
        -: 3709:    _LIBCPP_INLINE_VISIBILITY
        -: 3710:    wstring_convert() : wstring_convert(new _Codecvt) {}
        -: 3711:    _LIBCPP_INLINE_VISIBILITY
        -: 3712:    explicit wstring_convert(_Codecvt* __pcvt);
        -: 3713:#else
        -: 3714:    _LIBCPP_INLINE_VISIBILITY
        -: 3715:    _LIBCPP_EXPLICIT_AFTER_CXX11
        -: 3716:    wstring_convert(_Codecvt* __pcvt = new _Codecvt);
        -: 3717:#endif
        -: 3718:
        -: 3719:    _LIBCPP_INLINE_VISIBILITY
        -: 3720:    wstring_convert(_Codecvt* __pcvt, state_type __state);
        -: 3721:    _LIBCPP_EXPLICIT_AFTER_CXX11 wstring_convert(const byte_string& __byte_err,
        -: 3722:                    const wide_string& __wide_err = wide_string());
        -: 3723:#ifndef _LIBCPP_CXX03_LANG
        -: 3724:    _LIBCPP_INLINE_VISIBILITY
        -: 3725:    wstring_convert(wstring_convert&& __wc);
        -: 3726:#endif
        -: 3727:    ~wstring_convert();
        -: 3728:
        -: 3729:    _LIBCPP_INLINE_VISIBILITY
        -: 3730:    wide_string from_bytes(char __byte)
        -: 3731:        {return from_bytes(&__byte, &__byte+1);}
        -: 3732:    _LIBCPP_INLINE_VISIBILITY
        -: 3733:    wide_string from_bytes(const char* __ptr)
        -: 3734:        {return from_bytes(__ptr, __ptr + char_traits<char>::length(__ptr));}
        -: 3735:    _LIBCPP_INLINE_VISIBILITY
        -: 3736:    wide_string from_bytes(const byte_string& __str)
        -: 3737:        {return from_bytes(__str.data(), __str.data() + __str.size());}
        -: 3738:    wide_string from_bytes(const char* __first, const char* __last);
        -: 3739:
        -: 3740:    _LIBCPP_INLINE_VISIBILITY
        -: 3741:    byte_string to_bytes(_Elem __wchar)
        -: 3742:        {return to_bytes(&__wchar, &__wchar+1);}
        -: 3743:    _LIBCPP_INLINE_VISIBILITY
        -: 3744:    byte_string to_bytes(const _Elem* __wptr)
        -: 3745:        {return to_bytes(__wptr, __wptr + char_traits<_Elem>::length(__wptr));}
        -: 3746:    _LIBCPP_INLINE_VISIBILITY
        -: 3747:    byte_string to_bytes(const wide_string& __wstr)
        -: 3748:        {return to_bytes(__wstr.data(), __wstr.data() + __wstr.size());}
        -: 3749:    byte_string to_bytes(const _Elem* __first, const _Elem* __last);
        -: 3750:
        -: 3751:    _LIBCPP_INLINE_VISIBILITY
        -: 3752:    size_t converted() const _NOEXCEPT {return __cvtcount_;}
        -: 3753:    _LIBCPP_INLINE_VISIBILITY
        -: 3754:    state_type state() const {return __cvtstate_;}
        -: 3755:};
        -: 3756:
        -: 3757:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3758:inline
        -: 3759:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3760:    wstring_convert(_Codecvt* __pcvt)
        -: 3761:        : __cvtptr_(__pcvt), __cvtstate_(), __cvtcount_(0)
        -: 3762:{
        -: 3763:}
        -: 3764:
        -: 3765:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3766:inline
        -: 3767:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3768:    wstring_convert(_Codecvt* __pcvt, state_type __state)
        -: 3769:        : __cvtptr_(__pcvt), __cvtstate_(__state), __cvtcount_(0)
        -: 3770:{
        -: 3771:}
        -: 3772:
        -: 3773:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3774:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3775:    wstring_convert(const byte_string& __byte_err, const wide_string& __wide_err)
        -: 3776:        : __byte_err_string_(__byte_err), __wide_err_string_(__wide_err),
        -: 3777:          __cvtstate_(), __cvtcount_(0)
        -: 3778:{
        -: 3779:    __cvtptr_ = new _Codecvt;
        -: 3780:}
        -: 3781:
        -: 3782:#ifndef _LIBCPP_CXX03_LANG
        -: 3783:
        -: 3784:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3785:inline
        -: 3786:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3787:    wstring_convert(wstring_convert&& __wc)
        -: 3788:        : __byte_err_string_(_VSTD::move(__wc.__byte_err_string_)),
        -: 3789:          __wide_err_string_(_VSTD::move(__wc.__wide_err_string_)),
        -: 3790:          __cvtptr_(__wc.__cvtptr_),
        -: 3791:          __cvtstate_(__wc.__cvtstate_), __cvtcount_(__wc.__cvtcount_)
        -: 3792:{
        -: 3793:    __wc.__cvtptr_ = nullptr;
        -: 3794:}
        -: 3795:
        -: 3796:#endif // _LIBCPP_CXX03_LANG
        -: 3797:
        -: 3798:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3799:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::~wstring_convert()
        -: 3800:{
        -: 3801:    delete __cvtptr_;
        -: 3802:}
        -: 3803:
        -: 3804:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3805:typename wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::wide_string
        -: 3806:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3807:    from_bytes(const char* __frm, const char* __frm_end)
        -: 3808:{
        -: 3809:    __cvtcount_ = 0;
        -: 3810:    if (__cvtptr_ != nullptr)
        -: 3811:    {
        -: 3812:        wide_string __ws(2*(__frm_end - __frm), _Elem());
        -: 3813:        if (__frm != __frm_end)
        -: 3814:            __ws.resize(__ws.capacity());
        -: 3815:        codecvt_base::result __r = codecvt_base::ok;
        -: 3816:        state_type __st = __cvtstate_;
        -: 3817:        if (__frm != __frm_end)
        -: 3818:        {
        -: 3819:            _Elem* __to = &__ws[0];
        -: 3820:            _Elem* __to_end = __to + __ws.size();
        -: 3821:            const char* __frm_nxt;
        -: 3822:            do
        -: 3823:            {
        -: 3824:                _Elem* __to_nxt;
        -: 3825:                __r = __cvtptr_->in(__st, __frm, __frm_end, __frm_nxt,
        -: 3826:                                          __to, __to_end, __to_nxt);
        -: 3827:                __cvtcount_ += __frm_nxt - __frm;
        -: 3828:                if (__frm_nxt == __frm)
        -: 3829:                {
        -: 3830:                    __r = codecvt_base::error;
        -: 3831:                }
        -: 3832:                else if (__r == codecvt_base::noconv)
        -: 3833:                {
        -: 3834:                    __ws.resize(__to - &__ws[0]);
        -: 3835:                    // This only gets executed if _Elem is char
        -: 3836:                    __ws.append((const _Elem*)__frm, (const _Elem*)__frm_end);
        -: 3837:                    __frm = __frm_nxt;
        -: 3838:                    __r = codecvt_base::ok;
        -: 3839:                }
        -: 3840:                else if (__r == codecvt_base::ok)
        -: 3841:                {
        -: 3842:                    __ws.resize(__to_nxt - &__ws[0]);
        -: 3843:                    __frm = __frm_nxt;
        -: 3844:                }
        -: 3845:                else if (__r == codecvt_base::partial)
        -: 3846:                {
        -: 3847:                    ptrdiff_t __s = __to_nxt - &__ws[0];
        -: 3848:                    __ws.resize(2 * __s);
        -: 3849:                    __to = &__ws[0] + __s;
        -: 3850:                    __to_end = &__ws[0] + __ws.size();
        -: 3851:                    __frm = __frm_nxt;
        -: 3852:                }
        -: 3853:            } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
        -: 3854:        }
        -: 3855:        if (__r == codecvt_base::ok)
        -: 3856:            return __ws;
        -: 3857:    }
        -: 3858:
        -: 3859:    if (__wide_err_string_.empty())
        -: 3860:        __throw_range_error("wstring_convert: from_bytes error");
        -: 3861:
        -: 3862:    return __wide_err_string_;
        -: 3863:}
        -: 3864:
        -: 3865:template<class _Codecvt, class _Elem, class _Wide_alloc, class _Byte_alloc>
        -: 3866:typename wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::byte_string
        -: 3867:wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>::
        -: 3868:    to_bytes(const _Elem* __frm, const _Elem* __frm_end)
        -: 3869:{
        -: 3870:    __cvtcount_ = 0;
        -: 3871:    if (__cvtptr_ != nullptr)
        -: 3872:    {
        -: 3873:        byte_string __bs(2*(__frm_end - __frm), char());
        -: 3874:        if (__frm != __frm_end)
        -: 3875:            __bs.resize(__bs.capacity());
        -: 3876:        codecvt_base::result __r = codecvt_base::ok;
        -: 3877:        state_type __st = __cvtstate_;
        -: 3878:        if (__frm != __frm_end)
        -: 3879:        {
        -: 3880:            char* __to = &__bs[0];
        -: 3881:            char* __to_end = __to + __bs.size();
        -: 3882:            const _Elem* __frm_nxt;
        -: 3883:            do
        -: 3884:            {
        -: 3885:                char* __to_nxt;
        -: 3886:                __r = __cvtptr_->out(__st, __frm, __frm_end, __frm_nxt,
        -: 3887:                                           __to, __to_end, __to_nxt);
        -: 3888:                __cvtcount_ += __frm_nxt - __frm;
        -: 3889:                if (__frm_nxt == __frm)
        -: 3890:                {
        -: 3891:                    __r = codecvt_base::error;
        -: 3892:                }
        -: 3893:                else if (__r == codecvt_base::noconv)
        -: 3894:                {
        -: 3895:                    __bs.resize(__to - &__bs[0]);
        -: 3896:                    // This only gets executed if _Elem is char
        -: 3897:                    __bs.append((const char*)__frm, (const char*)__frm_end);
        -: 3898:                    __frm = __frm_nxt;
        -: 3899:                    __r = codecvt_base::ok;
        -: 3900:                }
        -: 3901:                else if (__r == codecvt_base::ok)
        -: 3902:                {
        -: 3903:                    __bs.resize(__to_nxt - &__bs[0]);
        -: 3904:                    __frm = __frm_nxt;
        -: 3905:                }
        -: 3906:                else if (__r == codecvt_base::partial)
        -: 3907:                {
        -: 3908:                    ptrdiff_t __s = __to_nxt - &__bs[0];
        -: 3909:                    __bs.resize(2 * __s);
        -: 3910:                    __to = &__bs[0] + __s;
        -: 3911:                    __to_end = &__bs[0] + __bs.size();
        -: 3912:                    __frm = __frm_nxt;
        -: 3913:                }
        -: 3914:            } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
        -: 3915:        }
        -: 3916:        if (__r == codecvt_base::ok)
        -: 3917:        {
        -: 3918:            size_t __s = __bs.size();
        -: 3919:            __bs.resize(__bs.capacity());
        -: 3920:            char* __to = &__bs[0] + __s;
        -: 3921:            char* __to_end = __to + __bs.size();
        -: 3922:            do
        -: 3923:            {
        -: 3924:                char* __to_nxt;
        -: 3925:                __r = __cvtptr_->unshift(__st, __to, __to_end, __to_nxt);
        -: 3926:                if (__r == codecvt_base::noconv)
        -: 3927:                {
        -: 3928:                    __bs.resize(__to - &__bs[0]);
        -: 3929:                    __r = codecvt_base::ok;
        -: 3930:                }
        -: 3931:                else if (__r == codecvt_base::ok)
        -: 3932:                {
        -: 3933:                    __bs.resize(__to_nxt - &__bs[0]);
        -: 3934:                }
        -: 3935:                else if (__r == codecvt_base::partial)
        -: 3936:                {
        -: 3937:                    ptrdiff_t __sp = __to_nxt - &__bs[0];
        -: 3938:                    __bs.resize(2 * __sp);
        -: 3939:                    __to = &__bs[0] + __sp;
        -: 3940:                    __to_end = &__bs[0] + __bs.size();
        -: 3941:                }
        -: 3942:            } while (__r == codecvt_base::partial);
        -: 3943:            if (__r == codecvt_base::ok)
        -: 3944:                return __bs;
        -: 3945:        }
        -: 3946:    }
        -: 3947:
        -: 3948:    if (__byte_err_string_.empty())
        -: 3949:        __throw_range_error("wstring_convert: to_bytes error");
        -: 3950:
        -: 3951:    return __byte_err_string_;
        -: 3952:}
        -: 3953:
        -: 3954:template <class _Codecvt, class _Elem = wchar_t, class _Tr = char_traits<_Elem> >
        -: 3955:class _LIBCPP_TEMPLATE_VIS wbuffer_convert
        -: 3956:    : public basic_streambuf<_Elem, _Tr>
        -: 3957:{
        -: 3958:public:
        -: 3959:    // types:
        -: 3960:    typedef _Elem                          char_type;
        -: 3961:    typedef _Tr                            traits_type;
        -: 3962:    typedef typename traits_type::int_type int_type;
        -: 3963:    typedef typename traits_type::pos_type pos_type;
        -: 3964:    typedef typename traits_type::off_type off_type;
        -: 3965:    typedef typename _Codecvt::state_type  state_type;
        -: 3966:
        -: 3967:private:
        -: 3968:    char*       __extbuf_;
        -: 3969:    const char* __extbufnext_;
        -: 3970:    const char* __extbufend_;
        -: 3971:    char __extbuf_min_[8];
        -: 3972:    size_t __ebs_;
        -: 3973:    char_type* __intbuf_;
        -: 3974:    size_t __ibs_;
        -: 3975:    streambuf* __bufptr_;
        -: 3976:    _Codecvt* __cv_;
        -: 3977:    state_type __st_;
        -: 3978:    ios_base::openmode __cm_;
        -: 3979:    bool __owns_eb_;
        -: 3980:    bool __owns_ib_;
        -: 3981:    bool __always_noconv_;
        -: 3982:
        -: 3983:    wbuffer_convert(const wbuffer_convert&);
        -: 3984:    wbuffer_convert& operator=(const wbuffer_convert&);
        -: 3985:
        -: 3986:public:
        -: 3987:#ifndef _LIBCPP_CXX03_LANG
        -: 3988:    wbuffer_convert() : wbuffer_convert(nullptr) {}
        -: 3989:    explicit wbuffer_convert(streambuf* __bytebuf,
        -: 3990:                             _Codecvt* __pcvt = new _Codecvt,
        -: 3991:                             state_type __state = state_type());
        -: 3992:#else
        -: 3993:    _LIBCPP_EXPLICIT_AFTER_CXX11
        -: 3994:    wbuffer_convert(streambuf* __bytebuf = nullptr,
        -: 3995:                    _Codecvt* __pcvt = new _Codecvt,
        -: 3996:                    state_type __state = state_type());
        -: 3997:#endif
        -: 3998:
        -: 3999:    ~wbuffer_convert();
        -: 4000:
        -: 4001:    _LIBCPP_INLINE_VISIBILITY
        -: 4002:    streambuf* rdbuf() const {return __bufptr_;}
        -: 4003:    _LIBCPP_INLINE_VISIBILITY
        -: 4004:    streambuf* rdbuf(streambuf* __bytebuf)
        -: 4005:    {
        -: 4006:        streambuf* __r = __bufptr_;
        -: 4007:        __bufptr_ = __bytebuf;
        -: 4008:        return __r;
        -: 4009:    }
        -: 4010:
        -: 4011:    _LIBCPP_INLINE_VISIBILITY
        -: 4012:    state_type state() const {return __st_;}
        -: 4013:
        -: 4014:protected:
        -: 4015:    virtual int_type underflow();
        -: 4016:    virtual int_type pbackfail(int_type __c = traits_type::eof());
        -: 4017:    virtual int_type overflow (int_type __c = traits_type::eof());
        -: 4018:    virtual basic_streambuf<char_type, traits_type>* setbuf(char_type* __s,
        -: 4019:                                                            streamsize __n);
        -: 4020:    virtual pos_type seekoff(off_type __off, ios_base::seekdir __way,
        -: 4021:                             ios_base::openmode __wch = ios_base::in | ios_base::out);
        -: 4022:    virtual pos_type seekpos(pos_type __sp,
        -: 4023:                             ios_base::openmode __wch = ios_base::in | ios_base::out);
        -: 4024:    virtual int sync();
        -: 4025:
        -: 4026:private:
        -: 4027:    bool __read_mode();
        -: 4028:    void __write_mode();
        -: 4029:    wbuffer_convert* __close();
        -: 4030:};
        -: 4031:
        -: 4032:template <class _Codecvt, class _Elem, class _Tr>
        -: 4033:wbuffer_convert<_Codecvt, _Elem, _Tr>::
        -: 4034:    wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt, state_type __state)
        -: 4035:    : __extbuf_(nullptr),
        -: 4036:      __extbufnext_(nullptr),
        -: 4037:      __extbufend_(nullptr),
        -: 4038:      __ebs_(0),
        -: 4039:      __intbuf_(0),
        -: 4040:      __ibs_(0),
        -: 4041:      __bufptr_(__bytebuf),
        -: 4042:      __cv_(__pcvt),
        -: 4043:      __st_(__state),
        -: 4044:      __cm_(0),
        -: 4045:      __owns_eb_(false),
        -: 4046:      __owns_ib_(false),
        -: 4047:      __always_noconv_(__cv_ ? __cv_->always_noconv() : false)
        -: 4048:{
        -: 4049:    setbuf(0, 4096);
        -: 4050:}
        -: 4051:
        -: 4052:template <class _Codecvt, class _Elem, class _Tr>
        -: 4053:wbuffer_convert<_Codecvt, _Elem, _Tr>::~wbuffer_convert()
        -: 4054:{
        -: 4055:    __close();
        -: 4056:    delete __cv_;
        -: 4057:    if (__owns_eb_)
        -: 4058:        delete [] __extbuf_;
        -: 4059:    if (__owns_ib_)
        -: 4060:        delete [] __intbuf_;
        -: 4061:}
        -: 4062:
        -: 4063:template <class _Codecvt, class _Elem, class _Tr>
        -: 4064:typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type
        -: 4065:wbuffer_convert<_Codecvt, _Elem, _Tr>::underflow()
        -: 4066:{
        -: 4067:    if (__cv_ == 0 || __bufptr_ == 0)
        -: 4068:        return traits_type::eof();
        -: 4069:    bool __initial = __read_mode();
        -: 4070:    char_type __1buf;
        -: 4071:    if (this->gptr() == 0)
        -: 4072:        this->setg(&__1buf, &__1buf+1, &__1buf+1);
        -: 4073:    const size_t __unget_sz = __initial ? 0 : min<size_t>((this->egptr() - this->eback()) / 2, 4);
        -: 4074:    int_type __c = traits_type::eof();
        -: 4075:    if (this->gptr() == this->egptr())
        -: 4076:    {
        -: 4077:        _VSTD::memmove(this->eback(), this->egptr() - __unget_sz, __unget_sz * sizeof(char_type));
        -: 4078:        if (__always_noconv_)
        -: 4079:        {
        -: 4080:            streamsize __nmemb = static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz);
        -: 4081:            __nmemb = __bufptr_->sgetn((char*)this->eback() + __unget_sz, __nmemb);
        -: 4082:            if (__nmemb != 0)
        -: 4083:            {
        -: 4084:                this->setg(this->eback(),
        -: 4085:                           this->eback() + __unget_sz,
        -: 4086:                           this->eback() + __unget_sz + __nmemb);
        -: 4087:                __c = *this->gptr();
        -: 4088:            }
        -: 4089:        }
        -: 4090:        else
        -: 4091:        {
        -: 4092:             _LIBCPP_ASSERT(!(__extbufnext_ == NULL && (__extbufend_ != __extbufnext_)), "underflow moving from NULL" );
        -: 4093:             if (__extbufend_ != __extbufnext_)
        -: 4094:                _VSTD::memmove(__extbuf_, __extbufnext_, __extbufend_ - __extbufnext_);
        -: 4095:            __extbufnext_ = __extbuf_ + (__extbufend_ - __extbufnext_);
        -: 4096:            __extbufend_ = __extbuf_ + (__extbuf_ == __extbuf_min_ ? sizeof(__extbuf_min_) : __ebs_);
        -: 4097:            streamsize __nmemb = _VSTD::min(static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz),
        -: 4098:                                 static_cast<streamsize>(__extbufend_ - __extbufnext_));
        -: 4099:            codecvt_base::result __r;
        -: 4100:            // FIXME: Do we ever need to restore the state here?
        -: 4101:            //state_type __svs = __st_;
        -: 4102:            streamsize __nr = __bufptr_->sgetn(const_cast<char*>(__extbufnext_), __nmemb);
        -: 4103:            if (__nr != 0)
        -: 4104:            {
        -: 4105:                __extbufend_ = __extbufnext_ + __nr;
        -: 4106:                char_type*  __inext;
        -: 4107:                __r = __cv_->in(__st_, __extbuf_, __extbufend_, __extbufnext_,
        -: 4108:                                       this->eback() + __unget_sz,
        -: 4109:                                       this->egptr(), __inext);
        -: 4110:                if (__r == codecvt_base::noconv)
        -: 4111:                {
        -: 4112:                    this->setg((char_type*)__extbuf_, (char_type*)__extbuf_,
        -: 4113:                               (char_type*) const_cast<char *>(__extbufend_));
        -: 4114:                    __c = *this->gptr();
        -: 4115:                }
        -: 4116:                else if (__inext != this->eback() + __unget_sz)
        -: 4117:                {
        -: 4118:                    this->setg(this->eback(), this->eback() + __unget_sz, __inext);
        -: 4119:                    __c = *this->gptr();
        -: 4120:                }
        -: 4121:            }
        -: 4122:        }
        -: 4123:    }
        -: 4124:    else
        -: 4125:        __c = *this->gptr();
        -: 4126:    if (this->eback() == &__1buf)
        -: 4127:        this->setg(0, 0, 0);
        -: 4128:    return __c;
        -: 4129:}
        -: 4130:
        -: 4131:template <class _Codecvt, class _Elem, class _Tr>
        -: 4132:typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type
        -: 4133:wbuffer_convert<_Codecvt, _Elem, _Tr>::pbackfail(int_type __c)
        -: 4134:{
        -: 4135:    if (__cv_ != 0 && __bufptr_ != 0 && this->eback() < this->gptr())
        -: 4136:    {
        -: 4137:        if (traits_type::eq_int_type(__c, traits_type::eof()))
        -: 4138:        {
        -: 4139:            this->gbump(-1);
        -: 4140:            return traits_type::not_eof(__c);
        -: 4141:        }
        -: 4142:        if (traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1]))
        -: 4143:        {
        -: 4144:            this->gbump(-1);
        -: 4145:            *this->gptr() = traits_type::to_char_type(__c);
        -: 4146:            return __c;
        -: 4147:        }
        -: 4148:    }
        -: 4149:    return traits_type::eof();
        -: 4150:}
        -: 4151:
        -: 4152:template <class _Codecvt, class _Elem, class _Tr>
        -: 4153:typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type
        -: 4154:wbuffer_convert<_Codecvt, _Elem, _Tr>::overflow(int_type __c)
        -: 4155:{
        -: 4156:    if (__cv_ == 0 || __bufptr_ == 0)
        -: 4157:        return traits_type::eof();
        -: 4158:    __write_mode();
        -: 4159:    char_type __1buf;
        -: 4160:    char_type* __pb_save = this->pbase();
        -: 4161:    char_type* __epb_save = this->epptr();
        -: 4162:    if (!traits_type::eq_int_type(__c, traits_type::eof()))
        -: 4163:    {
        -: 4164:        if (this->pptr() == 0)
        -: 4165:            this->setp(&__1buf, &__1buf+1);
        -: 4166:        *this->pptr() = traits_type::to_char_type(__c);
        -: 4167:        this->pbump(1);
        -: 4168:    }
        -: 4169:    if (this->pptr() != this->pbase())
        -: 4170:    {
        -: 4171:        if (__always_noconv_)
        -: 4172:        {
        -: 4173:            streamsize __nmemb = static_cast<streamsize>(this->pptr() - this->pbase());
        -: 4174:            if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
        -: 4175:                return traits_type::eof();
        -: 4176:        }
        -: 4177:        else
        -: 4178:        {
        -: 4179:            char* __extbe = __extbuf_;
        -: 4180:            codecvt_base::result __r;
        -: 4181:            do
        -: 4182:            {
        -: 4183:                const char_type* __e;
        -: 4184:                __r = __cv_->out(__st_, this->pbase(), this->pptr(), __e,
        -: 4185:                                        __extbuf_, __extbuf_ + __ebs_, __extbe);
        -: 4186:                if (__e == this->pbase())
        -: 4187:                    return traits_type::eof();
        -: 4188:                if (__r == codecvt_base::noconv)
        -: 4189:                {
        -: 4190:                    streamsize __nmemb = static_cast<size_t>(this->pptr() - this->pbase());
        -: 4191:                    if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
        -: 4192:                        return traits_type::eof();
        -: 4193:                }
        -: 4194:                else if (__r == codecvt_base::ok || __r == codecvt_base::partial)
        -: 4195:                {
        -: 4196:                    streamsize __nmemb = static_cast<size_t>(__extbe - __extbuf_);
        -: 4197:                    if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
        -: 4198:                        return traits_type::eof();
        -: 4199:                    if (__r == codecvt_base::partial)
        -: 4200:                    {
        -: 4201:                        this->setp(const_cast<char_type *>(__e), this->pptr());
        -: 4202:                        this->__pbump(this->epptr() - this->pbase());
        -: 4203:                    }
        -: 4204:                }
        -: 4205:                else
        -: 4206:                    return traits_type::eof();
        -: 4207:            } while (__r == codecvt_base::partial);
        -: 4208:        }
        -: 4209:        this->setp(__pb_save, __epb_save);
        -: 4210:    }
        -: 4211:    return traits_type::not_eof(__c);
        -: 4212:}
        -: 4213:
        -: 4214:template <class _Codecvt, class _Elem, class _Tr>
        -: 4215:basic_streambuf<_Elem, _Tr>*
        -: 4216:wbuffer_convert<_Codecvt, _Elem, _Tr>::setbuf(char_type* __s, streamsize __n)
        -: 4217:{
        -: 4218:    this->setg(0, 0, 0);
        -: 4219:    this->setp(0, 0);
        -: 4220:    if (__owns_eb_)
        -: 4221:        delete [] __extbuf_;
        -: 4222:    if (__owns_ib_)
        -: 4223:        delete [] __intbuf_;
        -: 4224:    __ebs_ = __n;
        -: 4225:    if (__ebs_ > sizeof(__extbuf_min_))
        -: 4226:    {
        -: 4227:        if (__always_noconv_ && __s)
        -: 4228:        {
        -: 4229:            __extbuf_ = (char*)__s;
        -: 4230:            __owns_eb_ = false;
        -: 4231:        }
        -: 4232:        else
        -: 4233:        {
        -: 4234:            __extbuf_ = new char[__ebs_];
        -: 4235:            __owns_eb_ = true;
        -: 4236:        }
        -: 4237:    }
        -: 4238:    else
        -: 4239:    {
        -: 4240:        __extbuf_ = __extbuf_min_;
        -: 4241:        __ebs_ = sizeof(__extbuf_min_);
        -: 4242:        __owns_eb_ = false;
        -: 4243:    }
        -: 4244:    if (!__always_noconv_)
        -: 4245:    {
        -: 4246:        __ibs_ = max<streamsize>(__n, sizeof(__extbuf_min_));
        -: 4247:        if (__s && __ibs_ >= sizeof(__extbuf_min_))
        -: 4248:        {
        -: 4249:            __intbuf_ = __s;
        -: 4250:            __owns_ib_ = false;
        -: 4251:        }
        -: 4252:        else
        -: 4253:        {
        -: 4254:            __intbuf_ = new char_type[__ibs_];
        -: 4255:            __owns_ib_ = true;
        -: 4256:        }
        -: 4257:    }
        -: 4258:    else
        -: 4259:    {
        -: 4260:        __ibs_ = 0;
        -: 4261:        __intbuf_ = 0;
        -: 4262:        __owns_ib_ = false;
        -: 4263:    }
        -: 4264:    return this;
        -: 4265:}
        -: 4266:
        -: 4267:template <class _Codecvt, class _Elem, class _Tr>
        -: 4268:typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
        -: 4269:wbuffer_convert<_Codecvt, _Elem, _Tr>::seekoff(off_type __off, ios_base::seekdir __way,
        -: 4270:                                        ios_base::openmode __om)
        -: 4271:{
        -: 4272:    int __width = __cv_->encoding();
        -: 4273:    if (__cv_ == 0 || __bufptr_ == 0 || (__width <= 0 && __off != 0) || sync())
        -: 4274:        return pos_type(off_type(-1));
        -: 4275:    // __width > 0 || __off == 0, now check __way
        -: 4276:    if (__way != ios_base::beg && __way != ios_base::cur && __way != ios_base::end)
        -: 4277:        return pos_type(off_type(-1));
        -: 4278:    pos_type __r = __bufptr_->pubseekoff(__width * __off, __way, __om);
        -: 4279:    __r.state(__st_);
        -: 4280:    return __r;
        -: 4281:}
        -: 4282:
        -: 4283:template <class _Codecvt, class _Elem, class _Tr>
        -: 4284:typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
        -: 4285:wbuffer_convert<_Codecvt, _Elem, _Tr>::seekpos(pos_type __sp, ios_base::openmode __wch)
        -: 4286:{
        -: 4287:    if (__cv_ == 0 || __bufptr_ == 0 || sync())
        -: 4288:        return pos_type(off_type(-1));
        -: 4289:    if (__bufptr_->pubseekpos(__sp, __wch) == pos_type(off_type(-1)))
        -: 4290:        return pos_type(off_type(-1));
        -: 4291:    return __sp;
        -: 4292:}
        -: 4293:
        -: 4294:template <class _Codecvt, class _Elem, class _Tr>
        -: 4295:int
        -: 4296:wbuffer_convert<_Codecvt, _Elem, _Tr>::sync()
        -: 4297:{
        -: 4298:    if (__cv_ == 0 || __bufptr_ == 0)
        -: 4299:        return 0;
        -: 4300:    if (__cm_ & ios_base::out)
        -: 4301:    {
        -: 4302:        if (this->pptr() != this->pbase())
        -: 4303:            if (overflow() == traits_type::eof())
        -: 4304:                return -1;
        -: 4305:        codecvt_base::result __r;
        -: 4306:        do
        -: 4307:        {
        -: 4308:            char* __extbe;
        -: 4309:            __r = __cv_->unshift(__st_, __extbuf_, __extbuf_ + __ebs_, __extbe);
        -: 4310:            streamsize __nmemb = static_cast<streamsize>(__extbe - __extbuf_);
        -: 4311:            if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
        -: 4312:                return -1;
        -: 4313:        } while (__r == codecvt_base::partial);
        -: 4314:        if (__r == codecvt_base::error)
        -: 4315:            return -1;
        -: 4316:        if (__bufptr_->pubsync())
        -: 4317:            return -1;
        -: 4318:    }
        -: 4319:    else if (__cm_ & ios_base::in)
        -: 4320:    {
        -: 4321:        off_type __c;
        -: 4322:        if (__always_noconv_)
        -: 4323:            __c = this->egptr() - this->gptr();
        -: 4324:        else
        -: 4325:        {
        -: 4326:            int __width = __cv_->encoding();
        -: 4327:            __c = __extbufend_ - __extbufnext_;
        -: 4328:            if (__width > 0)
        -: 4329:                __c += __width * (this->egptr() - this->gptr());
        -: 4330:            else
        -: 4331:            {
        -: 4332:                if (this->gptr() != this->egptr())
        -: 4333:                {
        -: 4334:                    reverse(this->gptr(), this->egptr());
        -: 4335:                    codecvt_base::result __r;
        -: 4336:                    const char_type* __e = this->gptr();
        -: 4337:                    char* __extbe;
        -: 4338:                    do
        -: 4339:                    {
        -: 4340:                        __r = __cv_->out(__st_, __e, this->egptr(), __e,
        -: 4341:                                         __extbuf_, __extbuf_ + __ebs_, __extbe);
        -: 4342:                        switch (__r)
        -: 4343:                        {
        -: 4344:                        case codecvt_base::noconv:
        -: 4345:                            __c += this->egptr() - this->gptr();
        -: 4346:                            break;
        -: 4347:                        case codecvt_base::ok:
        -: 4348:                        case codecvt_base::partial:
        -: 4349:                            __c += __extbe - __extbuf_;
        -: 4350:                            break;
        -: 4351:                        default:
        -: 4352:                            return -1;
        -: 4353:                        }
        -: 4354:                    } while (__r == codecvt_base::partial);
        -: 4355:                }
        -: 4356:            }
        -: 4357:        }
        -: 4358:        if (__bufptr_->pubseekoff(-__c, ios_base::cur, __cm_) == pos_type(off_type(-1)))
        -: 4359:            return -1;
        -: 4360:        this->setg(0, 0, 0);
        -: 4361:        __cm_ = 0;
        -: 4362:    }
        -: 4363:    return 0;
        -: 4364:}
        -: 4365:
        -: 4366:template <class _Codecvt, class _Elem, class _Tr>
        -: 4367:bool
        -: 4368:wbuffer_convert<_Codecvt, _Elem, _Tr>::__read_mode()
        -: 4369:{
        -: 4370:    if (!(__cm_ & ios_base::in))
        -: 4371:    {
        -: 4372:        this->setp(0, 0);
        -: 4373:        if (__always_noconv_)
        -: 4374:            this->setg((char_type*)__extbuf_,
        -: 4375:                       (char_type*)__extbuf_ + __ebs_,
        -: 4376:                       (char_type*)__extbuf_ + __ebs_);
        -: 4377:        else
        -: 4378:            this->setg(__intbuf_, __intbuf_ + __ibs_, __intbuf_ + __ibs_);
        -: 4379:        __cm_ = ios_base::in;
        -: 4380:        return true;
        -: 4381:    }
        -: 4382:    return false;
        -: 4383:}
        -: 4384:
        -: 4385:template <class _Codecvt, class _Elem, class _Tr>
        -: 4386:void
        -: 4387:wbuffer_convert<_Codecvt, _Elem, _Tr>::__write_mode()
        -: 4388:{
        -: 4389:    if (!(__cm_ & ios_base::out))
        -: 4390:    {
        -: 4391:        this->setg(0, 0, 0);
        -: 4392:        if (__ebs_ > sizeof(__extbuf_min_))
        -: 4393:        {
        -: 4394:            if (__always_noconv_)
        -: 4395:                this->setp((char_type*)__extbuf_,
        -: 4396:                           (char_type*)__extbuf_ + (__ebs_ - 1));
        -: 4397:            else
        -: 4398:                this->setp(__intbuf_, __intbuf_ + (__ibs_ - 1));
        -: 4399:        }
        -: 4400:        else
        -: 4401:            this->setp(0, 0);
        -: 4402:        __cm_ = ios_base::out;
        -: 4403:    }
        -: 4404:}
        -: 4405:
        -: 4406:template <class _Codecvt, class _Elem, class _Tr>
        -: 4407:wbuffer_convert<_Codecvt, _Elem, _Tr>*
        -: 4408:wbuffer_convert<_Codecvt, _Elem, _Tr>::__close()
        -: 4409:{
        -: 4410:    wbuffer_convert* __rt = nullptr;
        -: 4411:    if (__cv_ != nullptr && __bufptr_ != nullptr)
        -: 4412:    {
        -: 4413:        __rt = this;
        -: 4414:        if ((__cm_ & ios_base::out) && sync())
        -: 4415:            __rt = nullptr;
        -: 4416:    }
        -: 4417:    return __rt;
        -: 4418:}
        -: 4419:
        -: 4420:_LIBCPP_END_NAMESPACE_STD
        -: 4421:
        -: 4422:_LIBCPP_POP_MACROS
        -: 4423:
        -: 4424:#endif // _LIBCPP_LOCALE
